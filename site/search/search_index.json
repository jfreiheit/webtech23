{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-Technologien","text":"<p>Herzlich willkommen zur WebTech-Veranstaltung im Wintersemester 2023/24! </p>"},{"location":"#grober-inhalt","title":"Grober Inhalt","text":"<p>In dieser Veranstaltung lernen Sie, was das World Wide Web ist und wie man eigene Webseiten und -anwendungen realisiert. Sie lernen die Protokolle und Sprachen <code>http</code>, <code>HTML</code>, <code>CSS</code>und <code>JavaScript</code> kennen und machen sich mit <code>Angular</code>, <code>Node.js</code> und <code>REST</code> vertraut. Zentrales Thema ist der sogenannte MEAN-Stack, d.h. Sie lernen die Entwicklung mithilfe von MongoDB, Express.js, Angular und Node.js kennen.</p> <p>Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). </p> Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 16.-20.10.2023 Einf\u00fchrung und Organisatorisches \u00dcbung 0 \u00a0- - 2. 23.-27.10.2023 HTML \u00dcbung 1 \u00a0Idee 25.10.2022 3. 30.-03.11.2023 CSS (Eigenschaften und Selektoren \u00dcbung 2 \u00a0- 01.11.2022 4. 06.-10.11.2023 CSS (Grid) \u00dcbung 3 \u00a0Konzept 08.11.2022 5. 13.-17.11.2023 RWD (responsive Webdesign) \u00dcbung 4 \u00a0- 15.11.2022 6. 20.-24.11.2023 JavaScript (DOM) \u00dcbung 5 \u00a0Datenmodell 22.11.2022 7. 27.-01.12.2023 Angular (Einf\u00fchrung und Komponenten) \u00dcbung 6 \u00a0Schnittstelle 29.11.2022 8. 04.-08.12.2023 Angular (Bindings und Direktiven) + JSON \u00dcbung 7 \u00a0Frontend (c+r) 06.12.2022 9. 11.-15.12.2023 Angular (Routing und Services) \u00a0Frontend (u+d) 13.12.2022 10. 18.-22.12.2023 Node.js + Express (REST-Server + MongoDB) \u00a0Frontend fertig 20.12.2021 11. 01.-05.01.2024 Angular (Anbindung ans Backend) \u00a0Backend ( c ) 10.01.2023 12. 08.-12.01.2024 Nutzerverwaltung und Material - \u00a0Backend (r + u) 17.01.2023 13. 15.-19.01.2024 Wiederholung - \u00a0Backend (d + fertig) 24.01.2023 14. 22.-26.01.2024 Wiederholung - \u00a0fertig stellen 31.01.2023 15. 29.-02.02.2024 - Fragen - - 16. 05.-09.02.2024 - Fragen Abgabe 1.PZ 13.2.2024, Gespr\u00e4che 14.2.2024 Abgabe 2.PZ 26.3.2024, Gespr\u00e4che 27.3.2024 -"},{"location":"#organisatorisches","title":"Organisatorisches","text":"<p>Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. </p> <p>Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. </p> <p>F\u00fcr die Kommunikation untereinander verwenden wir Slack. Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht.  </p>"},{"location":"#code-aus-der-vorlesung","title":"Code aus der Vorlesung","text":"Code Vorlesung 14.11.2023 <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript&lt;/title&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;JavaScript&lt;/h1&gt;\n    &lt;main&gt;\n        &lt;h4&gt;Eigenschaften&lt;/h4&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Skriptsprache (aus Performanzgr\u00fcnden aber compiliert - z.B. V8 in Chrome, SpiderMonkey in Firefox)&lt;/li&gt;\n            &lt;li&gt;dynamische Typisierung&lt;/li&gt;\n            &lt;li&gt;keine unterschiedlichen Referenztypen&lt;/li&gt;\n            &lt;li&gt;Vererbung durch &lt;code&gt;prototype&lt;/code&gt;&lt;/li&gt;\n            &lt;li&gt;Objekteigenschaften und -funktionen k\u00f6nnen einfach dem Objekt hinzugef\u00fcgt werden&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;h4&gt;N\u00fctzliche Links&lt;/h4&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-262/\"&gt;ECMA-262&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://dom.spec.whatwg.org/\"&gt;Document Object Model (DOM)&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\"&gt;JavaScript Guide&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://www.w3schools.com/js/default.asp\"&gt;JavaScript Tutorial&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://learnjavascript.online/\"&gt;Learn JavaScript&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\"&gt;JavaScript Reference&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType?retiredLocale=de\"&gt;Objekttypen im DOM&lt;/a&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;h4&gt;Ergebnisliste&lt;/h4&gt;\n        &lt;ul id=\"ulresult\"&gt;\n            &lt;li id=\"liresult1\"&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;input onchange=\"inputToList()\" type=\"text\" id=\"input\"  placeholder=\"Name\" /&gt;\n        &lt;button type=\"button\"&gt;Klick Mich!&lt;/button&gt;\n    &lt;/main&gt;\n    &lt;script&gt;\nfunction helloFIW(name = 'World') {\nconsole.log('Hello ' + name)\n}\n\nfunction inputToList() {\nlet input = document.getElementById('input');\nlet inputValue = input.value;\nconsole.log('value :', inputValue)\nlet output = document.querySelector('#liresult1');\nif(output.innerHTML == \"\") {\noutput.innerHTML = inputValue;\noutput.style.color = 'red';\n} else {\nlet newLi = document.createElement('li');\nlet liste = document.querySelector('#ulresult');\nconsole.log('ul : ', liste);\nlet newText = document.createTextNode(inputValue);\nnewLi.appendChild(newText);\nliste.appendChild(newLi);\n}\ninput.value = \"\";\n}\n&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Code Vorlesung 21.11.2023 <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n        integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;Asynchron&lt;/title&gt;\n&lt;/head&gt;\n&lt;body class=\"container\"&gt;\n    &lt;h1&gt;Themen&lt;/h1&gt;\n&lt;div class=\"list-group\"&gt;\n   &lt;a class=\"list-group-item list-group-item-action\" href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\"&gt;asynchron&lt;/a&gt;\n    &lt;a class=\"list-group-item list-group-item-action\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\"&gt;fetch-API&lt;/a&gt;\n    &lt;a class=\"list-group-item list-group-item-action\" href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"&gt;Objekte&lt;/a&gt;\n    &lt;a class=\"list-group-item list-group-item-action\" href=\"https://www.json.org/json-de.html\"&gt;JSON&lt;/a&gt;\n    &lt;a class=\"list-group-item list-group-item-action\" href=\"https://angular.io/\"&gt;Angular&lt;/a&gt;\n&lt;/div&gt;\n&lt;script&gt;\nfunction asyncBehaviour() {\n\nlet a = 1;\nlet b = 1;\n\nsetTimeout(  () =&gt; {\nconsole.log('timeout a = ', a)\n}, 100)\n\nfetch('https://jsonplaceholder.typicode.com/posts')\n.then( response =&gt; {\nconsole.log(response)\nreturn response.json() // Rueckgabe des body unserer Response\n})\n.then ( body =&gt; {\nconsole.log('body', body)\nreturn body[0]\n})\n.then( obj0 =&gt; console.log(obj0))\n\nconsole.log(\"a = \", a)\nconsole.log(\"b = \", b)\n\na = 10;\n}\n\nlet person = {\nname: \"Musterfrau\",\nvorname: \"Maria\",\nadresse: {\nstrasse: \"Wilhelminenhofstr.\",\nnummer: 75,\nplz: 12459,\nstadt: \"Berlin\"\n},\ngetName: () =&gt; `${person.vorname} ${person.name}` }\n\nperson.alter = 42\n\nconsole.log('person', person)\nconsole.log('name', person.name)\nconsole.log('strasse', person.adresse?.strasse)\nconsole.log('name + vorname', person.getName())\n\nlet personJSON = JSON.stringify(person)\nconsole.log(personJSON)\nlet personObj = JSON.parse(personJSON)\nconsole.log(personObj)\n\nasyncBehaviour();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Code Vorlesung 28.11.2023 <p>Angulat-Projekt <code>first</code> - siehe hier</p>"},{"location":"#semesteraufgabe","title":"Semesteraufgabe","text":"<p>Am Ende des Kurses geben Sie eine Webanwendung ab. Diese wird bewertet und bildet die Modulnote f\u00fcr \"WebTech\" (es gibt also keine Klausur o.\u00e4.). \u00dcberlegen Sie sich fr\u00fch, was Sie implementieren wollen. Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Es k\u00f6nnen 2 Studentinnen gemeinsam ein Projekt durchf\u00fchren und abgeben. Sie erhalten dann (h\u00f6chstwahrscheinlich) die gleiche Note. Es muss an den Commits erkennbar sein, welchen Anteil am Ergebnis jede der beiden Studentinnen hatte.</p> Mindestanforderungen <p>Folgende Anforderungen werden an Ihr Projekt gestellt:</p> <ul> <li>das Frontend soll mit Angular entwickelt werden,</li> <li>das Backend mit Node.js,</li> <li>es soll eine Datenbank (MongoDB, kann aber auch MySQL oder PostgreSQL oder MariaDB - aber nicht Firebase) verwendet werden,</li> <li>es soll CRUD implementiert sein, d.h. Sie ben\u00f6tigen <ul> <li>eine Komponente zur Erstellung und Speicherung eines Datenbankeintrages (Create),</li> <li>eine Komponente zur \u00c4nderung eines Datenbankeintrages (Update),</li> <li>eine Komponente zur Anzeige aller Datenbankeintr\u00e4ge (Read),</li> <li>eine Komponente zum L\u00f6schen eines Datenbankeintrages (Delete).</li> </ul> </li> <li>wenn Sie die Anwendung alleine umsetzen, dann gen\u00fcgen 3 der 4 CRUD-Funktionalit\u00e4ten</li> <li>wenn Sie die Anwendung zu zweit entwickeln, dann<ul> <li>sollen alle 4 CRUD-Funktionalit\u00e4ten umgesetzt werden und</li> <li>Login (Username + Passwort) und</li> <li>ich schaue mir die Commit-Hiostorie im Git genauer an, um sicherzugehen, dass beide Studentinnen gleich viel an der Anwendung mitentwickelt haben</li> </ul> </li> </ul> <p>Datenbankeintr\u00e4ge k\u00f6nnen B\u00fccher, CDs, ToDos, Einkaufslisten, Vorlesungen, K\u00fchlschrankinhalte usw. sein - wie gesagt, Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. </p> <p>Die Anwendung soll in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. </p> <p>Verwenden Sie ein CSS-Framework, wie z.B. Materialize, Bootstrap o.\u00e4.! Ihre Anwendung soll \"modern\" aussehen und responsive sein. </p> <p>Erstellen Sie eine informative (ausf\u00fchrliche) README-Datei (<code>README.md</code>). Diese Datei sollte beinhalten:</p> <ul> <li>Eine Beschreibung Ihrer Anwendung. Am besten mit Screenshots, so dass sie Ihren Kommilitoninnen aus den n\u00e4chsten Jahren hilft, ein Verst\u00e4ndnis daf\u00fcr zu entwickeln, was m\u00f6gliche Semesteraufgaben sein k\u00f6nnen.</li> <li>Eine Anleitung zur Installation Ihrer Anwendung. </li> </ul> <p>Super w\u00e4re es, wenn Sie die Datenbank, die Sie verwenden, per Skript vorausf\u00fcllen, d.h. es w\u00e4re sch\u00f6n, wenn zum Testen der Anwendung nur das Frontend und das Backend gestartet werden m\u00fcssten und alles andere automatisch passieren w\u00fcrde. Super w\u00e4re es auch, wenn Sie Ihre Anwendung deployen w\u00fcrden. </p> <p>Nach Abgabe vereinbaren wir ein Online-Meeting, in dem Sie mir Ihre Anwendung nochmal zeigen k\u00f6nnen und ich Ihnen Fragen zu Ihrem Code stellen werde. Ist keine Pr\u00fcfung, sondern eher ein fachliches Gespr\u00e4ch. </p>"},{"location":"#abgabe-und-gesprachstermine","title":"Abgabe- und Gespr\u00e4chstermine","text":"<p>Die L\u00f6sung f\u00fcr die Semesteraufgabe pushen Sie in Ihr Respository. In einem Gespr\u00e4ch f\u00fchren Sie die L\u00f6sung vor und wir unterhalten uns \u00fcber Ihre L\u00f6sung. Daf\u00fcr stehen verschiedene Termine zur Verf\u00fcgung. </p> <ul> <li> <ol> <li>Pr\u00fcfungszeitraum: 13.2. Abgabe und 14.2. Gespr\u00e4ch</li> </ol> </li> <li> <ol> <li>P\u00fcfungszeitraum: 26.3. Abgabe und 27.3. Gespr\u00e4ch</li> </ol> </li> </ul> <p>Bitte tragen Sie sich in Moodle in den von Ihnen gew\u00fcnschten Gespr\u00e4chstermin ein! Wenn Sie im 1.PZ abgeben, tragen Sie sich im LSF zum ersten PZ zur Pr\u00fcfung ein, ansonsten im 2.PZ. </p>"},{"location":"#einige-beispiele","title":"Einige Beispiele","text":""},{"location":"#mieter-und-zahlungsinformationen-verwalten","title":"Mieter- und Zahlungsinformationen verwalten","text":""},{"location":"#todo-liste","title":"ToDo-Liste","text":""},{"location":"#dog-o-mat","title":"Dog-O-Mat","text":""},{"location":"#reiseplaner","title":"Reiseplaner","text":""},{"location":"angular/","title":"Angular","text":"<p>Angular geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen. In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. </p> <p>Das erste Release von Angular erschien 2010 (damals noch unter dem Namen AngularJS, ab Version 2 nur noch Angular). React und Vue kamen 2013 bzw. 2014 erstmalig heraus. Angular wird haupts\u00e4chlich von Google, React haupts\u00e4chlich von Facebook und Vue als Community-Version entwickelt. Alle drei Frameworks stehen unter MIT-Lizent.</p> <p>Neben HTML und CSS verwendet Angular TypeScript. TypeScript ist eine Obermenge von JavaScript. Das bedeutet, dass jeder JavaScript-Code auch TypeScript ist, aber nicht umgekehrt. TypeScript-Code wird compiliert und erzeugt JavaScript-Code, der vom Browser ausgef\u00fchrt werden kann. Im Gegensatz zu JavaScript ist TypeScript typsicher und klar objektorientiert.  </p>"},{"location":"angular/#erstes-projekt-erstellen","title":"Erstes Projekt erstellen","text":"<p>Eine Angularanwendung besteht haupts\u00e4chlich aus Komponenten und Services. Um die Anwendung selbst sowie Komponenten und Services zu erstellen, wird am besten das Command Line Interface for Angular (Angular CLI) verwendet. \u00d6ffnen Sie ein Terminal (Windows-Nutzerinnen sollten die Git-Bash verwenden, die Sie bereits mit Git installiert haben). Wechseln Sie im Terminal in das Verzeichnis, das Ihre Projekte enthalten soll. F\u00fcr das Wechseln in andere Verzeichnisse nutzen Sie den <code>cd</code> Befehl (change directory). Um die Anwendung \"first\" zu erzeugen, geben Sie folgenden Befehl in das Terminal ein:</p> <pre><code>ng new first\n</code></pre> <p><code>ng</code> steht f\u00fcr Angular. Mit dem Attribut <code>new</code> geben Sie an, dass Sie ein neues Projekt erzeugen wollen. <code>first</code> ist der Name des Projektes. Wenn Sie gefragt werden, ob Sie Angular routing verwenden m\u00f6chten, geben Sie ein <code>y</code> ein. Wenn Sie nach dem stylesheet format gefragt werden, k\u00f6nnen Sie <code>CSS</code> einfach mit <code>Enter</code> best\u00e4tigen.</p> <pre><code>? Would you like to add Angular routing? Yes\n? Which stylesheet format would you like to use? CSS\n</code></pre> <p>Wenn alles geklappt hat, erhalten Sie im Terminal eine Ausgabe in der Form:</p> <p></p> <p>Es entsteht ein Ordner <code>first</code> in Ihrem Projekte-Verzeichnis. Wechseln Sie in dieses Verzeichnis:</p> <pre><code>cd first\n</code></pre> <p>F\u00fchren Sie darin den Befehl:</p> <pre><code>npm install\n</code></pre> <p>aus. Damit werden alle Abh\u00e4ngigkeiten, die in der Datei package.json definiert sind, geladen und das node_modules-Verzeichnis erstellt. Siehe z.B. hier.</p> <p>Wenn Sie Ihr Projekt mit <code>git</code> verwalten, dann ist es ratsam, das <code>node_modules</code>-Verzeichnis von der <code>git</code>-Verwaltung auszuschlie\u00dfen. Es wird ja immer durch <code>npm install</code> erstellt. F\u00fcgen Sie dazu in Ihre <code>.gitignore</code> die Zeile <code>node_modules/**</code> ein. Dann werden alle Inhalte aller <code>node_modules</code>-Verzeichnisse in Ihrem Repository ignoriert. </p> <p>Danach geben Sie</p> <pre><code>ng serve\n</code></pre> <p>ein. Es werden die entsprechenden TypeScript-Dateien compiliert und es erscheint am Ende eine Ausgabe, wie z.B.</p> <pre><code>\u2714 Browser application bundle generation complete.\n\nInitial Chunk Files   | Names         |  Raw Size\nvendor.js             | vendor        |   2.12 MB | \npolyfills.js          | polyfills     | 314.26 kB | \nstyles.css, styles.js | styles        | 209.39 kB | \nmain.js               | main          |  48.72 kB | \nruntime.js            | runtime       |   6.51 kB | | Initial Total |   2.69 MB\n\nBuild at: 2022-11-30T09:43:56.236Z - Hash: 15a297db746e6251 - Time: 13321ms\n\n** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **\n\n\n\u2714 Compiled successfully.\n</code></pre> <p>Sie m\u00fcssen jetzt immer compileren! Wenn Sie aber einmal <code>ng serve</code> ausgef\u00fchrt haben, wird im Browser automatisch auf die \u00c4nderungen reagiert. Sie m\u00fcssen also nicht jedes Mal neu <code>ng serve</code> eingeben, bzw. nicht jedes Mal neu auf das gr\u00fcne Dreieck in Ihrer IDE klicken: </p> <p>\u00d6ffnen Sie Ihren Browser und geben Sie als URL</p> <pre><code>http://localhost:4200\n</code></pre> <p>ein. Folgende Seite sollte erscheinen:</p> <p></p> <p>Success</p> <p>Fertig! Sie haben Ihr erstes Angular-Projekt erstellt.</p>"},{"location":"angular/#angular-projektstruktur","title":"Angular-Projektstruktur","text":"<p>\u00d6ffnen Sie die IDE Ihrer Wahl. W\u00e4hlen Sie unter <code>Open Project</code> den Projektordner <code>first</code>. Klappen Sie das Projekt <code>first</code> auf, klappen Sie den Ordner <code>src</code> und dann den Ordner <code>app</code> auf. Der Projektexplorer zeigt folgendes Bild:</p> <p></p> <ul> <li>Die meiste Arbeit wird im <code>src</code>-Ordner erledigt. Darin befindet sich (wird sich befinden) der Code unserer Anwendung.</li> <li>Darin der wichtigste Ordner ist der <code>app</code>-Ordner. Hier werden wir unsere Module, Komponenten und Services hinzuf\u00fcgen.  </li> <li>In dem <code>assets</code>-Ordner werden Bilder, Icons und Daten abgelegt.</li> <li>Der <code>node_modules</code>-Ordner enth\u00e4lt alle ben\u00f6tigten 3rd-party-libraries. Welche das sind, wird in der Datei <code>package.json</code> als dependencies definiert. Mithilfe des Befehls <code>npm install</code>werden alle ben\u00f6tigten Module dem Ordner <code>node_modules</code> hinzugef\u00fcgt.</li> <li>Der Ordner <code>environments</code> enth\u00e4lt die notwendigen Konfigurationsinformationen f\u00fcr den development- und den production-Modus. Wir entwickeln zun\u00e4chst im development-Modus.</li> <li><code>favicon.ico</code>ist das Favicon - ein kleines Icon, das im Reiter erscheint. W\u00e4hlen Sie am besten ein eigenes.</li> <li><code>index.html</code> ist die Hauptseite. Mithilfe von Angular entwickeln wir eine Single Page Application, d.h. es wird eine einzige HTML-Seite geladen (<code>index.html</code>) und jeder weitere Inhalt wird asynchron hinzugef\u00fcgt.</li> <li><code>styles.css</code> enth\u00e4lt die globalen Stylesheets, d.h. die CSS-Eigenschaften, die f\u00fcr das gesamte Projekt gelten sollen.</li> <li>Die <code>app.component.*</code>-Dateien beschreiben die app-Komponente. Eine Komponente besteht aus einer HTML-, einer CSS- und einer TypeScript-Datei (auch noch eine <code>*.spec.ts</code>, aber die interessiert zun\u00e4chst nicht).</li> </ul> <p>\u00d6ffnen Sie in Ihrer IDE die Datei <code>app.component.html</code>. L\u00f6schen Sie den kompletten Inhalt und lassen nur noch <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. F\u00fcgen Sie oberhalb von <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> die Zeile <code>&lt;h1&gt;This is app&lt;/h1&gt;</code> ein. Gehen Sie wieder zum Browser und schauen sich den ge\u00f6ffneten Tab mit der URL <code>localhost:4200</code> an. Es erscheint der folgende Inhalt:</p> <p></p> <p>\u00d6ffnen Sie die <code>app.component.css</code>-Datei und geben Sie dort</p> <pre><code>h1 {\ncolor: red;\n}\n</code></pre> <p>Nach den \u00c4nderungen in <code>app.component.css</code> erscheint der Text der \u00dcberschrift in rot:</p> <p></p> <p>Zusammenfassung</p> <p>Wir haben die die <code>app.component.html</code> ge\u00e4ndert, um den Inhalt der dargestellten Seite anzupassen und die <code>app.component.css</code>, um \u00c4nderungen an der Darstellung (dem Stil) des Inhalts durchzuf\u00fchren.</p>"},{"location":"angular/#single-page-application","title":"Single Page Application","text":"<p>Wenn wir eine Anwendung mit Angular erstellen, dann handelt es sich dabei um eine sogenannte Single Page Application (SPA), d.h. es wird genau eine Seite vom Webserver geladen und alle Inhalte werden in diese Seite (nach-)geladen, je nach Nutzerinteraktion. Die hier geladene Seite ist die <code>index.html</code>, die in unserem Projekte-Ordner <code>frontend</code> liegt. Sie sieht so aus:</p> index.html <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Frontend&lt;/title&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Das Element <code>&lt;app-root&gt;</code> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor). </p>"},{"location":"angular/#prefix-andern-optional","title":"Prefix \u00e4ndern - optional","text":"<p><code>app</code>ist dabei ein Prefix, der f\u00fcr die gesamte Anwendung gilt. Diesen Prefix k\u00f6nnen Sie \u00e4ndern. Im folgenden ist beschrieben, wie Sie ihn von <code>app</code> auf <code>htw</code> \u00e4ndern. \u00d6ffnen Sie dazu die Datei <code>angular.json</code>, die sich im Projekt-Ordner <code>frontend</code> befindet. Diese Datei enth\u00e4lt die zentrale Konfiguration Ihres Projektes. Sie sieht wie folgt aus (Ausschnitt):</p> angular.json <pre><code>{\n\"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n\"version\": 1, \"newProjectRoot\": \"projects\",\n\"projects\": {\n\"frontend\": {\n\"projectType\": \"application\",\n\"schematics\": {},\n\"root\": \"\",\n\"sourceRoot\": \"src\",\n\"prefix\": \"app\",\n\"architect\": {\n\"build\": {\n\"builder\": \"@angular-devkit/build-angular:browser\",\n\"options\": {\n\"outputPath\": \"dist/frontend\",\n\"index\": \"src/index.html\",\n</code></pre> <p>\u00c4ndern Sie den Prefix in der hell markierten Zeile auf z.B. \"htw\" (oder Ihre Initialen vielleicht). In der <code>index.html</code> und in der <code>app.component.ts</code> auch noch \u00e4ndern. Ab dann ist die Verwendung von \"htw\" als Prefix einegrichtet. Sie k\u00f6nnen es aber auch bei \"app\" belassen. Es soll an dieser Stelle einem besseren Verst\u00e4ndnis des Prinzips dienen.</p> index.html <pre><code>  &lt;!doctype html&gt;\n  &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"utf-8\"&gt;\n      &lt;title&gt;Frontend&lt;/title&gt;\n      &lt;base href=\"/\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n      &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n&lt;htw-root&gt;&lt;/htw-root&gt;\n&lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> app/app.component.ts <pre><code>import { Component } from '@angular/core';\n@Component({\nselector: 'htw-root',\ntemplateUrl: './app.component.html',\nstyleUrls: ['./app.component.css']\n})\nexport class AppComponent {\ntitle = 'frontend';\n}\n</code></pre>"},{"location":"angular/#komponenten-selektoren","title":"Komponenten-Selektoren","text":"<p>Nochmal zur\u00fcck zu unserer <code>index.html</code> - der single page, die vom Webserver geladen wird und in die alle weiteren Komponenten eingebunden werden. Wir haben dort nun also den Komponenten-Selektor <code>&lt;htw-root&gt;&lt;/htw-root&gt;</code>. In diesen Selektor wird nun dir <code>root</code>-Komponente (<code>app.component</code>) geladen. Dieser Selektor wird durch die <code>root</code>-Komponente ersetzt. Das ist unsere <code>app/app.component.*</code>. Eine solche Komponente besteht immer aus einer <code>css</code>-, einer <code>html</code>- und einer <code>ts</code>-Datei. Es wird also in diesen Komponenten-Selektor der HTML-Code der <code>app.component.html</code> eingebunden. Das sehen Sie auch, wenn Sie die Developer-Tools an Ihrem Browser \u00f6ffnen und sich den Quellcode der aktuellen Anwendung anschauen:   </p>"},{"location":"angular/#komponenten","title":"Komponenten","text":"<p>Eine Angular-Anwendung besteht haupts\u00e4chlich aus Komponenten. Jede Anwendung hat eine Hauptkomponente - die sogenannte Root Component. Diese Hauptkomponente ist meistens die AppComponent. Eine Komponente hat eine in sich geschlossene Bedeutung, z.B. ein Formular f\u00fcr Dateneingabe, eine Liste aller Daten oder auch nur ein bestimmtes Element.</p> <p>Eine Komponente besteht aus einer View (Template) und einer TypeScript-Klasse. Die AppComponent besteht z.B. aus der app.component.html (der View) und der app.component.ts (der TypeScript-Klasse). Die TypeScript-Klasse k\u00fcmmert sich um die Verwaltung der Daten, die in der View dargestellt und/oder durch Eingaben erzeugt werden. Die TypeScript-Klasse beschreibt die Logik der Komponente. Die View ist der dargestellte Bereich der Komponente, also das, was man im Browser von der Komponente sieht.</p> <p>Neben der *.html- und der *.ts-Datei einer Komponente gibt es auch noch die *.css-Datei (also z.B. app.component.css). Diese enth\u00e4lt CSS-Eigenschaften, die speziell f\u00fcr die Komponente gelten sollen.</p> <p>Um eine Komponente der gesamten Anwendung als Komponente bekannt zu machen, wird der Decorator <code>@Component</code>verwendet. Decoratoren erkennt man am f\u00fchrenden <code>@</code>-Zeichen. Sie werden verwendet, um Metadaten der Anwendung zu verwalten. Der typische Aufbau einer Komponente (hier <code>AppComponent</code> - <code>app.component.ts</code>):</p> <pre><code>import { Component } from '@angular/core';\n\n@Component({\nselector: 'htw-root',\ntemplateUrl: './app.component.html',\nstyleUrls: ['./app.component.css']\n})\nexport class AppComponent {\ntitle = 'first';\n}\n</code></pre> <p>Der Selektor gibt an, dass \u00fcberall dort, wo <code>htw-root</code> als Elementselektor <code>&lt;htw-root&gt; &lt;/htw-root&gt;</code> verwendet wird, das in <code>app.component.html</code> definerte Template eingesetzt wird. Angenommen, in <code>app.component.html</code> ist der HTML-Code:</p> <pre><code>&lt;h1&gt;This is app&lt;/h1&gt;\n</code></pre> <p>definiert. Dann wird dieser Code als Inhalt in das HTML-Element <code>&lt;htw-root&gt; &lt;/htw-root&gt;</code> eingesetzt:</p> <pre><code>&lt;htw-root&gt;\n  &lt;h1&gt;This is app&lt;/h1&gt;\n&lt;/htw-root&gt;\n</code></pre> <p>Wir schauen uns ein ausf\u00fchrlicheres Beispiel im Folgenden an, in dem wir eine neue Komponente erzeugen.</p>"},{"location":"angular/#eine-neue-komponente-erzeugen","title":"Eine neue Komponente erzeugen","text":"<p>Mithilfe von Angular-CLI erzeugen wir in unserer App <code>first</code> eine neue Komponente <code>header</code>. Wir wechseln dazu im Terminal in den Ordner von <code>first</code> und geben dann</p> <pre><code>ng generate component header\n</code></pre> <p>ein. Sp\u00e4ter k\u00fcrzen wir solche Eingaben ab. Anstelle von <code>generate</code> brauchen wir auch nur <code>g</code> zu schreiben. Und anstelle von <code>component</code> gen\u00fcgt <code>c</code>. Das hei\u00dft, wir h\u00e4tten stattdessen auch </p> <pre><code>ng g c header\n</code></pre> <p>schreiben k\u00f6nnen. In unserer <code>first</code> App gibt es nun die Komponente <code>header</code>:</p> <p> </p> <p>Jede Angular-Komponente besteht aus vier Teilen:</p> <ul> <li>der TypeScript-Klasse (die <code>*.component.ts</code>-Datei)</li> <li>dem Template  (die <code>*.component.html</code>-Datei)</li> <li>den Styles (die <code>*.component.css</code>-Datei)</li> <li>einer Testspezifikation (die <code>*.component.spec.ts</code>-Datei)</li> </ul> <p>Jede Komponente wird in der <code>app.module.ts</code> der gesamten Anwendung bekannt gemacht. Das erfolgt mithilfe der Eigenschaft <code>declarations</code> im Decorator <code>@NgModule()</code>:</p> <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\n\n@NgModule({\ndeclarations: [\nAppComponent,\nHeaderComponent\n],\nimports: [\nBrowserModule,\nAppRoutingModule\n],\nproviders: [],\nbootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>Das obige Listing zeigt, dass die neue Komponente <code>header</code> registriert wurde. Um dieses Eintragen in die <code>app.module.ts</code> m\u00fcssen wir uns aber nicht k\u00fcmmern, das erledigt die <code>Angular-CLI</code> mit der Anweisung zur Erstellung einer neuen Komponente <code>ng generate component newComponent</code>. </p> <p>Doppelklicken Sie im Projektexplorer Ihrer IDE auf die Datei <code>header.component.ts</code>, um sie zu \u00f6ffnen. Sie enth\u00e4lt den folgenden Quelltext:</p> <pre><code>import { Component, OnInit } from '@angular/core';\n\n@Component({\nselector: 'htw-header',\ntemplateUrl: './header.component.html',\nstyleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\nconstructor() { }\n\nngOnInit(): void {\n}\n\n}\n</code></pre> <p>Wir \u00e4ndern diese Datei zun\u00e4chst nicht und \u00f6ffnen auch noch die <code>header.component.html</code>. Diese enth\u00e4lt nur ein HTML-Element, einen Absatz:</p> <pre><code>&lt;p&gt;header works!&lt;/p&gt;\n</code></pre> <p>Wir \u00e4ndern auch diese Datei zun\u00e4chst nicht und \u00f6ffnen die <code>app.component.html</code> - die HTML-Datei unserer Root-Komponente. Diese sieht derzeit so aus:</p> <pre><code>&lt;h1&gt;This is app&lt;/h1&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Wir f\u00fcgen in die Datei den Selektor <code>htw-header</code> unserer neuen <code>header</code>-Komponente als HTML-Element ein:</p> <pre><code>&lt;htw-header&gt;&lt;/htw-header&gt;\n&lt;h1&gt;This is app&lt;/h1&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Dieses Element dient als \"Platzhalter\" f\u00fcr das Template unserer neuen Komponente. Das bedeutet, dass in dieses Element der HTML-Code aus <code>header.component.html</code> eingef\u00fcgt wird. Wechseln Sie in den Browser auf den Tab mit Ihrer Anwendung (http://localhost:4200/). Sie sehen folgendes Bild:</p> <p></p> <p>Oberhalb der \u00dcberschrift (<code>&lt;h1&gt;This is app&lt;/h1&gt;</code>) wurde also der Absatz <code>&lt;p&gt;header works!&lt;/p&gt;</code> eingef\u00fcgt. Wenn Sie sich den Quelltext Ihrer Seite anschauen, z.B. \u00fcber die Entwicklertools Ihres Browsers (z.B. f\u00fcr Chrome), dann wird folgender Code sichtbar:</p> <p></p> <p>Wir k\u00f6nnen hier die Attribute der HTML-Elemente vernachl\u00e4ssigen (also z.B. <code>_nghost-aiq-c17</code> oder <code>ng-version=\"13.0.1\"</code>). Aber es wird folgende HTML-Struktur sichtbar:</p> <pre><code>&lt;htw-root&gt;\n  &lt;htw-header&gt;\n    &lt;p&gt;header works!&lt;/p&gt;\n  &lt;/htw-header&gt;\n  &lt;h1&gt;This is app&lt;/h1&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;/htw-root&gt;\n</code></pre> <p>Das Element <code>&lt;htw-root&gt;</code> fungiert als Platzhalter f\u00fcr die gesamte App. In dieses Element wird der gesamte Inhalt der Anwendung eingebunden (siehe <code>app.component.html</code>). Dies ist hier zun\u00e4chst eine \u00dcberschrift <code>&lt;h1&gt;</code>, die von dem Element f\u00fcr die <code>header</code>-Komponente gefolgt wird. Das bedeutet, dass in das Element <code>&lt;htw-header&gt;</code> der Inhalt der Komponente <code>header</code> eingebunden wird. Das ist hier nur ein Absatz <code>&lt;p&gt;</code> (siehe dazu <code>header.component.html</code>). Das Element <code>&lt;router-outlet&gt;</code> soll uns an dieser Stelle noch nicht interessieren. Das wird erst interessant, wenn wir \u00fcber das Routing in einer Angular-Anwendung sprechen.  </p> <p>Zur weiteren \u00dcbung erzeugen wir uns noch weitere Komponenten. Zun\u00e4chst eine Komponenten zur Navigation <code>nav</code>:</p> <pre><code>ng g c nav\n</code></pre> <p>Um deutlich zu machen, dass sich die CSS-Definitionen f\u00fcr eine Komponente stets nur auf die Komponente beziehen, \u00e4ndern wir die <code>nav.component.css</code> (und - leicht anders- auch die <code>header.component.css</code>):</p> nav.component.cssheader.component.css <pre><code>p {\nbackground-color: grey;\ncolor: white;\npadding: 1%;\npadding-left: 2%;\n}\n</code></pre> <pre><code>p {\nbackground-color: lightgrey;\ncolor: black;\npadding: 2%;\npadding-left: 2%;\n}\n</code></pre> <p>Wir binden die <code>nav</code>-Komponente in die <code>app.component.html</code> ein:</p> app.component.html <pre><code>&lt;htw-header&gt;&lt;/htw-header&gt;\n&lt;htw-nav&gt;&lt;/htw-nav&gt;\n&lt;h1&gt;This is app&lt;/h1&gt;\n&lt;router-outlet&gt;\n&lt;/router-outlet&gt;\n</code></pre> <p>und erhalten folgende Seite: </p> <p></p> <p>Durch das Einbinden von Komponenten in andere Komponenten ensteht eine Hierarchie der Komponenten, z.B. ist die <code>app</code>-Komponent in unserem bisherigen Beispiel die Elternkomponente der <code>header</code>- und <code>nav</code>-Komponenten. Das hei\u00dft, <code>header</code> und <code>nav</code> sind Kindkomponenten von <code>app</code>.  Um dies zu verdeutlichen, erstellen wir noch eine weitere Komponente <code>main</code> und daf\u00fcr explizit zwei Kindkomponenten <code>left</code> und <code>right</code>:</p> <pre><code>ng g c main\nng g c main/left\nng g c main/right\n</code></pre> <p>Beachten Sie, dass die <code>left</code>- und die <code>right</code>-Komponente hier explizit als Kindkomponenten von <code>main</code> erstellt werden. </p> <p></p> <p>Wir binden die <code>main</code>-Komponente in die <code>app</code>-Komponente ein und die Komponenten <code>left</code> und <code>right</code> in die <code>main</code>-Komponente:</p> app.component.htmlmain.component.htmlmain.component.css <pre><code>&lt;htw-header&gt;&lt;/htw-header&gt;\n&lt;htw-nav&gt;&lt;/htw-nav&gt;\n&lt;h1&gt;This is app&lt;/h1&gt;\n&lt;htw-main&gt;&lt;/htw-main&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <pre><code>&lt;div id=\"main\"&gt;\n    &lt;h3&gt;\n        main works!\n    &lt;/h3&gt;\n    &lt;div id=\"row\"&gt;\n        &lt;div id=\"left\"&gt;\n            &lt;htw-left&gt;\n            &lt;/htw-left&gt;\n        &lt;/div&gt;\n        &lt;div id=\"right\"&gt;\n            &lt;htw-right&gt;\n            &lt;/htw-right&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>#main {\nbackground-color: rgb(226, 243, 188);\nheight: 200px;\npadding: 1%;\n}\n\n#row {\ndisplay: grid;\ngrid-gap: 1%;\ngrid-template-columns: 1fr 1fr;\n}\n\n#left {\nbackground-color: rgb(235, 235, 240);\n}\n\n#right {\nbackground-color: rgb(191, 191, 243);\n}\n</code></pre> <p></p>"},{"location":"angular/#deployment-des-projektes","title":"Deployment des Projektes","text":"<p>Wir werden uns im weiteren Verlauf immer wieder anschauen, was zu beachten ist, damit ein Angular-Projekt deployed, d.h. ausgeliefert werden kann. Derzeit m\u00fcssen wir ein Projekt stets mit <code>ng serve</code> starten und schauen uns dabei jeweils den gegenw\u00e4rtigen Entwicklungsstatus des Projektes an. Irgendwann ist das Projekt aber \"fertig\" und soll ausgeliefert werden. Das prinzipielle Vorgehen daf\u00fcr besteht aus zwei Schritten. Der erste Schritt wird als Vorbereitung des Deployments ausgef\u00fchrt. Er besteht darin, das Projekt zu deployen, dabei auf eventuelle Fehler zu achten und gleichzeitig das deployed Projekt auszuf\u00fchren und zu \"beobachten\". Dazu werden zwei Terminals verwendet. Im ersten Terminal geben Sie im Projektordner (hier <code>first</code>)</p> <pre><code>ng build --watch\n</code></pre> <p>ein. Damit wird das Projekt deployed, wird aber gleichzeitig \u00fcberwacht, d.h. alle Aktionen auf der Webanwendung werden angezeigt und auch eventuell auftretende Fehler. Dieses Terminal muss w\u00e4hrend der Anwendung der Webanwendung also gut \u00fcberwacht werden. Im zeiten Terminal starten Sie die Anwendung, indem Sie einen Webserver aufrufen, z.B. <code>lite-server</code>:</p> <pre><code>lite-server --baseDir=\"dist/first\"\n</code></pre> <p>Es \u00f6ffnet sich die Webenawendung (oder Sie m\u00fcssen Sie auf <code>localhost:3000</code> \u00f6ffnen) und Sie k\u00f6nnen die Webanwendung ausprobieren. Eventuelle Fehler werden im ersten Terminal angezeigt. </p> <p>Grunds\u00e4tzlich ist es so, dass die Webanwendung durch das Deployment in einen <code>dist</code>-Ordner ausgeliefert wird. Der <code>dist</code>-Ordner des <code>first</code>-Projektes sieht nach dem Deployment ungef\u00e4hr so aus:</p> <p></p> <p>Die Nummern in den Dateinamen werden bei Ihnen anders sein. Dieser Ordner kann auf Ihren Webserver kopiert werden und dann ist die Webanwendung dort ausf\u00fchrbar. Wenn Sie alle Fehler behoben haben und sich die Webanwendung korrekt verh\u00e4lt, dann k\u00f6nnen Sie den zweiten Schritt ausf\u00fchren:</p> <pre><code>ng build\n</code></pre> <p>Diese Anwendung erzeugt (genau wie <code>ng build --watch</code>) den <code>dist</code>-Ordner. Den darin befindlichen Ordner (hier: <code>first</code>) k\u00f6nnen Sie z.B. auf den Webserver kopieren und von dort die <code>first/index.html</code> aufrufen (bzw. Sie benennen den <code>first</code>-Ordner dort um). Beachten Sie, dass Sie in der <code>index.html</code> die Basis-Refereferenz-URL anpassen m\u00fcssen, also den Eintrag <code>&lt;base href=\"/\"&gt;</code> anpassen. </p> <p>In meinem Fall ist es z.B. so, dass in meinem DocumentRoot folgende Ordnerstruktur existiert: <code>/WT22/Angular/first/dist/first/</code>. Das hei\u00dft, mein Eintrag in der <code>index.html</code> muss dann lauten:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;First&lt;/title&gt;\n&lt;base href=\"/WT22/Angular/first/dist/first/\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.ef46db3751d8e999.css\"&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;htw-root&gt;&lt;/htw-root&gt;\n    &lt;script src=\"runtime.efa9df03510e8bc1.js\" type=\"module\"&gt;&lt;/script&gt;\n    &lt;script src=\"polyfills.e477a8328a76bdd4.js\" type=\"module\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.22d2c12b99bb6467.js\" type=\"module\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Um die Basis-Refereferenz-URL nicht nachtr\u00e4glich anpassen zu m\u00fcssen, k\u00f6nnen Sie auch gleich</p> <pre><code>ng build --base-href=/WT22/Angular/first/dist/first/\n</code></pre> <p>angeben. </p>"},{"location":"angular/#lifecycle-hooks","title":"Lifecycle-Hooks","text":"<p>Komponenten durchlaufen einen festen Lebenszyklus (lifecycle). Die verschiedenen Status rufen dabei jeweils eine Methode auf, die wir jeweils implementieren k\u00f6nnen, um in den jeweiligen Status des Lebenszyklus eingreifen zu k\u00f6nnen. Man spricht dabei von sogenannten Lifecycle-Hooks. </p> <p>Der wohl bekannteste Lifecycle-Hook ist <code>ngOnInit()</code>. Damit greift man in die Initialisierung der Komponente ein. Typischerweise werden z.B. Eingabewerte initialisiert, die im Template dargestellt werden.</p> <p>Noch vor <code>ngOnInit</code> wird jedoch <code>ngOnChange()</code> aufgerufen. N\u00e4mlich genau dann, wenn die Eingabewerte gesetzt bzw. ge\u00e4ndert werden. </p> <p></p> <p>F\u00fcr weiterf\u00fchrende Informationen sei https://angular.io/guide/lifecycle-hooks empfohlen.</p>"},{"location":"angular/#services","title":"Services","text":"<p>Ein Service ist eine Klasse f\u00fcr einen konkreten Zweck. Services unterscheiden sich von Komponenten dahingehend, dass</p> <ul> <li>eine Komponente f\u00fcr die Nutzerinteraktion zust\u00e4ndig ist, </li> <li>eine Komponente Eigenschaften (Daten) pr\u00e4sentiert, </li> <li>eine Komponente Methoden zur Datenbindung (data binding) zur Verf\u00fcgung stellt, um</li> <li>zwischen View und Anwendungslogik zu vermitteln.</li> </ul> <p>Ein Service</p> <ul> <li>erf\u00fcllt eine konkrete Aufgabe, typischerweise mit Daten, </li> <li>ohne sich um die Darstellung der Daten zu k\u00fcmmern.</li> <li>Typische Aufgaben eines Services sind: Daten vom Server holen oder auf den Server laden, Nutzereingaben zu validieren. </li> <li>Ein Service steht typischerweise allen Komponenten zur Verf\u00fcgung (aber nicht jede Komponente muss einen Service nutzen).</li> </ul> <p>Ein Service ist eine Klasse mit dem Decorator <code>@Injectable()</code>. Services enthalten Anwendungslogik, die aus Komponenten ausgelagert werden kann. Ein Service <code>my</code> kann mittels CLI so erzeugt werden:</p> <pre><code>ng generate service shared/my\n</code></pre> <p>Es entsteht im <code>src/app/shared</code>-Ordner eine Datei <code>my.service.ts</code>. Services sollten am besten in dem <code>shared</code>-Ordner erstellt werden, da ein Service von allen Komponenten genutzt werden kann (eine andere M\u00f6glichkeit w\u00e4re, einen eigenen Ordner <code>services</code> zu erstellen).</p> <p>In dem Decorator <code>@Injectable()</code> wird mittels <code>providedIn: root</code> angegeben, dass der Service von allen Komponenten innerhalb des Root-Moduls genutzt werden kann. Ist der Service von anderen Services oder Komponenten abh\u00e4ngig, k\u00f6nnen diese Services oder Komponenten mittels dependency injection als Parameter des Service-Konstruktor eingebunden werden. Hier ein allgemeines Beispiel eines Services <code>MyService</code>:</p> my.service.ts <pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class MyService {\n\nconstructor(private myDependency: MyDependency) {\n}\n}\n</code></pre> <p>Der Service kann dann mittels dependency injection von einer Komponente verwendet werden. Beispiel:</p> example.component.ts <pre><code>import {Component, OnInit} from '@angular/core';\n\nimport {MyService} from './shared/my.service';\n\n@Component({\nselector: 'app-example',\ntemplateUrl: './example.component.html',\nstyleUrls: ['./example.component.css']\n})\nexport class ExampleComponent implements OnInit {\n\nconstructor(private myService: MyService) { }\n\nngOnInit(): void {\nthis.myService.methodOfMyService();\n}\n\n}\n</code></pre> <p>F\u00fcr weiterf\u00fchrende Informationen zu Services siehe https://angular.io/guide/architecture-services. Wir werden Services ausgiebig nutzen. F\u00fcr ein erstes kleines einf\u00fchrendes Beispiel nehmen wir an, dass folgende Datei members.json im Ordner <code>src/assets</code> unseres Projektes liegt. Diese Datei laden wir mithilfe von <code>fetch()</code> innerhalb unserer <code>shared/my.service.ts</code>:</p> shared/my.service.ts <pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class MyService {\nmembers: any;\n\nconstructor() {}\n\ngetMembers() {\nfetch('./assets/members.json')\n.then( res =&gt; res.json() )\n.then( jsonData =&gt; {\nthis.members = jsonData;\nconsole.log('getQuestions', this.members);\n\n})\nreturn this.members;\n\n}\n}\n</code></pre> <p>Der Service stellt somit eine Funktion <code>getMembers()</code> f\u00fcr alle Komponenten zur Verf\u00fcgung und stellt \u00fcber diese Funktion das <code>members</code>-Array bereit. Wir k\u00f6nnten dieses Array z.B. in der <code>main.component.ts</code> einlesen:</p> main.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { MyService } from '../shared/my.service';\n\n\n@Component({\nselector: 'htw-main',\ntemplateUrl: './main.component.html',\nstyleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\nmembers: any ;\n\nconstructor(private myService: MyService) { }\n\nngOnInit(): void {\nthis.members = this.myService.getMembers();\nconsole.log(this.members)\n}\n}\n</code></pre> <p>Wir geben dieses Array zun\u00e4chst einfach nur auf der Konsole aus. Wir sehen aber bereits die Einbundung des Services und die Verwendung der <code>getMembers()</code>-Funktion des Services.</p>"},{"location":"angular/#routing","title":"Routing","text":"<p>Routing ist ein wesentliches Konzept f\u00fcr die Entwicklung von Single-Page-Applikationen (SPA). Bei Single-Page-Applikationen wird genau eine Seite vom Webserver geladen (typischerweise die <code>index.html</code> und alle weiteren, sich \u00e4ndernden, Inhalte und Sichten werden in diese Seite nachgeladen). Das f\u00fchrt zun\u00e4chst auch dazu, dass es f\u00fcr die Seite genau eine URL gibt, um auf sie zuzugreifen (z.B. <code>http://www.mydomain.de</code> bzw. <code>http://www.mydomain.de/index.html</code>). M\u00f6chte man aber Komponenten direkt in der URL ansprechen, z.B. <code>http://www.mydomain.de/login</code> f\u00fcr die Login-Komponente, so ben\u00f6tigen wir das Routing von Angular.</p> <p>Wir betrachten hier ein Beispiel, das https://angular.io/guide/router entnommen ist und nur leicht abgewandelt wurde. Wir erstellen dazu zun\u00e4chst ein neues Projekt <code>routing-lesson</code>. </p> <pre><code>ng new routing-lesson\n</code></pre> <p>In der obigen Anweisung h\u00e4tte man auch bereits den Parameter <code>--routing</code> verwenden k\u00f6nnen, also: </p> <pre><code>ng new routing-lesson --routing\n</code></pre> <p>Macht man das nicht, werden Sie gefragt, ob Sie Routing verwenden wollen:</p> <pre><code>? Would you like to add Angular routing? [y|N]\n</code></pre> <p>Antworten Sie mit <code>y</code>.</p> <p>Zur Demonstration des Routings werden wir zun\u00e4chst 2 weitere Komponenten erstellen: <code>first</code> und <code>second</code>. </p> <pre><code>cd routing-lesson\nng g c first\nng g c second\n</code></pre> <p>Wird ein Angular-Projekt mit Routing erstellt, so existiert die Datei <code>app-routing.module.ts</code> im <code>src/app/</code>-Ordner. Diese Datei sieht urspr\u00fcnglich so aus:</p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Bei dieser Klasse handelt es sich um ein eigenes Angular-Modul (als <code>@NgModule</code> dekoriert). Es wird deshalb auch in die <code>app.module.ts</code> integriert (dies geschieht automatisch, wenn wir Routing ausgew\u00e4hlt haben) - siehe Zeilen 4 und 17 im folgenden Listing:</p> app.module.ts <pre><code>import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FirstComponent } from './first/first.component';\nimport { SecondComponent } from './second/second.component';\n\n@NgModule({\ndeclarations: [\nAppComponent,\nFirstComponent,\nSecondComponent\n],\nimports: [\nBrowserModule,\nAppRoutingModule\n],\nproviders: [],\nbootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>Das Array <code>routes</code> aus der Datei <code>app-routing.module.ts</code> enth\u00e4lt sp\u00e4ter die Pfadangaben zu den Komponenten - sogenannte Routen. Routen sind Objekte und wie folgt notiert:</p> <pre><code>{ path: 'mypath', component: MyComponent }\n</code></pre> <p>Diese Angabe bewirkt, dass unter der URL <code>http://www.mydomain.de/mypath</code> die Komponente <code>MyComponent</code> aufgerufen wird. Angenommen, wir wollen, dass unsere Komponente <code>FirstComponent</code> unter dem Pfad <code>/first</code> aufgerufen wird und <code>SecondComponent</code> unter dem Pfad <code>/second</code>, dann sieht unsere Datei <code>app-routing.module.ts</code> wie folgt aus:</p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport {FirstComponent} from './first/first.component';\nimport {SecondComponent} from './second/second.component';\n\nconst routes: Routes = [\n{ path: 'first', component: FirstComponent},\n{ path: 'second', component: SecondComponent }\n];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>In den Zeilen 8 und 9 sind die beiden Routen definiert. Beachten Sie, dass die Pfadangaben ohne vorangestelltes Slash <code>/</code> erfolgen! Unter Verwendung der Selektoren <code>&lt;app-first&gt;</code> bzw. <code>&lt;app-second&gt;</code> k\u00f6nnten wir unsere Komponenten nun (statisch) in unsere Anwendung einbinden. Wollen wir das jedoch dem Routing \u00fcberlassen, die Komponenten also dynamisch - abh\u00e4ngig von dem jeweils gew\u00e4hlten Pfad - einbinden lassen, verwenden wir stattdessen den Selektor <code>&lt;router-outlet&gt;</code>. Auch dieser ist bei gew\u00e4hltem Routing bereits Teil des <code>AppComponent</code>-Templates:</p> app.component.html <pre><code>&lt;!-- hier wurde viel vom urspr\u00fcnglichen --&gt;\n&lt;!-- Template gel\u00f6scht                  --&gt;\n\n&lt;h1&gt;Hier ist AppComponent&lt;/h1&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Obiges Listing zeigt, dass das Template von <code>AppComponent</code> zun\u00e4chst eine <code>&lt;h1&gt;</code>-\u00dcberschrift vorsieht und dann folgt das <code>&lt;router-outlet&gt;</code>, welches als Platzhalter f\u00fcr die durch das Routing ausgew\u00e4hlten Komponenten agiert. Angenommen, wir definieren die Templates f+r <code>FirstComponent</code> und <code>SecondComponent</code> wie folgt:</p> first.component.htmlsecond.component.html <pre><code>&lt;h3&gt;Hier ist FirstComponent&lt;/h3&gt;\n</code></pre> <pre><code>&lt;h3&gt;Hier ist SecondComponent&lt;/h3&gt;\n</code></pre> <p>Starten wir nun unsere Anwendung, dann sehen wir zun\u00e4chst (URL: <code>http://localhost:4200/</code>) nur die View der <code>AppComponent</code>, n\u00e4mlich die <code>&lt;h1&gt;</code>-\u00dcberschrift. Der Platzhalter <code>&lt;router-outlet&gt;</code> bleibt leer, da keine der angegebenen Pfade aus der <code>app-routing.module.ts</code> angegeben wurde. Geben wir jedoch als URL <code>http://localhost:4200/first</code> ein, so wird das Template der <code>FirstComponent</code> in diesen Platzhalter geladen, n\u00e4mlich die <code>&lt;h3</code>-\u00dcberschrift <code>Hier ist FirstComponent</code>. Geben wir als URL stattdessen <code>http://localhost:4200/second</code> ein, so wird das Template der <code>SecondComponent</code> in den Platzhalter <code>&lt;router-outlet&gt;</code> geladen, n\u00e4mlich die <code>&lt;h3</code>-\u00dcberschrift <code>Hier ist SecondComponent</code>. Die folgende Abbildung zeigt die Views der drei F\u00e4lle:</p> <p></p> <p>Wir haben nun Pfade erzeugt, mit denen man Komponenten direkt ansprechen kann. Im folgenden Abschnitt wird gezeigt, wie man diese Pfade in Hyperlinks nutzt.</p>"},{"location":"angular/#routen-verlinken","title":"Routen verlinken","text":"<p>Wir kennen nun die m\u00f6glichen Pfade unserer Anwendung <code>http://localhost:4200/</code>, <code>http://localhost:4200/first</code> und <code>http://localhost:4200/second</code> und w\u00fcrden diese Adressen z.B. gerne in Hyperlinks verwenden, um direkt zu den Views der jeweiligen Komponente zu springen, z.B. so:</p> app.component.html <pre><code>&lt;h1&gt;Hier ist AppComponent&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;a href=\"/\"&gt;home&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a href=\"/first\"&gt;first&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a href=\"/second\"&gt;second&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Das funktioniert auch, hat aber einen von uns nicht gewollten Effekt: Die Seite wird durch jeden Klick auf einen Hyperlink neu geladen. Das ist ja auch das gew\u00fcnschte Verhalten eines Hyperlinks. Die Idee einer Single-Page-Applikation ist aber jedoch die, dass die Seite nur genau einmal geladen wird und dann dynamisch alle weiteren Inhalte. </p> <p>Das Nachladen wird vermieden, wenn wir als Attribut f\u00fcr unsere Pfade nicht <code>href</code> verwenden, sondern die Angular-Direktive <code>routerLink</code>. Dies gilt nur f\u00fcr interne Links! Aber es verhindert bei internen Links ein Neuladen der Seite.</p> app.component.html <pre><code>&lt;h1&gt;Hier ist AppComponent&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;a routerLink=\"/\"&gt;home&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a routerLink=\"/first\"&gt;first&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a routerLink=\"/second\"&gt;second&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Die obige Attributschreibweise kann auch durch property binding ersetzt werden. Dann \u00fcbergeben Sie als Wert aber keinen String sondern ein 1-elementiges Array:</p> app.component.html <pre><code>&lt;h1&gt;Hier ist AppComponent&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;a [routerLink]=\"['/']\"&gt;home&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a [routerLink]=\"['/first']\"&gt;first&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a [routerLink]=\"['/second']\"&gt;second&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Die zweite Variante wird meistens dann verwendet, wenn an den Pfad noch dynamisch Werte \u00fcbergeben werden, sogenannte Parameter an den Routen.</p>"},{"location":"angular/#parameter-an-routen","title":"Parameter an Routen","text":"<p>H\u00e4ufig sind die Pfadangaben nicht nur so statisch wie bisher, also <code>/first</code> bzw. <code>/second</code>, sondern es werden auch noch Werte, z.B. Session-IDs, Nutzer-IDs, B\u00fccher-ISBN usw. \u00fcbergeben. Dazu werden die Routen durch Parameter erweitert. Diese Parameter werden dann mit einem konkreten Wert bei Aufruf ersetzt. </p> <p>Die allgemeine Syntax f\u00fcr einen parametrisierten Pfad ist:</p> <pre><code>{ path: 'mypath/:id', component: MyComponent }\n</code></pre> <p>Der Doppelpunkt <code>:</code> ist zwingend, der Name des Parameters <code>id</code> ist frei w\u00e4hlbar. </p> <p>Die Werte f\u00fcr den Routenparameter k\u00f6nnen als <code>routerLink</code> wieder entweder als String \u00fcbergeben werden (Zeile 1 im folgenden Listing) oder per property binding als weiteres Array-Element (Zeile 2 im folgenden Listing).</p> <pre><code>&lt;a routerLink=\"/mypath/4711\"&gt;statischer Wert f\u00fcr id&lt;/a&gt;\n&lt;a [routerLink]=\"['/mypath', myData.id]\"&gt;dynamischer Wert f\u00fcr id (aus JSON myData)&lt;/a&gt;\n</code></pre> <p>Wir haben jetzt eine parametrisierten Pfad konfiguriert und wir haben auch betrachtet, wie der Aufruf einer solch parametrisierten Route erfolgen kann. Nun betrachten wir, wie der Wert eines Parameters in einer Komponentenklasse ausgelesen und verarbeitet werden kann. </p> <p>Wir f\u00fchren dazu zun\u00e4chst kleinere \u00c4nderungen an unserem obigen Beispiel der <code>routing-lesson</code>-App durch: </p> app-routing.module.tsfirst.component.html <pre><code>import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {FirstComponent} from './first/first.component';\nimport {SecondComponent} from './second/second.component';\n\nconst routes: Routes = [\n{ path: 'first', component: FirstComponent},\n{ path: 'first/:id', component: FirstComponent},\n{ path: 'second', component: SecondComponent }\n];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <pre><code>&lt;h3&gt;Hier ist FirstComponent&lt;/h3&gt;\n&lt;p *ngIf=\"id\"&gt;{{ id }}&lt;/p&gt;\n</code></pre> <p>In <code>app-routing.module.ts</code> haben wir einen weiteren Pfad hinzugef\u00fcgt (Zeilennummer 8). Beachten Sie, dass ohne die Pfadkonfiguration in Zeilennummer 7 die Route <code>http://localhost:4200/first</code> (also ohne Parameterwert) nicht mehr existieren w\u00fcrde. Wenn ein Parameter erforderlich ist, dann muss er auch angegeben werden. Nur in Kombination der beiden Pfadkonfigurationen aus Zeilennummern 7 und 8 ist der Pfad sowohl mit als auch ohne Parameterwert m\u00f6glich. </p> <p>Im Template der <code>FirstComponent</code> haben wir einen Absatz eingef\u00fcgt, der als Inhalt den Wert der Eigenschaft <code>id</code> mittels Interpolation anzeigt. Der Absatz erscheint nur, wenn <code>id</code> auch einen Wert hat. Die Eigenschaft <code>id</code> muss allerdings noch in der <code>first.component.ts</code> angelegt werden:</p> first.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\nselector: 'app-first',\ntemplateUrl: './first.component.html',\nstyleUrls: ['./first.component.css']\n})\nexport class FirstComponent implements OnInit {\nid: string;\n\nconstructor(private route: ActivatedRoute) { }\n\nngOnInit(): void {\nthis.id = this.route.snapshot.paramMap.get('id');\n}\n}\n</code></pre> <p>In der <code>first.component.ts</code> kommen verschiedene Sachen hinzu:</p> <ol> <li>es wird die Eigenschaft <code>id</code> deklariert (als <code>string</code>)</li> <li>es wird der Service <code>ActivatedRoute</code> per dependency injection der Klasse <code>FirstComponent</code> injiziert \u2192 die Eigenschaft <code>route</code> ist vom Typ <code>ActivatedRoute</code></li> <li><code>ActivatedRoute</code> stellt uns Informationen \u00fcber den aktuellen Router (die aktuelle URL) zur Verf\u00fcgung \u2192 die Eigenschaft <code>this.route.snapshot.paramMap</code> enth\u00e4lt alle Parameter der aktuellen Route \u2192 mithilfe der Methode <code>get()</code> kann nach einem konkreten Parameter gefragt werden \u2192 wir fragen nach dem Parameter <code>id</code>, da wir so unseren Pfad konfiguriert haben (siehe oben <code>app-routing.module.ts</code>)</li> </ol> <p>Wenn wir nun z.B. die URL <code>http://localhost:4200/first/42</code> eingeben, dann erscheint im Browser der Wert des Parameters (als Inhalt des <code>&lt;p&gt;</code>-Elementes; siehe oben <code>first.component.html</code>).</p> <p>Die aktuelle Implementierung von <code>first.component.ts</code> liest also w\u00e4hrend der Initialisierung der Komponente die Routenparameter aus. Finden jedoch am Parameterwert \u00c4nderungen statt, ohne dass die Komponente neu initialisiert wird, bekommt die Komponente von den \u00c4nderungen nichts mit. Die oben gezeigte Form der Implementierung ist deshalb nicht f\u00fcr alle F\u00e4lle geeignet. Vielmehr ist es besser auszunutzen, dass es sich bei <code>this.route.paramMap</code> (ohne <code>snapshot</code>) um ein Observable handelt.  </p> <p>Ein Observable kann so verstanden werden, dass er permanent eine bestimmte Sache beobachtet (z.B. ist der <code>EventEmitter</code> ein Observable und beobachtet permanent, ob das Ereignis ausgel\u00f6st wird; wenn ja, dann ruft <code>EventEmitter</code> die Funktion <code>emit()</code> auf \u2192 siehe Eigene Ereignisse). Wenn sich etwas an dem beobachteten Objekt ge\u00e4ndert hat, dann reagiert Observable sofort und ruft eine bestimmte Funktion auf. Das Observable <code>paramMap</code> beobachtet permanent die aktuelle Route und sobald sich etwas an dieser Route \u00e4ndert, wird eine Funktion aufgerufen.</p> <p>Damit das Observable aber \u00fcberhaupt den aktuellen Router permanent beobachtet, muss er an den Router angemeldet werden \u2192 das Observable \"abboniert\" den Router. Dies geschieht mithilfe der Funktion <code>subscribe()</code>. Dieser Funktion kann als Parameter eine Funktion \u00fcbergeben werden. Diese Funktion wird aufgerufen, sobald sich am aktuellen Router etwas \u00e4ndert. Wir \u00e4ndern die Implementierung von <code>ngOnInit()</code> in der Klasse <code>first.component.ts</code> deshalb wie folgt:</p> first.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\nselector: 'app-first',\ntemplateUrl: './first.component.html',\nstyleUrls: ['./first.component.css']\n})\nexport class FirstComponent implements OnInit {\nid: string;\n\nconstructor(private route: ActivatedRoute) { }\n\nngOnInit(): void {\nthis.route.paramMap.subscribe(\nparamMap =&gt; this.id = paramMap.get('id')\n);\n}\n}\n</code></pre> <p>Nun erh\u00e4lt die Eigenschaft <code>id</code> immer den aktuellsten Wert (und dieser wird aufgrund der Interpolation auch stets aktuell in der View dargestellt).</p>"},{"location":"angular/#verschachtelte-routen","title":"Verschachtelte Routen","text":"<p>Angenommen, wir haben zwei weitere Komponenten <code>OneComponent</code> und <code>TwoComponent</code> und beide Komponenten sind Kindkomponenten von der Elternkomponente <code>FirstComponent</code>. Das Verh\u00e4ltnis Eltern- Kindkomponente entsteht ja eigentlich dadurch, dass das Template der Elternkomponente den Selektor der Kindkomponente enth\u00e4lt. Das hei\u00dft in <code>first.component.html</code> gibt es sowohl ein <code>&lt;app-one&gt;&lt;/app-one&gt;</code> als auch ein <code>&lt;app-two&gt;&lt;/app-two&gt;</code> \u2192 dann sind <code>One</code> und <code>Two</code> Kindkomponenten von <code>First</code>. </p> <p>Wir wollen nun aber folgendes:</p> <ul> <li>die Route <code>/first</code> verweist auf die <code>FirstComponent</code></li> <li>die Route <code>/first/one</code> verweist auf die <code>FirstComponent</code> und deren Kindkomponente <code>OneComponent</code></li> <li>die Route <code>/first/two</code> verweist auf die <code>FirstComponent</code> und deren Kindkomponente <code>TwoComponent</code></li> </ul> <p>Wir wollen also, dass auch die beiden Kindkomponenten mittels Routing in die Elternkomponente eingef\u00fcgt werden. Das erreichen wir mit 2 Anpassungen:</p> <ul> <li>in <code>app-routing.module.ts</code> kann im <code>routes</code>-Array auch noch die Eigenschaft <code>children</code> hinzugef\u00fcgt werden, welche Pfadkonfigurationen zu den Kindkomponenten enth\u00e4lt</li> <li>in der <code>*.component.html</code> der Elternkomponente wird ein weiteres <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> hinzugef\u00fcgt</li> </ul> app-routing.module.tsfirst.component.htmlapp.component.html <pre><code>import { Routes, RouterModule } from '@angular/router';\nimport {FirstComponent} from './first/first.component';\nimport {SecondComponent} from './second/second.component';\nimport {OneComponent} from './first/one/one.component';\nimport {TwoComponent} from './first/two/two.component';\n\nconst routes: Routes = [\n{ path: 'first', component: FirstComponent, children: [\n{ path: 'one', component: OneComponent },\n{ path: 'two', component: TwoComponent },\n]},\n{ path: 'first/:id', component: FirstComponent},\n{ path: 'second', component: SecondComponent }\n];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <pre><code>&lt;h3&gt;Hier ist FirstComponent&lt;/h3&gt;\n&lt;ul&gt;\n  &lt;li&gt;&lt;a [routerLink]=\"['/first/one']\"&gt;first/one&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a [routerLink]=\"['/first/two']\"&gt;first/two&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p *ngIf=\"id\"&gt;{{ id }}&lt;/p&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <pre><code>&lt;h1&gt;Hier ist AppComponent&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;a [routerLink]=\"['/']\"&gt;home&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a [routerLink]=\"['/first']\"&gt;first&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a [routerLink]=\"['/first/one']\"&gt;first/one&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a [routerLink]=\"['/first/two']\"&gt;first/two&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a [routerLink]=\"['/second']\"&gt;second&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Das bedeutet, dass wir nun zwei <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>-Elemente haben. Eines in der <code>app.component.html</code> f\u00fcr die Routen <code>first</code>, <code>first/:id</code> und <code>second</code> und eines in der <code>first.component.html</code> f\u00fcr die Routen <code>first/one</code> und <code>first/two</code>. </p> <p></p>"},{"location":"angular/#styles-fur-aktive-routen","title":"Styles f\u00fcr aktive Routen","text":"<p>Sie k\u00f6nnen angeben, welche CSS-Klassen wirken sollen, falls eine Route aktiv ist. Eine Route ist aktiv, wenn Sie ausgew\u00e4hlt/angewendet werden kann. Dazu wurde in Angular das Attribut <code>routerLinkActive</code>eingef\u00fchrt. Angenommen, die CSS-Klasse <code>myactiveclass</code>soll Anwendung f\u00fcr eine aktuelle (aktive) Route <code>/first</code> Anwendung finden, dann definieren Sie:</p> <pre><code>&lt;a routerLink=\"/first\" routerLinkActive=\"myactiveclass\"&gt;first&lt;/a&gt;\n</code></pre> <p>Sie k\u00f6nnen auch mehrere CSS-Klassen definieren. Daf\u00fcr gibt es zwei verschiedene M\u00f6glichkeiten:</p> <pre><code>&lt;a routerLink=\"/first\" routerLinkActive=\"myactiveclass1 myactiveclass1\"&gt;first&lt;/a&gt;\n&lt;a routerLink=\"/first\" [routerLinkActive]=\"['myactiveclass1', 'myactiveclass1']\"&gt;first&lt;/a&gt;\n</code></pre> <p>Das Styling aktiver Routen ist insbesondere f\u00fcr Navigationsleisten (Men\u00fcs) hilfreich.</p>"},{"location":"angular/#routen-im-programm-wechseln","title":"Routen im Programm wechseln","text":"<p>Der Service <code>Router</code> stellt zwei Methoden zur Verf\u00fcgung, mit denen eine Route im Programm gewechselt werden kann, z.B. nach einer Nutzereingabe oder einer Nutzerinteraktion:</p> <ul> <li><code>navigate()</code></li> <li><code>navigateByUrl()</code></li> </ul> <p>Angenommen, wir erweitern unsere Komponente <code>SecondComponent</code> um einen Button. Durch den Klick auf den Button soll von der <code>SecondComponent</code> auf die <code>OneComponent</code> \u00fcber die Route <code>/first/one</code> gewechselt werden:</p> second.component.htmlsecond.component.ts <pre><code>&lt;h3&gt;Hier ist SecondComponent&lt;/h3&gt;\n&lt;button (click)=\"changeRoute()\"&gt;/first/one&lt;/button&gt;\n</code></pre> <pre><code>import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\n\n@Component({\nselector: 'app-second',\ntemplateUrl: './second.component.html',\nstyleUrls: ['./second.component.css']\n})\nexport class SecondComponent implements OnInit {\n\nconstructor(private router: Router) { }\n\nngOnInit(): void {\n}\n\nchangeRoute() {\nthis.router.navigate(['/first', 'one']);\n// oder\n// this.router.navigateByUrl('/first/one');\n}\n}\n</code></pre> <p>In der <code>second.component.ts</code> sehen wir in Zeile 11, dass der Service <code>Router</code> per dependency injection eingebunden wird. Der Eigenschaft <code>router</code> stehen die Methoden <code>navigate()</code> bzw. <code>navigateByUrl()</code> zur Verf\u00fcgung. Wir sehen in den Zeilen 16-20 die Behandlung des <code>Click</code>-Ereignisses des Buttons. In Zeile 17 wird darin programmatisch die Route <code>/first/one</code> aufgerufen. </p> <p></p>"},{"location":"angular/#httpclient","title":"<code>HTTPClient</code>","text":"<p>Wir wissen bereits, dass Angular eine TypeScript-Framework ist, mit dem sich Single-Page-Anwendungen implementieren lassen. Es wird einmalig eine Seite (h\u00e4ufig <code>index.html</code>) vom Server geladen und alle weiteren Inhalte werden sukzessive bzw. durch Nutzerinteraktionen gesteuert in diese eine Seite nachgeladen. Die Steuering wird dabei durch den Browser vorgenommen, der das aus TypeScript \u00fcbersetzte JavaScript interpretiert und entsprechend die Templates der Komponenten in die Anwendung einbindet. Das bedeutet, dass im Prinzip die gesamte Logik im Client, d.h. im Browser ausgef\u00fchrt wird. </p> <p>Dem gegen\u00fcber steht jedoch die in der Anwendung verarbeitete Menge von Daten, die typischerweise in einer Datenbank auf einem Server bereitgestellt werden. W\u00e4hrend der Client sich darum k\u00fcmmert, dass Daten angezeigt oder eingegeben werden, muss sich der Server darum k\u00fcmmern, dass Daten in die Datenquelle (die Datenbank) neu eingef\u00fcgt, ausgelesen, aktualisiert und gel\u00f6scht werden k\u00f6nnen. Diese vier Operationen werden mit CRUD abgek\u00fcrzt f\u00fcr:</p> <ul> <li>Create - neue Daten einf\u00fcgen </li> <li>Read - Daten auslesen</li> <li>Update - Daten aktualisieren</li> <li>Delete - Daten l\u00f6schen</li> </ul> <p>Der Client und der Server m\u00fcssen dazu nun irgendwie verbunden werden. Diese Verbindung erfolgt mithilfe des Hypertext Transfer Protocols (HTTP). </p>"},{"location":"angular2/","title":"JSON und Direktiven","text":"<p>In diesem Kapitel geht es darum, wie wir innerhalb einer Komponente mit TypeScript Daten verwalten und diese Daten im HTML verwenden, um sie entweder anzuzeigen oder die Struktur des HTML-Codes mit diesen Daten zu \u00e4ndern. Au\u00dferdem betrachten wir, wie in TypeScript auf Ereignisse reagieren k\u00f6nnen, die die Nutzerinnen beim Verwenden der Anwendung ausl\u00f6sen. Um die Verwaltung von Daten zu diskutieren, betrachten wir zun\u00e4chst, wie Daten in TypeScript/JavaScript notiert werden. </p>"},{"location":"angular2/#javascript-object-notation-json","title":"JavaScript Object Notation (JSON)","text":"<p>Eine kurze Einf\u00fchrung zu Objekten in JavaScript haben wir bereits im JavaScript-Kapitel gegeben. Dort haben wir auch gesagt, dass wir auf die Notation solcher Objekte in JavaScript nochmal genauer eingehen wollen. Dies geschieht hier. JavaScript Object Notation (JSON) ist ein Datenaustauschformat, das einerseits einfach f\u00fcr Menschen zu lesen und zu schreiben ist und andererseits gut von Maschinen geparst (analysiert) und erzeugt werden kann. Ein Objekt in JSON beginnt mit einer geschweiften Klammer <code>{</code> und endet mit <code>}</code>. JSON besteht im wesentlichen aus Schl\u00fcssel-Werte-Paaren, die durch Komma getrennt sind. </p> <pre><code>{\n\"schl\u00fcssel1\": wert1,\n    \"schl\u00fcssel2\": wert2,\n}\n</code></pre> <p>Die Schl\u00fcssel sind Strings in doppelten Hochkamma (<code>\"\"</code>), dann folgt ein Doppelpunkt <code>:</code> und dann folgt der Wert. Werte k\u00f6nnen Strings, Zahlen, Wahrheitswerte, Arrays, Funktionen und Objekte (und <code>null</code>) sein. </p> <p>Hier ein Beispiel (erweitert aus):</p> <pre><code>{\n\"name\": \"Georg\",\n\"alter\": 47,\n\"verheiratet\": false,\n\"beruf\": null,\n\"kinder\": [\n{\n\"name\": \"Lukas\",\n\"alter\": 19,\n\"schulabschluss\": \"Gymnasium\"\n},\n{\n\"name\": \"Lisa\",\n\"alter\": 14,\n\"schulabschluss\": null\n}\n],\n\"biografie\": function() {\nreturn this.name + \" ist \" + this.alter + \" und hat \" + this.kinder.length + \" Kinder.\";\n},\n\n}\n</code></pre> <ul> <li>Der Wert zum Schl\u00fcssel <code>\"name\"</code> in Zeile <code>2</code> ist ein String (<code>string</code>). </li> <li>Der Wert zum Schl\u00fcssel <code>\"alter\"</code> in Zeile <code>3</code> ist eine Zahl (<code>number</code>). </li> <li>Der Wert zum Schl\u00fcssel <code>\"verheiratet\"</code> in Zeile <code>4</code> ist ein Wahrheitswert (<code>boolean</code>). </li> <li>Der Wert zum Schl\u00fcssel <code>\"kinder\"</code> in Zeilen <code>6-17</code> ist Array. </li> <li>Die Elemente in diesem Array sind selbst wieder Objekte in JavaScript Object Notation, bestehend aus jeweils drei Schl\u00fcssel-Werte-Paaren.</li> <li>Das <code>\"kinder\"</code>ist numerisch indiziert, d.h. wir k\u00f6nnen \u00fcber den Index <code>0</code> auf das erste Kind (<code>\"Lukas\"</code>) und \u00fcber den Index <code>1</code> auf das zweite Kind (<code>\"Lisa\"</code>) zugreifen</li> </ul>"},{"location":"angular2/#zugriff-auf-ein-json","title":"Zugriff auf ein JSON","text":"<p>Der Zugriff auf die Werte eines JSON erfolgt mittels Punktnotation \u00fcber den Schl\u00fcssel. Wir nehmen obiges Beispiel und speichern es in einer Variablen <code>georg</code>:</p> <pre><code>let georg = {\n\"name\": \"Georg\",\n\"alter\": 47,\n\"verheiratet\": false,\n\"beruf\": null,\n\"kinder\": [\n{\n\"name\": \"Lukas\",\n\"alter\": 19,\n\"schulabschluss\": \"Gymnasium\"\n},\n{\n\"name\": \"Lisa\",\n\"alter\": 14,\n\"schulabschluss\": null\n}\n],\n\"biografie\": function() {\nreturn this.name + \" ist \" + this.alter + \" und hat \" + this.kinder.length + \" Kinder.\";\n},\n};\n</code></pre> <p>Dann k\u00f6nnen wir auf die einzelnen Werte wie folgt zugreifen:</p> <pre><code>georg.name      // \"Georg\"\ngeorg.alter     // 47\nlet kinder = georg.kinder;  // Array aus 2 Objekten\nkinder[0].name      // \"Lukas\"\nkinder[1].name      // \"Lisa\"\ngeorg.biografie()   // \"Georg ist 47 und hat 2 Kinder.\"\n</code></pre> <p>Man kann \u00fcbrigens auch anstelle der Punktnotation ein JSON wie ein assoziatives Array auffassen und z.B. anstelle von <code>georg.name</code> \u00fcber <code>georg['name']</code> auf den Wert <code>\"Georg\"</code> zugreifen. </p> <p>Es w\u00e4re auch m\u00f6glich, das \"Kinder\"-Array in ein weiteres JSON umzuwandeln:</p> <pre><code>// anstelle von:\n\"kinder\": [\n{\n\"name\": \"Lukas\",\n\"alter\": 19,\n\"schulabschluss\": \"Gymnasium\"\n},\n{\n\"name\": \"Lisa\",\n\"alter\": 14,\n\"schulabschluss\": null\n}\n],\n// ginge z.B. auch:\n\"kinder\": {\n\"erstesKind\" : {\n\"name\": \"Lukas\",\n\"alter\": 19,\n\"schulabschluss\": \"Gymnasium\"\n},\n\"zweitesKind\" : {\n\"name\": \"Lisa\",\n\"alter\": 14,\n\"schulabschluss\": null\n}\n},\n</code></pre> <p>Dann ist der Zugriff \u00fcber den Index (also z.B. <code>georg.kinder[0]</code>) nicht mehr m\u00f6glich. Stattdessen aber:</p> <pre><code>georg.kinder.erstesKind.name\ngeorg.kinder.zweitesKind.alter\n</code></pre>"},{"location":"angular2/#viele-objekte-im-array","title":"Viele Objekte im Array","text":"<p>Wenn Sie viele \"gleiche\" Objekte speichern, dann in einem Array. Die folgende Datei zeigt viele Objekte in JSON, die in einem Array abgelegt sind:</p> data/members.json <pre><code>{\n\"members\": [\n{\n\"forename\": \"Catherine\",\n\"surname\": \"Williams\",\n\"email\": \"cwilliamsl@360.cn\"\n},\n{\n\"forename\": \"Adam\",\n\"surname\": \"Anderson\",\n\"email\": \"aanderson8@google.fr\"\n},\n{\n\"forename\": \"Susan\",\n\"surname\": \"Andrews\",\n\"email\": \"sandrewsn@google.co.jp\"\n},\n{\n\"forename\": \"Catherine\",\n\"surname\": \"Andrews\",\n\"email\": \"candrewsp@noaa.gov\"\n},\n{\n\"forename\": \"Alan\",\n\"surname\": \"Bradley\",\n\"email\": \"abradley1c@globo.com\"\n},\n{\n\"forename\": \"Anne\",\n\"surname\": \"Brooks\",\n\"email\": \"abrooks16@bravesites.com\"\n},\n{\n\"forename\": \"Russell\",\n\"surname\": \"Brown\",\n\"email\": \"rbrownq@nifty.com\"\n},\n{\n\"forename\": \"Ryan\",\n\"surname\": \"Burton\",\n\"email\": \"rburton18@foxnews.com\"\n},\n{\n\"forename\": \"Roy\",\n\"surname\": \"Campbell\",\n\"email\": \"rcampbell1@geocities.com\"\n},\n{\n\"forename\": \"Russell\",\n\"surname\": \"Campbell\",\n\"email\": \"rcampbell17@eventbrite.com\"\n},\n{\n\"forename\": \"Bonnie\",\n\"surname\": \"Coleman\",\n\"email\": \"bcoleman11@fc2.com\"\n},\n{\n\"forename\": \"Ernest\",\n\"surname\": \"Coleman\",\n\"email\": \"ecoleman15@businessweek.com\"\n},\n{\n\"forename\": \"Richard\",\n\"surname\": \"Cruz\",\n\"email\": \"rcruz7@unc.edu\"\n},\n{\n\"forename\": \"Sean\",\n\"surname\": \"Cruz\",\n\"email\": \"scruz10@answers.com\"\n},\n{\n\"forename\": \"Rebecca\",\n\"surname\": \"Cunningham\",\n\"email\": \"rcunninghamd@mac.com\"\n},\n{\n\"forename\": \"Margaret\",\n\"surname\": \"Evans\",\n\"email\": \"mevansh@pcworld.com\"\n},\n{\n\"forename\": \"Jeffrey\",\n\"surname\": \"Ford\",\n\"email\": \"jford14@cnet.com\"\n},\n{\n\"forename\": \"Andrea\",\n\"surname\": \"Gardner\",\n\"email\": \"agardnerv@woothemes.com\"\n},\n{\n\"forename\": \"Deborah\",\n\"surname\": \"George\",\n\"email\": \"dgeorge6@furl.net\"\n},\n{\n\"forename\": \"Sean\",\n\"surname\": \"Gibson\",\n\"email\": \"sgibsony@alexa.com\"\n},\n{\n\"forename\": \"Virginia\",\n\"surname\": \"Graham\",\n\"email\": \"vgrahamk@aol.com\"\n},\n{\n\"forename\": \"Steven\",\n\"surname\": \"Hamilton\",\n\"email\": \"shamiltonu@state.tx.us\"\n},\n{\n\"forename\": \"Virginia\",\n\"surname\": \"Hawkins\",\n\"email\": \"vhawkinsf@ehow.com\"\n},\n{\n\"forename\": \"Edward\",\n\"surname\": \"Hicks\",\n\"email\": \"ehicksc@pcworld.com\"\n},\n{\n\"forename\": \"Mark\",\n\"surname\": \"Johnson\",\n\"email\": \"mjohnsonj@hostgator.com\"\n},\n{\n\"forename\": \"Ruth\",\n\"surname\": \"Jordan\",\n\"email\": \"rjordan1a@smugmug.com\"\n},\n{\n\"forename\": \"Antonio\",\n\"surname\": \"Kim\",\n\"email\": \"akim4@odnoklassniki.ru\"\n},\n{\n\"forename\": \"Jennifer\",\n\"surname\": \"Marshall\",\n\"email\": \"jmarshallt@gnu.org\"\n},\n{\n\"forename\": \"Eric\",\n\"surname\": \"Matthews\",\n\"email\": \"ematthews5@independent.co.uk\"\n},\n{\n\"forename\": \"Raymond\",\n\"surname\": \"Mcdonald\",\n\"email\": \"rmcdonald2@ihg.com\"\n},\n{\n\"forename\": \"Eric\",\n\"surname\": \"Miller\",\n\"email\": \"emillere@creativecommons.org\"\n},\n{\n\"forename\": \"Jonathan\",\n\"surname\": \"Morales\",\n\"email\": \"jmoralesa@ovh.net\"\n},\n{\n\"forename\": \"Marie\",\n\"surname\": \"Morgan\",\n\"email\": \"mmorganb@cloudflare.com\"\n},\n{\n\"forename\": \"Amanda\",\n\"surname\": \"Nelson\",\n\"email\": \"anelson13@indiatimes.com\"\n},\n{\n\"forename\": \"Lisa\",\n\"surname\": \"Olson\",\n\"email\": \"lolsonr@telegraph.co.uk\"\n},\n{\n\"forename\": \"Alice\",\n\"surname\": \"Ortiz\",\n\"email\": \"aortizw@histats.com\"\n},\n{\n\"forename\": \"Peter\",\n\"surname\": \"Phillips\",\n\"email\": \"pphillipss@1688.com\"\n},\n{\n\"forename\": \"Matthew\",\n\"surname\": \"Porter\",\n\"email\": \"mporter9@europa.eu\"\n},\n{\n\"forename\": \"Tammy\",\n\"surname\": \"Ray\",\n\"email\": \"trayx@weather.com\"\n},\n{\n\"forename\": \"Mark\",\n\"surname\": \"Richardson\",\n\"email\": \"mrichardson1d@ihg.com\"\n},\n{\n\"forename\": \"Joan\",\n\"surname\": \"Roberts\",\n\"email\": \"jroberts12@alibaba.com\"\n},\n{\n\"forename\": \"Kathleen\",\n\"surname\": \"Rose\",\n\"email\": \"kroseg@pinterest.com\"\n},\n{\n\"forename\": \"Steve\",\n\"surname\": \"Sanders\",\n\"email\": \"ssanders1b@wikispaces.com\"\n},\n{\n\"forename\": \"Shirley\",\n\"surname\": \"Scott\",\n\"email\": \"sscottm@macromedia.com\"\n},\n{\n\"forename\": \"Lillian\",\n\"surname\": \"Stephens\",\n\"email\": \"lstephens19@hugedomains.com\"\n},\n{\n\"forename\": \"Nicole\",\n\"surname\": \"Thompson\",\n\"email\": \"nthompson3@admin.ch\"\n},\n{\n\"forename\": \"Marie\",\n\"surname\": \"Thompson\",\n\"email\": \"mthompsonz@yelp.com\"\n},\n{\n\"forename\": \"Alan\",\n\"surname\": \"Vasquez\",\n\"email\": \"avasquezo@miibeian.gov.cn\"\n},\n{\n\"forename\": \"Mildred\",\n\"surname\": \"Watkins\",\n\"email\": \"mwatkins0@miibeian.gov.cn\"\n},\n{\n\"forename\": \"Eugene\",\n\"surname\": \"Williams\",\n\"email\": \"ewilliamsi@deliciousdays.com\"\n}\n]\n}\n</code></pre> <p>Ein Array ist stets numerisch indiziert, d.h. Sie k\u00f6nnen unter Verwendung des Index die einzelnen Objekte auslesen. </p>"},{"location":"angular2/#operatoren-uber-arrays","title":"Operatoren \u00fcber Arrays","text":"<p>Angenommen, wir haben obiges Objekt in <code>membersJSON</code> gespeichert, dann ist der Wert der Variable <code>membersArray</code> das darin enthaltene Array, wenn wir <code>let membersArray = membersJSON.members</code> definieren.</p>"},{"location":"angular2/#length","title":"<code>length</code>","text":"<p><code>length</code> gibt die L\u00e4nge des Arrays zur\u00fcck, z.B. <code>membersArray.length // 50</code>. </p>"},{"location":"angular2/#foreach","title":"<code>foreach</code>","text":"<p><code>foreach()</code> ist eine M\u00f6glichkeit, f\u00fcr alle Elemente eines Arrays eine Funktion auszuf\u00fchren, z.B.:</p> <pre><code>let liste = \"&lt;ul&gt;\";\nmembersArray.forEach(createListItem);\nliste += \"&lt;/ul&gt;\";\n\nfunction createListItem(value) {\nliste += `&lt;li&gt; &lt;a href='mailto: ${value.email}'&gt;${value.forename} ${value.surname}&lt;/a&gt;&lt;/li&gt;`;\n}\n\ndocument.getElementById('listDiv').innerHTML = liste;\n</code></pre> <p>ergibt </p> <p></p>"},{"location":"angular2/#push","title":"<code>push()</code>","text":"<p>Mithilfe von <code>push</code> kann einem Array ein weiteres Element hinzugef\u00fcgt werden, z.B. </p> <pre><code>membersArray.push({\nforename: \"Maria\",\nsurname: \"Mueller\",\nemail: \"maria@mueller.org\"\n})\n</code></pre> <p>Wir h\u00e4tten denselben Effekt auch erzielen k\u00f6nnen, indem wir </p> <pre><code>membersArray[membersArray.length] = {\nforename: \"Maria\",\nsurname: \"Mueller\",\nemail: \"maria@mueller.org\"\n}\n</code></pre> <p>geschrieben  und somit die Arrayl\u00e4nge als neuen Index verwendet h\u00e4tten. Das Hinzuf\u00fcgen von Elementen \u00fcber die Index-Schreibweise birgt jedoch die Gefahr des \u00dcberschreibens (wenn der Index bereits existiert) oder des Entstehens von \"L\u00f6chern\", wenn ein Index verwendet wird, der sich nicht an den letzten Index anschlie\u00dft.</p>"},{"location":"angular2/#pop","title":"<code>pop()</code>","text":"<p><code>pop</code> entfernt das letzte Element aus dem Array und gibt es zur\u00fcck, z.B. </p> <pre><code>let lastElement = membersArray.pop()\nconsole.log(lastElement)    // das letzte Element\nconsole.log(membersArray)   // letzte Element ist entfernt\n</code></pre>"},{"location":"angular2/#shift","title":"<code>shift()</code>","text":"<p><code>shift</code> entfernt das erste Element aus dem Array und gibt es zur\u00fcck. Alle nachfolgenden Elemente r\u00fccken nach vorne auf, so dass der Index weiterhin mit <code>0</code> beginnt, z.B. </p> <pre><code>let firstElement = membersArray.shift()\nconsole.log(firstElement)    // das letzte Element\nconsole.log(membersArray)   // erstes Element ist entfernt und alle \n// nachfolgenden Elemente sind nach \n// vorne gerueckt\n</code></pre>"},{"location":"angular2/#unshift","title":"<code>unshift()</code>","text":"<p><code>unshift</code> f\u00fcgt ein Element an die erste Stelle des Arrays ein und \"shifted\" alle nachfolgenden Elemente um eine Stelle nach hinten. Die <code>unshift()</code>-Funktion gibt die neue L\u00e4nge des Arrays zur\u00fcck, z.B. </p> <pre><code>let newLength = membersArray.unshift({\nforename: \"Maria\",\nsurname: \"Mueller\",\nemail: \"maria@mueller.org\"\n})\n</code></pre>"},{"location":"angular2/#delete","title":"<code>delete</code>","text":"<p><code>delete</code> l\u00f6scht Elemente im Array unter Angabe des Index. Allerdings hinterl\u00e4sst <code>delete</code> \"L\u00f6cher\" im Array (Elemente, die <code>undefined</code> sind). <code>pop</code> und <code>shift</code> sind deutlich besser, da sie keine \"L\u00f6cher\" hinterlassen. Deshalb sollte <code>delete</code> nur vern\u00fcnftig verwendet werden, n\u00e4mlich indem nach <code>delete</code> die nachfolgenden Elemente nach vorne shiften. </p> <pre><code>let indexDelete = 13;\ndelete membersArray[indexDelete];   // membersArray[13] nun undefined\nconsole.log(membersArray)           // Laenge immernoch 50\nconsole.log(membersArray[13])       // undefined\nfor(let i = indexDelete; i &lt; membersArray.length; i++) {\nmembersArray[i] = membersArray[i+1]     // alle nachfolgenden nach links shiften\n}\nmembersArray.pop()                  // letztes Element ist undefined und wird entfernt\n</code></pre> <p>F\u00fcr L\u00f6schen von Elementen aus Arrays siehe auch hier.</p>"},{"location":"angular2/#concat","title":"<code>concat()</code>","text":"<p><code>concat()</code> ist haupts\u00e4chlich dazu da, mehrere Arrays zu einem zu verschmelzen. Angenommen, Sie haben ein Array <code>arr1</code> und ein Array <code>arr2</code>. Dann k\u00f6nnen Sie <code>let arr3 = arr1.concat(arr2);</code> schreiben und in <code>arr3</code> sind dann alle Elemente aus <code>arr1</code> (zuerst) und <code>arr2</code> (folgend). Beachten Sie, dass <code>arr1</code> dabei unver\u00e4ndert bleibt, d.h. nur <code>arr1.concat(arr2);</code> hat keinen Effekt. Sie m\u00fcssten dann <code>arr1 = arr1.concat(arr2);</code> schreiben. </p> <p>Sie k\u00f6nnen <code>concat()</code> auch dazu verwenden, ein einzelnes Element dem Arry hinzuzuf\u00fcgen, z.B. </p> <pre><code>membersArray = membersArray.concat({\nforename: \"Maria\",\nsurname: \"Mueller\",\nemail: \"maria@mueller.org\"\n})\n</code></pre> <p>Sie k\u00f6nnen auch mehrere Arrays in einem Schritt miteienander verbinden, z</p>"},{"location":"angular2/#splice","title":"<code>splice()</code>","text":"<p><code>splice()</code> kann verwendet werden, um entweder Elemente zu einem Array an einer bestimmten Position hinzuzuf\u00fcgen oder um eine bestimmte Anzahl von Elementen zu l\u00f6schen. Dazu erwartet <code>splice()</code> zun\u00e4chst zwei Parameter. Der erste Parameter gibt den Index an, von dem entweder gel\u00f6scht oder eingef\u00fcgt werden soll. Der zweite Parameter gibt entweder die Anzahl der zu l\u00f6schenden Elemente an oder er ist <code>0</code>, dann soll eingef\u00fcgt werden. Ist der zweite Parameter gr\u00f6\u00dfer als <code>0</code> und es folgen weitere Parameter, dann handelt es sich um Ersetzen von Elementen im Array. Beispiele:</p> <pre><code>membersArray.splice(13, 4);              // loescht 4 Elemente beginnend bei Index 13\nmembersArray.splice(13, 0, ob1, obj2);   // fuegt die beiden Objekte obj1 und obj2 ab Index 13 hinzu\nmembersArray.splice(13, 2, ob1, obj2);   // ersetzt die beiden Objekte in Index 13 und 14 durch obj1 und obj2\n</code></pre> <p>Die R\u00fcckgabe von <code>splice()</code> ist das Array der gel\u00f6schten (ersetzten) Elemente. </p>"},{"location":"angular2/#slice","title":"<code>slice()</code>","text":"<p><code>sclice()</code> erzeugt ein neues Array aus einem gegebenen Array und kopiert in das neue Array die Elemente ab dem Index, der in <code>slice()</code> als Parameter \u00fcbergeben wird. Wird ein zweiter Parameter angegeben, handelt es sich dabei um die Anzahl der zu kopierenden Elemente. </p> <pre><code>let newArray = membersArray.slice(13);    // kopiere alle Elemente ab Index 13 nach newArray\nnewArray = membersArray.splice(13, 5);    // kopiere 5 Elemente ab Index 13 nach newArray\n</code></pre>"},{"location":"angular2/#sort","title":"<code>sort()</code>","text":"<p><code>sort()</code> sortiert ein Array. Allerdings ist zu beachten, dass <code>sort()</code> nur korrekt funktioniert, wenn es sich bei den Elementen um Strings handelt. Zahlen w\u00fcrden z.B. falsch sortiert werden, da <code>2</code> z.B. gr\u00f6\u00dfer als <code>10</code> w\u00e4re, da <code>\"2\"</code> lexikographisch nach <code>\"10\"</code> (<code>\"1\"</code>) k\u00e4me. Um z.B. Zahlen zu sortieren, k\u00f6nnte der <code>sort()</code>-Funktion z.B. folgende Funktion als Callback \u00fcbergeben werden:</p> <pre><code>numbersArrayToBeSorted.sort(function(a, b){return b - a});\n</code></pre> <p>Damit wird eine <code>compare()</code>-Methode implementiert. Gibt diese Methode f\u00fcr <code>b-a</code> einen Wert gr\u00f6\u00dfer als <code>0</code> zur\u00fcck, dann ist <code>b</code> gr\u00f6\u00dfer als <code>a</code>, gibt sie einen Wert kleiner als <code>0</code> zur\u00fcck, dann ist <code>a</code> gr\u00f6\u00dfer als <code>b</code> und wenn der R\u00fcckgabewert <code>0</code> ist, dann gilt <code>a == b</code>. </p> <p>Um z.B. das <code>membersArray</code> nach der Eigenschaft <code>forename</code> zu sortieren, kann folgende Funktion verwendet werden: </p> <pre><code>membersArray.sort(function(a,b) {\nlet a1 = a.forename.toLowerCase();\nlet b1 = b.forename.toLowerCase();\nif(a1 &lt; b1) return -1;\nif(a1 &gt; b1) return 1;\nreturn 0;\n});\n</code></pre> <p>In Arrow-Notation sieht die Funktion wie folgt aus:</p> <pre><code>membersArray.sort((a,b) =&gt; {\nlet a1 = a.forename.toLowerCase();\nlet b1 = b.forename.toLowerCase();\nif(a1 &lt; b1) return -1;\nif(a1 &gt; b1) return 1;\nreturn 0;\n});\n</code></pre> <p>Wir wandeln zun\u00e4chst alle Vornamen in Strings mit Kleinbuchstaben um und implementieren dann eine <code>compare()</code>-Funktion wie oben. Sollte z.B. nach der Eigenschaft <code>surname</code> sortiert werden, m\u00fcsste im Code <code>forename</code> durch <code>surname</code> ersetzt werden. </p>"},{"location":"angular2/#map","title":"<code>map()</code>","text":"<p><code>map()</code> wird verwendet, um eine Funktion auf alle Elemente des Arrays anzuwenden. Diese Funktion wird der <code>map()</code>-Funktion als Callback \u00fcbergeben. Folgender Code stellt allen E-Mailadressen aus <code>membersArray</code> ein \"mailto:\" voran:</p> <pre><code>let mailTo = membersArray.map( (value) =&gt; {\nreturn value['email'] = \"mailto: \" + value['email'];\n})\n</code></pre> <p>Das <code>mailTo</code>-Array enth\u00e4lt dann nur alle Werte der <code>email</code>-Eigenschaft, sieht also so aus:</p> <pre><code>['mailto: aanderson8@google.fr', 'mailto: abradley1c@globo.com', 'mailto: avasquezo@miibeian.gov.cn', 'mailto: aortizw@histats.com', 'mailto: anelson13@indiatimes.com', 'mailto: agardnerv@woothemes.com', 'mailto: abrooks16@bravesites.com', 'mailto: akim4@odnoklassniki.ru', 'mailto: bcoleman11@fc2.com', 'mailto: candrewsp@noaa.gov', 'mailto: dgeorge6@furl.net', 'mailto: ehicksc@pcworld.com', 'mailto: ematthews5@independent.co.uk', 'mailto: emillere@creativecommons.org', 'mailto: ecoleman15@businessweek.com', 'mailto: ewilliamsi@deliciousdays.com', 'mailto: jford14@cnet.com', 'mailto: jmarshallt@gnu.org', 'mailto: jroberts12@alibaba.com', 'mailto: jmoralesa@ovh.net', 'mailto: kroseg@pinterest.com', 'mailto: lstephens19@hugedomains.com', 'mailto: lolsonr@telegraph.co.uk', 'mailto: mevansh@pcworld.com', 'mailto: maria@mueller.org', 'mailto: maria@mueller.org', 'mailto: mmorganb@cloudflare.com', 'mailto: mthompsonz@yelp.com', 'mailto: mjohnsonj@hostgator.com', 'mailto: mrichardson1d@ihg.com', 'mailto: mporter9@europa.eu', 'mailto: mwatkins0@miibeian.gov.cn', 'mailto: nthompson3@admin.ch', 'mailto: pphillipss@1688.com', 'mailto: rmcdonald2@ihg.com', 'mailto: rcunninghamd@mac.com', 'mailto: rcruz7@unc.edu', 'mailto: rcampbell1@geocities.com', 'mailto: rbrownq@nifty.com', 'mailto: rcampbell17@eventbrite.com', 'mailto: rjordan1a@smugmug.com', 'mailto: rburton18@foxnews.com', 'mailto: sgibsony@alexa.com', 'mailto: sscottm@macromedia.com', 'mailto: ssanders1b@wikispaces.com', 'mailto: shamiltonu@state.tx.us', 'mailto: sandrewsn@google.co.jp', 'mailto: trayx@weather.com', 'mailto: vgrahamk@aol.com', 'mailto: vhawkinsf@ehow.com']\n</code></pre> <p>Wenn <code>mailTo</code> alle Objekte vollst\u00e4ndig enthalten sollte, dann m\u00fcsste die Funktion so aussehen:</p> <pre><code>let mailTo = membersArray.map( (value) =&gt; {\nvalue['email'] = \"mailto: \" + value['email'];\nreturn value;\n})\n</code></pre> <p>Da es sich bei den Elementen im Array um Objekte handelt, sind auch die Eintr\u00e4ge im <code>membersArray</code> entsprechend ge\u00e4ndert. Das w\u00e4re bei Nicht-Objekten (z.B. Strings oder Numbers)  nicht der Fall.</p> <p>Die Callback-Funktion k\u00f6nnte auch drei Parameter erwarten: <code>(value, index, array)</code>, wobei es sich bei <code>array</code> um das Array selbst, also <code>membersArray</code> handelt.</p>"},{"location":"angular2/#filter","title":"<code>filter()</code>","text":"<p>Mithilfe der <code>filter()</code>-Funktion k\u00f6nnen Elemente aus einem Array gefiltert und in ein neues Array kopiert werden. Angenommen, wir wollen alle Elemente, in denen der Vorname mit <code>R</code> beginnt, herausfiltern:</p> <pre><code>let forenamesStartingWithR = membersArray.filter ( (value) =&gt; {\nif(value.forename.startsWith(\"R\"))\n{\nreturn value;\n}\n})\n</code></pre> <p>Dann sieht <code>forenamesStartingWithR</code> so aus:</p> <pre><code>0 : {forename: 'Raymond', surname: 'Mcdonald', email: 'mailto: rmcdonald2@ihg.com'}\n1 : {forename: 'Rebecca', surname: 'Cunningham', email: 'mailto: rcunninghamd@mac.com'}\n2 : {forename: 'Richard', surname: 'Cruz', email: 'mailto: rcruz7@unc.edu'}\n3 : {forename: 'Roy', surname: 'Campbell', email: 'mailto: rcampbell1@geocities.com'}\n4 : {forename: 'Russell', surname: 'Brown', email: 'mailto: rbrownq@nifty.com'}\n5 : {forename: 'Russell', surname: 'Campbell', email: 'mailto: rcampbell17@eventbrite.com'}\n6 : {forename: 'Ruth', surname: 'Jordan', email: 'mailto: rjordan1a@smugmug.com'}\n7 : {forename: 'Ryan', surname: 'Burton', email: 'mailto: rburton18@foxnews.com'}\n</code></pre>"},{"location":"angular2/#weitere-array-funktionen","title":"Weitere Array-Funktionen","text":"<p>Auch die folgenden Funktionen erwarten eine Callback-Funktion als Parameter.</p> <ul> <li><code>reduce()</code> reduziert ein Array auf einen einzigen Wert. Wird z.B. f\u00fcr ein Array aus lauter Zahlen angewendet, um die Gesamtsumme der Zahlen zu ermitteln oder den Durchschnitt. </li> <li><code>every()</code> pr\u00fcft, ob alle Elemente des Arrays eine bestimmte Bedingung erf\u00fcllen, z.B. gr\u00f6\u00dfer als <code>0</code> sind oder ungleich <code>undefined</code>. Gibt ein <code>true</code> zur\u00fcck, wenn die Bedingung f\u00fcr alle gilt, <code>false</code> sonst.</li> <li><code>some()</code> pr\u00fcft, ob mindestens ein Element des Arrays eine bestimmte Bedingung erf\u00fcllen, z.B. gr\u00f6\u00dfer als <code>0</code> ist oder ungleich <code>undefined</code>. Gibt ein <code>true</code> zur\u00fcck, wenn die Bedingung f\u00fcr mindestens ein Element gilt, <code>false</code> sonst.</li> <li><code>find()</code> gibt das erste Element zur\u00fcck, f\u00fcr das eine bestimmte Bedingung gilt. <code>find()</code> muss nicht zwingend eine Callback-Funktion \u00fcbergeben werden, kann auch ein Wert f\u00fcr ein Element sein.</li> <li><code>findIndex()</code> gibt den Index des ersten Elementes zur\u00fcck, f\u00fcr das die \u00fcbergebene Funktion passt.</li> </ul> <p>Die folgenden Funktionen erwarten keine Callback-Funktion:</p> <ul> <li><code>includes()</code> pr\u00fcft, ob ein Element im Array existiert. Das Element wird als Parameter \u00fcbergeben. Gibt <code>true</code> zur\u00fcck, wenn das Element existiert, <code>false</code> sonst.</li> <li><code>entries()</code> gibt ein Array aus den Schl\u00fcssel-Wertepaaren des Arrays zur\u00fcck.</li> <li><code>keys()</code> gibt ein Array aller Schl\u00fcssel (Indizes) des Arrays zur\u00fcck.</li> <li><code>indexOf()</code> gibt den (ersten) Index des Elementes im Array zur\u00fcck, welches als Parameter \u00fcbergeben wird.</li> <li><code>lastIndexOf()</code> gibt den (letzten) Index des Elementes im Array zur\u00fcck, welches als Parameter \u00fcbergeben wird.</li> </ul>"},{"location":"angular2/#bindings-und-direktiven","title":"Bindings und Direktiven","text":""},{"location":"angular2/#interpolation","title":"{{ Interpolation }}","text":"<p>Interpolation ist die einfachste Form des data binding. Syntaktisch erkennt man Interpolation an den doppelten geschweiften Klammern <code>{{ Interpolation }}</code>. </p> Beispiel <pre><code>import { Component } from '@angular/core';\n\n@Component({\nselector: 'app-lesson',\ntemplate: `\n    &lt;h1&gt;{{ headline }}&lt;/h1&gt;\n    &lt;p&gt;Hier steht {{name}}&lt;/p&gt;\n  `,\nstyleUrls: ['./lesson.component.css']\n})\nexport class LessonComponent {\nheadline = 'Mein Titel';\nname = 'mein Name';\n}\n</code></pre> <p>Im obigen Beispiel hat die Komponente <code>LessonComponent</code> zwei Eigenschaften: <code>headline</code> und <code>name</code>. In obiger Komponente wird (zur Anschauung) sogenanntes inline templating verwendet, d.h. es gibt keine eigene <code>lesson.component.html</code>-Datei, in der der HTML-Code steht, sondern der HTML-Code wird direkt in die <code>template</code>-Eigenschaft der Typescript-Datei <code>lesson.component.ts</code>eingef\u00fcgt (siehe Zeilen 5-8 im obigen Beispiel). Der HTML-Code wird in backticks eingefasst (<code>``</code>), nicht zu verwechseln mit den einfachen Anf\u00fchrungsstrichen (<code>''</code>).</p> <p>Damit inline templating m\u00f6glich ist, wird die Komponente mit dem Flag <code>-t</code> erzeugt (<code>inlineTemplate=true</code>), d.h. unsere Lesson-Komponente wurde mithilfe der CLI wie folgt erzeugt:</p> <pre><code>ng g c lesson -t\n</code></pre> <p>Eine Interpolation kann auch Ausdr\u00fccke enthalten, die aufgel\u00f6st werden, z.B.</p> <pre><code>&lt;p&gt;1 + 2 = {{1 + 2}}.&lt;/p&gt;\n</code></pre> <p>Man kann mithilfe einer Direktive durch ein Array laufen und jedes einzelne Element mithilfe von Interpolation ausgeben:</p> <pre><code>@Component({\nselector: 'app-lesson',\ntemplate: `\n    &lt;ol&gt;\n      &lt;li *ngFor=\"let day of weekdays\"&gt;{{ day }}&lt;/li&gt;\n    &lt;/ol&gt;\n  `,\nstyleUrls: ['./lesson.component.css']\n})\nexport class LessonComponent {\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n}\n</code></pre> <p>Oder es ist m\u00f6glich, Attributen von HTML-Elementen mithilfe von Interpolation Werte zuzuordnen:</p> <pre><code>@Component({\nselector: 'app-lesson',\ntemplate: `\n    &lt;img src=\"{{ imgUrl }}\" /&gt;\n  `,\nstyleUrls: ['./lesson.component.css']\n})\nexport class LessonComponent {\nimgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg';\n}\n</code></pre> <p>F\u00fcr unser <code>first</code>-Beispiel ist ein ganz einfaches Beispiel f\u00fcr die <code>main</code>-Komponente gezeigt:</p> main.component.tsmain.component.html <pre><code>import { Component, OnInit } from '@angular/core';\n\n@Component({\nselector: 'htw-main',\ntemplateUrl: './main.component.html',\nstyleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\nheadline = 'This is main';\nconstructor() { }\n\nngOnInit(): void {\n}\n\n}\n</code></pre> <pre><code>&lt;div id=\"main\"&gt;\n  &lt;h3&gt;\n      {{ headline }}\n  &lt;/h3&gt;\n  &lt;div id=\"row\"&gt;\n      &lt;div id=\"left\"&gt;\n          &lt;htw-left&gt;\n          &lt;/htw-left&gt;\n      &lt;/div&gt;\n      &lt;div id=\"right\"&gt;\n          &lt;htw-right&gt;\n          &lt;/htw-right&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"angular2/#elementreferenzen","title":"#Elementreferenzen","text":"<p>\u00dcber eine Elementreferenz, die man im HTML-Code mittels des Rautensymbols definiert, kann in Angular sehr einfach auf das Element zugegriffen werden. Das folgende Beispiel zeigt eine solche Elementreferenz:</p> <pre><code>&lt;input #id type=\"text\" value=\"Elementreferenz\" /&gt;\n{{ id.value }}\n</code></pre> <p>In dem Beispiel wurde einem Textfeld die Elementreferenz <code>id</code> zugewiesen (kann jeder Name sein), erkennbar an <code>#id</code>. \u00dcber diese Elementreferenz (den Namen) l\u00e4sst sich nun direkt auf dieses Element zugreifen. Im obigen Beispiel wird die <code>value</code>-Eigenschaft ausgelesen, also der Wert, der in das Textfeld eingegeben wird (oder, wie oben, vordefiniert ist). Beachten Sie jedoch, dass der Wert nicht automatisch angepasst wird, sobald eine Eingabe erfolgt. Dies muss durch ein Ereignis (z.B. <code>change</code> oder <code>input</code>) getriggert werden. </p>"},{"location":"angular2/#property-bindings","title":"[Property Bindings]","text":"<p>Insbesondere, wenn Attributen von HTML-Elementen Werte zugeordnet werden sollen (so wie beim <code>imgUrl</code>-Beispiel des Abschnitts {{Interpolation}}), spricht man von property binding. Property binding spielt eine gro\u00dfe Rolle beim Datenfluss von Eltern-Komponenten auf Kind-Komponenten. Die generelle Idee dabei ist, dass mithilfe von property binding Werte (Daten) an Attribute von HTML-Elementen bindet. Diese HTML-Elemente k\u00f6nnen auch Komponenten sein.</p> <p>Wir betrachten zun\u00e4chst die unterschiedlichen Arten (Notationen) von property binding:</p> <pre><code>&lt;element [property]=\"ausdruck\"&gt;&lt;/element&gt;\n</code></pre> <p>D.h. ein ausdruck wird \u00fcbergeben, der zu einem Wert aufgel\u00f6st wird und dieser Wert wird dem Attribut <code>property</code> \u00fcbergeben. Betrachten wir nochmals das letzte Beispiel aus dem Abschnitt {{Interpolation}}). Bei diesem Beispiel haben wir Interpolation verwendet, um dem Attribut <code>src</code> des HTML-Elementes <code>img</code> einen Wert zuzuweisen. Das exakt gleiche Verhalten l\u00e4sst sich auch mittels property bindings erzeugen:</p> <pre><code>&lt;img [src]=\"imgUrl\" /&gt;\n\n&lt;!-- imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg'; --&gt;\n</code></pre> <p>Das bedeutet f\u00fcr unser <code>first</code>-Beispiel, dass die beiden <code>&lt;img&gt;</code>-Definitionen gleich sind:</p> header.component.htmlheader.component.ts <pre><code>&lt;p&gt;header works!\n    &lt;img src=\"{{ imgUrl }}\" alt=\"{{ description }}\" width=\"53px;\" /&gt;\n&lt;img [src]=\"imgUrl\" [alt]=\"description\" width=\"53px;\" /&gt;\n&lt;/p&gt;\n</code></pre> <pre><code>import { Component, OnInit } from '@angular/core';\n\n@Component({\nselector: 'htw-header',\ntemplateUrl: './header.component.html',\nstyleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\nimgUrl = '/assets/images/fiw.jpg';\ndescription = 'FIW Logo';\nconstructor() { }\n\nngOnInit(): void {\n}\n\n}\n</code></pre> <p>Neben diesen \"allgemeinen\" property bindings gibt es auch noch \"spezielle\" property bindings, n\u00e4mlich class bindings und style bindings. Bei class bindings wird das Pr\u00e4fix <code>class</code> vor die property (die entsprechende CSS-Klasse) gesetzt:</p> <pre><code>&lt;element [class.class1]=\"class1enabled\"\n         [class.class2]=\"class2enabled\" ... &gt;&lt;/element&gt;\n</code></pre> <p>D.h. die CSS-Klasse <code>class1</code>ist genau dann wirksam, wenn der Ausdruck <code>class1enabled</code> true ist und <code>class2</code>ist genau dann wirksam, wenn der Ausdruck <code>class2enabled</code> true ist usw.</p> <p>Bei den style bindings werden jedoch gar keine Ausdr\u00fccke, sondern Werte \u00fcbergeben:</p> <pre><code>&lt;element [style.color]\n</code></pre>"},{"location":"angular2/#event-bindings","title":"(Event Bindings)","text":"<p>In den property bindings haben wir gesehen, wie Werte Attributen (Eigenschaften) von Elementen zugeordnet werden k\u00f6nnen. Aus JavaScript ist auch bekannt, dass Ereignisse Attribute von Elementen sein k\u00f6nnen, z.B. <code>onClick</code>, <code>onKeyup</code>, <code>onChange</code> usw. Dabei handelt es sich um sogenannte native DOM-Ereignisse. Neben der M\u00f6glichkeit, solche nativen DOM-Ereigniss zu behandeln, bietet Angular auch die M\u00f6glichkeit, eigene Ereignisse zu definieren und diese zu behandeln. Wir betrachten beide M\u00f6glichkeiten und beginnen mit den nativen Ereignissen.</p>"},{"location":"angular2/#native-dom-ereignisse","title":"Native DOM-Ereignisse","text":"<p>In HTML sieht das unter Aufruf einer JavaScript-Funktion f\u00fcr die Ereignisbahandlung dann typischerweise (hier das Click-Ereignis f\u00fcr einen Button) wie folgt aus:</p> HTMLJavaScript <pre><code>&lt;button onClick=\"doSomething()\"&gt;Click here!&lt;/button&gt;\n</code></pre> <pre><code>function doSomething() {\n// something to do\n}\n</code></pre> <p>In Angular ist das Prinzip das gleiche, nur dass das Ereignis in runden Klammern genannt und an dieses Ereignis die Ereignisbehandlung gebunden wird (event binding). Das bedeutet, das Angular-Template f\u00fcr das obige Beispiel sieht wie folgt aus:</p> Angular-TemplateAngular-Typescript <pre><code>&lt;button (click)=\"doSomething()\"&gt;Click here!&lt;/button&gt;\n</code></pre> <pre><code>export class EventsComponent {\n\ndoSomething() {\n// something to do\n}\n}\n</code></pre> <p>Dieses Prinzip gilt f\u00fcr alle nativen DOM-Ereignisse. Hier ein kurzer \u00dcberblick \u00fcber die wichtigsten (f\u00fcr eine umfangreichere Liste siehe hier oder hier):</p> Ereignis Beschreibung <code>click</code> Mausklick auf das Element <code>change</code> Der Inhalt/Wert eines Elementes hat sich ge\u00e4ndert <code>mouseover</code> die Maus wird \u00fcber das Element bewegt <code>mouseout</code> die Maus wird vom Element wegbewegt <code>keydown</code> eine Taste der Tastatur wird gedr\u00fcckt <code>keyup</code> Loslassen einer Taste <code>load</code> der Browser hat die Seite vollst\u00e4ndig geladen <code>focus</code> Fokussieren des Elements (z.B. Anklicken) <code>blur</code> Verlieren des Fokus (z.B. Klick au\u00dferhalb) <code>submit</code> Abschicken eines Formulars <code>copy</code>, <code>paste</code> Kopieren, Einf\u00fcgen von Text <p>Einen kleinen Unterschied gibt es noch bei der \u00dcbergabe des Ereignisses an die das Ereignis behandelnde Funktion zu beachten. W\u00e4hrend in plain JavaScript das Ereignis mit <code>event</code> der Funktion \u00fcbergeben wird, erfolgt die \u00dcbergabe des Ereignisses in Angular mit <code>$event</code>. Beispiel:</p> Angular-TemplateAngular-Typescript <pre><code>&lt;input (change)=\"showPayload($event)\" type=\"text\" /&gt;\n</code></pre> <pre><code>export class EventsComponent {\n\nshowPayload(e: Event) {\nconsole.log(e);\n}\n}\n</code></pre> <p>Alle Events (in TypeScript/Angular) sind vom Typ <code>Event</code>. Es gibt noch speziellere Eventtypen, die aber alle auf dem Interface <code>Event</code> basieren, z.B. <code>MouseEvent</code>, <code>InputEvent</code>, <code>KeyboardEvent</code>, <code>UIEvent</code>, <code>ClipboardEvent</code>. Weitere Details siehe hier.</p> <p>Die einfache JavaScript-Attributschreibweise kann in Angular nicht verwendet werden, sondern immer nur die event binding-Schreibweise von Angular (mit den runden Klammern)!</p>"},{"location":"angular2/#eigene-ereignisse","title":"Eigene Ereignisse","text":"<p>F\u00fcr eine Komponente kann ein eigenes - nicht natives - Ereignis definiert werden. Dies geschieht, indem f\u00fcr eine Komponente eine neue Eigenschaft (z.B. <code>myEvent</code>) definiert wird und diese vom Typ <code>EventEmitter</code> deklariert wird. Mithilfe von Generics kann der Typ des Events angegeben werden, der ausgel\u00f6st werden soll - wenn Sie den Typ nicht genau kennen, verwenden Sie <code>any</code>. Soll das Ereignis an die Elternkomponente weitergeleitet werden, was meistens der Fall ist, wird der Decorator <code>@Output()</code>verwendet.  Das Ausl\u00f6sen des Events geschieht dann durch die <code>emit()</code>-Methode von <code>EventEmitter</code>. Hier ein typisches Beispiel (zun\u00e4chst die Kindkomponente <code>EventsComponent</code> - also <code>events.component.html</code> und <code>events.component.ts</code>):</p> .html.ts <pre><code>&lt;button (click)=\"emitMyEvent()\"&gt;Click here!&lt;/button&gt;\n</code></pre> <pre><code>import {Component, EventEmitter, Output} from '@angular/core';\n\n@Component({\nselector: 'app-events',\ntemplateUrl: './events.component.html',\nstyleUrls: ['./events.component.css']\n})\nexport class EventsComponent {\n@Output() myEvent = new EventEmitter&lt;any&gt;();\n\nemitMyEvent() {\nthis.myEvent.emit();\n}\n\n}\n</code></pre> <p>Die <code>.html</code>-Datei definiert einen Button mit dem nativen Ereignis <code>click</code>. Dieses wird durch die Methode <code>emitMyEvent()</code> behandelt. </p> <p>In der <code>.ts</code>-Datei ist diese Methode definiert (Zeilen 11-13). Darin wird das eigene Event <code>myEvent</code> ausgel\u00f6st. Dieses Event ist ein Objekt vom Typ <code>EventEmitter</code>, typisiert als <code>any</code> (beliebiger Typ). Das Ausl\u00f6sen dieses Events wird an die aufrufende Komponente (die Elternkomponente) ausgegeben (Decorator <code>@Output()</code>). Deklaration der Eigenschaft und Dekorieren mit <code>@Output()</code> in Zeile 9. Das Ausl\u00f6sen des eigenen Events erfolgt durch den Aufruf der Methode <code>emit()</code> aus <code>EventEmitter</code> (Zeile 12).</p> <p>In der Elternkomponente kann dieses Ereignis nun empfangen werden (Beispiel einer Elternkomponente <code>AppComponent</code> - also <code>app.component.html</code> und <code>app.component.ts</code>):</p> .html.ts <pre><code>&lt;app-events (myEvent)=\"handleEventFromEventsComponent()\"&gt;&lt;/app-events&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\nselector: 'app-root',\ntemplateUrl: './app.component.html',\nstyleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\nhandleEventFromEventsComponent() {\nconsole.log('myEvent in der Kindkomponente ausgel\u00f6st');\n}\n\n}\n</code></pre> <p>In der <code>AppComponent</code> (das kann nat\u00fcrlich eine beliebige Komponente sein), wird die <code>EventsComponent</code> eingebunden (siehe <code>&lt;app-events&gt;</code> im Template der <code>AppComponent</code>). Dadurch entsteht die Hierarchie Elternkomponente <code>AppComponent</code> \u2192 Kindkomponente <code>EventsComponent</code> im DOM. </p> <p>Mithilfe von event binding wird die Behandlung des Ereignisses <code>myEvent</code> an die Methode <code>handleEventFromEventsComponent()</code> gebunden. In dieser Methode erfolgt hier einfach nur eine Ausgabe auf die Konsole. </p> <p>Interessant ist, dass wir dadurch die M\u00f6glichkeit haben, Daten von der Kindkomponente zur Elternkomponente flie\u00dfen zu lassen. Dazu \u00fcbergeben wir diese Daten als <code>payload</code> des Ereignisses. Daf\u00fcr typisieren wir <code>EventEmitter</code> mit dem Typ, von dem wir Daten \u00fcbergeben wollen (z.B. <code>Book</code> - siehe B\u00fccher-App). Die beiden obigen Beispiele sehen dann wie folgt aus (zuerst wieder <code>EventsComponent</code>): </p> .html.ts <pre><code>&lt;button (click)=\"emitMyEvent(book)\"&gt;Click here!&lt;/button&gt;\n</code></pre> <pre><code>import {Component, EventEmitter, Output} from '@angular/core';\n\n@Component({\nselector: 'app-events',\ntemplateUrl: './events.component.html',\nstyleUrls: ['./events.component.css']\n})\nexport class EventsComponent {\n@Output() myEvent = new EventEmitter&lt;Book&gt;();\n\nemitMyEvent(book: Book) {\nthis.myEvent.emit(book);\n}\n\n}\n</code></pre> <p>Im Template (HTML) werden die Daten der Ereignisbehandlung \u00fcbergeben. Das <code>EventEmitter</code>-Objekt ist mit dem konkreten Datentyp typisiert. Bei Aufruf der Methode <code>emit()</code> werden die Daten an die Elternkomponente \u00fcbergeben. </p> <p>Die Elternkomponente (hier wieder <code>AppComponent</code> kann diese Daten, die von der Kindkomponente an die Elternkomponente via Ereignis geflossen sind, nun weiterverarbeiten bzw. darstellen):</p> .html.ts <pre><code>&lt;app-events (myEvent)=\"handleEventFromEventsComponent($event)\"&gt;&lt;/app-events&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n\n@Component({\nselector: 'app-root',\ntemplateUrl: './app.component.html',\nstyleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\nhandleEventFromEventsComponent(book: Book) {\nconsole.log(book.title);\n}\n\n}\n</code></pre> <p>Wichtig beim event binding der Elternkomponente ist, dass der payload des Ereignisses mit <code>$event</code> \u00fcbergeben wird (siehe auch Native DOM-Ereignisse). </p> <p>Zusammenfassung</p> <p>In den letzten drei Abschnitten Interpolation, Property Binding und Event Binding haben wir uns mit Datenfluss besch\u00e4ftigt. Interpolation wird verwendet, um innerhalb einer Komponente die in der TypeScript-Klasse definierten Daten im Template darzustellen. Mithilfe von Property Binding kann die aufrufende Komponente (Elternkomponente) der aufgerufenen Kopmponente (Kindkomponente) Daten \u00fcbergeben. Mithilfe von Event Binding kann die Kindkomponente der Elternkomponente mithilfe eines eigenen Ereignisses Daten \u00fcbergeben. F\u00fcr die Anwendung dieser Konzepte schauen Sie sich B\u00fccher-App\u2192Datenfluss zwischen Komponenten an. </p>"},{"location":"angular2/#direktiven","title":"Direktiven","text":"<p>In Angular gibt es 3 Arten sogenannter Direktiven (engl. Directives):</p> <ul> <li>Komponentendirektiven (Components\u2014directives) </li> <li>Attributdirektiven (Attribute Directives)</li> <li>Strukturdirektiven (Structural-Direktives)</li> </ul> <p>Komponentendirektiven sind die meistverwendete Art und bereits in Angular \u2192 Kompnenten betrachtet. Attribut- und Strukturdirektiven k\u00f6nnen als HTML-Attribute verstanden werden, die dem HTML-Element ein zus\u00e4tzliches Verhalten hinzuf\u00fcgt. Attributdirektiven wirken sich das innere Verhalten eines HTML-Elementes aus (z.B. k\u00f6nnen damit CSS-Eigenschaften ge\u00e4ndert, hinzugef\u00fcgt oder gel\u00f6scht werden). Mit Strukturdirektiven kann die Struktur des DOMs ge\u00e4ndert werden (z.B. k\u00f6nnen ganze HTML-Elemente dem DOM-Baum hinzugef\u00fcgt werden).</p>"},{"location":"angular2/#strukturdirektiven","title":"Strukturdirektiven","text":"<p>Strukturdirektiven beginnen immer mit einem Stern <code>*</code>. Die bekanntesten Vertreter sind </p> <ul> <li><code>*ngFor</code> </li> <li><code>*ngIf</code></li> <li><code>*ngSwitch</code></li> </ul> <p>Diese sind auch in angular.io erl\u00e4utert. Wir erl\u00e4utern die darin aufgef\u00fchrten Beispiele und beginnen mit <code>*ngIf</code>:</p> <pre><code>&lt;p *ngIf=\"true\"&gt;\n  Expression is true and ngIf is true.\n  This paragraph is in the DOM.\n&lt;/p&gt;\n&lt;p *ngIf=\"false\"&gt;\n  Expression is false and ngIf is false.\n  This paragraph is not in the DOM.\n&lt;/p&gt;\n</code></pre> <p>Die Direktive <code>*ngIf</code> wird also wie ein Attribut des <code>&lt;p&gt;</code>-Elementes behandelt. Das Attribut <code>*ngIf</code> hat entweder den Wert <code>\"true\"</code> oder den Wert <code>\"false\"</code>. Ja nach Wert des Attributes wird das jeweilige <code>&lt;p&gt;</code>-Element in den DOM-Baum eingebunden. Also entweder das <code>&lt;p&gt;</code>-Element aus den Codezeilen <code>1</code>-<code>4</code> (bei Wert <code>\"true\"</code>) oder das <code>&lt;p&gt;</code>-Element aus den Codezeilen <code>5</code>-<code>8</code> (bei Wert <code>\"false\"</code>). In einer echten Anwendung ergibt sich der Wert des Attributes/der Direktive meistens aus dem Wert einer boole'schen Variablen oder einem anderen boole'schen Ausdruck.</p> <p>Das nicht dargestellte Element ist auch nicht Teil des DOMs! Es ist also nicht einfach nur auf <code>hide</code> gesetzt, sondern es ist gar nicht im DOM vorhanden. </p> <p>Intern wird aus der <code>*ngIf</code>-Direktive \u00fcbrigens ein sogenanntes Property-Binding:</p> <pre><code>&lt;ng-template [ngIf]=\"true\"&gt;\n  &lt;p&gt;\n    Expression is true and ngIf is true.\n    This paragraph is in the DOM.\n  &lt;/p&gt;\n&lt;/ng-template&gt;\n&lt;ng-template [ngIf]=\"false\"&gt;\n  &lt;p&gt;\n    Expression is false and ngIf is false.\n    This paragraph is not in the DOM.\n  &lt;/p&gt;\n&lt;/ng-template&gt;\n</code></pre> <p>Die <code>*ngFor</code>-Direktive ist etwas komplexer als <code>*ngIf</code>. F\u00fcr <code>*ngFor</code> ben\u00f6tigen wir mindestens eine Liste (oder ein Array) und eine Laufvariable, die die Werte aus der Liste annehmen kann. Im folgenden Beispiel ist <code>i</code> unsere laufvariable und <code>[1, 2, 3, 4, 5, 6]</code> unser Array.</p> <pre><code>&lt;div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\"&gt;\n  {{ i }}\n&lt;/div&gt;\n</code></pre> <p>F\u00fcr jeden Wert aus der Liste wird ein eigenes <code>&lt;div&gt;</code>- Element erzeugt. Der DOM-Baum sieht f\u00fcr obiges Beispiel also wie folgt aus (Angular-Attribute weggelassen):</p> <pre><code>&lt;div&gt; 1 &lt;/div&gt;\n&lt;div&gt; 2 &lt;/div&gt;\n&lt;div&gt; 3 &lt;/div&gt;\n&lt;div&gt; 4 &lt;/div&gt;\n&lt;div&gt; 5 &lt;/div&gt;\n&lt;div&gt; 6 &lt;/div&gt;\n</code></pre> <p>Au\u00dferdem stellt <code>*ngFor</code> noch einige Hilfsvariablen zur Verf\u00fcgung, die ebenfalls genutzt werden k\u00f6nnen:</p> <ul> <li><code>index</code> (Index des aktuellen Elementes <code>0, 1, 2, ...</code>)</li> <li><code>first</code> (ist <code>true</code>, wenn erstes Element, sonst <code>false</code>)</li> <li><code>last</code> (ist <code>true</code>, wenn letztes Element, sonst <code>false</code>)</li> <li><code>even</code> (ist <code>true</code>, wenn Index gerade, sonst <code>false</code>)</li> <li><code>odd</code> (ist <code>true</code>, wenn Index ungerade, sonst <code>false</code>)</li> </ul> <p>Folgend ein komplexeres Beispiel unter Verwendung einiger Hilfsvariablen:</p> <pre><code>&lt;div *ngFor=\"let value of [1, 2, 3, 4, 5, 6];\n                 index as i;\n                 first as f;\n                 last as l;\n                 odd as o;\"&gt;\n  &lt;div *ngIf=\"f\"&gt;Start&lt;/div&gt;\n  &lt;div [style.color]=\"o ? 'red' : 'blue'\"&gt;{{ i }} : {{ value }}&lt;/div&gt;\n  &lt;div *ngIf=\"l\"&gt;Ende&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>In Zeile <code>1</code> ist unsere Laufvariable durch das Array nun <code>value</code>. Au\u00dferdem wird der jeweilige Wert von <code>index</code> in der Variablen <code>i</code> (Zeilennummer <code>2</code>) gespeichert, der Wert von <code>first</code> in der Variablen <code>f</code>(Zeilennummer <code>3</code>), der Wert von <code>last</code> in der Variablen <code>l</code>(Zeilennummer <code>4</code>) und der Wert von <code>odd</code> in der Variablen <code>o</code>(Zeilennummer <code>5</code>) - die Hilfsvariable <code>even</code> betrachten wir hier nicht, da deren Wert genau der Negation von <code>odd</code> entspricht. In Zeile <code>6</code> wenden wir die <code>*ngIf</code>-Direktive an: ein <code>&lt;div&gt;</code> mit dem Inhalt <code>Start</code> wird vor dem ersten Element aus dem Array ausgegeben. F\u00fcr jedes weitere Element nicht mehr. In Zeile <code>7</code> erfolgt ein Property Binding: die <code>color</code>-Eigenschaft bekommt einen Wert zugewiesen. Der Wert ist jedoch abh\u00e4ngig davon, ob <code>o</code> wahr ist (dann Wert <code>red</code>) oder falsch (dann Wert <code>blue</code>).   Zeile <code>7</code> zeigt au\u00dferdem wie mithilfe von Interpolation der Wert von <code>i</code> und der Wert von <code>value</code>, getrennt mit <code>:</code> ausgegeben werden. Die Ausgabe ist also:</p> <p></p> <p>Aufgabe</p> <p>Informieren Sie sich auch \u00fcber die <code>*ngSwitch</code>-Direktive. Implementieren Sie ein Beispiel, in dem Sie die 3 Direktiven <code>*ngIf</code>, <code>*ngFor</code> und <code>*ngSwitch</code> anwenden. </p>"},{"location":"backend/","title":"REST-API (MongoDB)","text":"<p>Die wesentlichsten Konzepte, wie Komponenten, Services und Routing f\u00fcr Angular-Projekte haben wir bereits kennengelernt. Ehe wir uns weiter mit dem Frontend besch\u00e4ftigen, erstellen wir einen Server, der uns die Daten liefert. Derzeit haben wir unsere Mockup-Daten noch clientseitig von einem Service verwalten lassen. Das wollen wir nun \u00e4ndern. Die Daten speichern wir in einer Datenbank und stellen sie \u00fcber eine REST-API bereit. </p> Video zur Vorlesung Backend(MongoDB) <p></p>"},{"location":"backend/#rest","title":"REST","text":"<p>F\u00fcr diese Datenbank stellen wir die Implementierung einer Schnittstelle bereit, so dass wir die wesentlichen Datenbankanfragen dar\u00fcber ausf\u00fchren k\u00f6nnen. Diese wesentlichen Datenbankfragen werden mit CRUD abgek\u00fcrzt, f\u00fcr Create, Read, Update und Delete. Das bedeutet, wir implementieren Funktionalit\u00e4ten, mit denen wir einen neuen Datensatz in die Datenbank einf\u00fcgen (create), aus der Datenbank auslesen (read), in der Datenbank aktualisieren (update) und aus der Datenbank l\u00f6schen (delete) k\u00f6nnen. </p> <p>Die Schnittstelle, die wir implementieren, ist eine sogenannte REST-API. REST steht f\u00fcr Representational State Transfer und basiert auf einigen wenigen Prinzipien:</p> <ol> <li>Alles wird als eine Ressource betrachtet, z.B. <code>book</code>.</li> <li>Jede Ressource ist durch URIs (Uniform Resource Identifiers) eindeutig identifizierbar, z.B. <code>http://localhost/books</code>.</li> <li>Es werden die Standard-HTTP-Methoden verwendet, also <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>UPDATE</code>.  </li> <li>Ressourcen k\u00f6nnen in verschiedenen Formaten vorliegen, z.B. in HTML, XML, JSON, </li> <li>Die Kommunikation ist zustandslos. Jede einzelne HTTP-Anfrage wird komplett isoliert bearbeitet. Es gibt keinerlei Anfragehistorie. </li> </ol> <p>Das bedeutet, wir erstellen ein Backend (einen REST-Server), an den HTTP-Anfragen mit der eindeutig identifizierbaren Ressource gestellt werden. Das Backend erstellt daraus die entsprechende SQL-Query. Das Resultat der Datenbankanfrage wird im <code>JSON</code>- oder <code>HTML</code>- oder <code>XML</code>- oder in einem anderen Format bereitsgestellt.</p> <p></p> <p>Prinzipiell gibt es also ein Mapping  von HTTP-Anfragen auf SQL-Anfragen:</p> CRUD SQL MongoDB HTTP create INSERT insertOne(), insertMany() POST read SELECT findOne(), find() GET update UPDATE updateOne(), updateMany() PUT (oder PATCH) delete DELETE deleteOne(), deleteMany() DELETE <p>Zur Unterscheidung zwischen <code>PUT</code> und <code>PATCH</code> siehe z.B. hier oder hier. Wir wollen uns ein Backend erstellen, \u00fcber das wir unsere Daten verwalten. Dazu \u00fcberlegen wir uns zun\u00e4chst ein paar sogenannte Endpunkte (siehe Prinzipien von REST oben) und die Zugriffsmethoden, mit denen wir auf unsere Daten zugreifen wollen.</p> \u00a0Methode \u00a0URL \u00a0Bedeutung \u00a0GET \u00a0/members \u00a0hole alle Datens\u00e4tze \u00a0GET \u00a0/members/11 hole den Datensatz mit der id=11 \u00a0POST \u00a0/members \u00a0f\u00fcge einen neuen Datensatz hinzu \u00a0PUT \u00a0/members/11 \u00a0\u00e4ndere den Datensatz mit der id=11 \u00a0DELETE \u00a0/members/11 \u00a0l\u00f6sche den Datensatz mit der id=11 \u00a0DELETE \u00a0/members \u00a0l\u00f6sche alle Datens\u00e4tze <p>Der Wert der <code>id</code> ist nat\u00fcrlich nur ein Beispiel. Es soll f\u00fcr alle <code>id</code>-Werte funktionieren, die in unserem Datensatz enthalten sind. </p>"},{"location":"backend/#ein-nodejs-projekt-mit-express","title":"Ein Node.js-Projekt mit Express","text":"<p>Wir starten damit, uns ein <code>node.js</code>-Projekt zu erstellen. Dazu erstellen wir uns zun\u00e4chst einen Ordner <code>backend</code>, wechseln in diesen Ordner und f\u00fchren dann <code>npm init</code> aus:</p> <pre><code>mkdir backend\ncd backend\nnpm init\n</code></pre> <p>Sie werden ein paar Sachen gefragt. Im Prinzip k\u00f6nnen Sie immer <code>Enter</code> dr\u00fccken:</p> <pre><code>This utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help init` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install &lt;pkg&gt;` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (backend) \nversion: (1.0.0) \ndescription: Backend REST-API\nentry point: (index.js) test command: \ngit repository: \nkeywords: restapi, backend\nauthor: J. Freiheit\nlicense: (ISC) \nAbout to write to /Users/jornfreiheit/Sites/WT21/backend/package.json:\n\n{\n\"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Backend REST-API\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n},\n  \"keywords\": [\n\"restapi\",\n    \"backend\"\n],\n  \"author\": \"J. Freiheit\",\n  \"license\": \"ISC\"\n}\n\n\nIs this OK? (yes) </code></pre> <p>Die <code>package.json</code> wurde erstellt. Nun ben\u00f6tigen wir noch das Modul Express. Express bietet uns eine unkomplizierte Middleware f\u00fcr die Weiterverwaltung von <code>http</code>-Anfragen an die Datenbank und zur\u00fcck. </p> <pre><code>npm install express --save\n</code></pre> <p>Sie erhalten eine Meldung in der Form:</p> <pre><code>% npm install express --save\n\nadded 50 packages, and audited 51 packages in 844ms\n\nfound 0 vulnerabilities\n</code></pre> <p>In der <code>package.json</code> wurde die entsprechende Abh\u00e4ngigkeit eingetragen: </p> package.json <pre><code>{\n\"name\": \"backend\",\n\"version\": \"1.0.0\",\n\"description\": \"Backend REST-API\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n},\n\"keywords\": [\n\"restapi\",\n\"backend\"\n],\n\"author\": \"J. Freiheit\",\n\"license\": \"ISC\",\n\"dependencies\": {\n\"express\": \"^4.18.2\"\n}\n}\n</code></pre> <p>\u00d6ffnen Sie nun das <code>backend</code>-Projekt in Ihrer IDE und erstellen Sie sich dort eine Datei <code>server.js</code> mit folgendem Inhalt:</p> server.js <pre><code>const express = require('express');\nconst routes = require('./routes');\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\napp.use('/', routes);\n\napp.listen(PORT, (error) =&gt; {\nif (error) {\nconsole.log(error);\n} else {\nconsole.log(`Server started and listening on port ${PORT} ... `);\n}\n});\n</code></pre> <p>Das bedeutet, wir importieren <code>express</code> (Zeile <code>1</code>), erzeugen uns davon ein Objekt und speichern dieses in der Variablen <code>app</code> (Zeile <code>4</code>). Wir legen in einer Konstanten <code>PORT</code> die Portnummer <code>3000</code> fest (Zeile <code>5</code> - die Portnummer k\u00f6nnen Sie w\u00e4hlen). Das <code>backend</code> ist somit unter <code>http://localhost:3000</code> verf\u00fcgbar. Das eigentliche Starten des Webservers erfolgt in den Zeilen <code>10-16</code> durch Aufruf der <code>listen()</code>-Funktion von <code>express</code>. Die Syntax der <code>listen()</code>-Funktion ist generell wie folgt:</p> <pre><code>app.listen([port[, host[, backlog]]][, callback])\n</code></pre> <p>Wir \u00fcbergeben als ersten Parameter die <code>PORT</code>-Nummer (<code>3000</code>) und als zweiten Parameter eine (anonyme) Funktion als sogenannten callback. Callbacks sind hier n\u00e4her erl\u00e4utert. Die anonyme Funktion wird durch die <code>listen()</code>-Funktion aufgerufen. Sollte ein Fehler aufgetreten sein (z.B. wenn der Port bereits belegt ist), wird der anonymen Funktion ein <code>error</code>-Objekt \u00fcbergeben. Ist das der Fall, wird der Fehler auf der Konsole ausgegeben. Wird der anonymen Funktion kein Objekt \u00fcbergeben, wurde der Webserver korrekt gestartet und die entsprechende Meldung erscheint auf der Konsole. </p> <p>Die Definitionsfunktion in Arrow-Notation </p> <pre><code>(error) =&gt; {\nif (error) {\nconsole.log(error);\n} else {\nconsole.log(`Server started and listening on port ${PORT} ... `);\n}\n}\n</code></pre> <p>ist \u00e4quivalent zu </p> <pre><code>function(error) {\nif (error) {\nconsole.log(error);\n} else {\nconsole.log(`Server started and listening on port ${PORT} ... `);\n}\n}\n</code></pre> <p><code>error</code> ist der Name des hier gew\u00e4hlten Parameters. Beachten Sie auch die verwendete Syntax <code>${PORT}</code> im sogenannte template literal. Beachten Sie, dass template literals nicht in einfachen (<code>'</code>) oder doppelten (<code>\"</code>) Anf\u00fchrungsstrichen stehen, sondern in <code>`</code> (backticks). </p>"},{"location":"backend/#router","title":"Router","text":"<p>Noch l\u00e4sst sich unser Programm aber nicht ausf\u00fchren. Wir ben\u00f6tigen im Projektordner noch eine Datei <code>routes.js</code>. Diese wird n\u00e4mlich in der <code>server.js</code> bereits in Zeile <code>2</code> eingebunden und in Zeile <code>8</code> verwendet. </p> routes.js <pre><code>const express = require('express');\nconst router = express.Router();\n\n// eine GET-Anfrage\nrouter.get('/', async(req, res) =&gt; {\n\nres.send({ message: \"Hello FIW!\" });\n});\n\nmodule.exports = router;\n</code></pre> <p>Beim <code>Router</code> handelt es sich um eine Middleware (siehe hier), die die Routen verwaltet und <code>request</code>-Objekte an die entsprechende Routen weiterleitet und <code>response</code>-Objekte empf\u00e4ngt. In unserer <code>routes.js</code> haben wir zun\u00e4chst eine <code>GET</code>-Anfrage implementiert (Zeile <code>5</code>). Das <code>request</code>-Objekt hei\u00dft hier <code>req</code>. Das verwenden wir aber gar nicht. Das <code>respones</code>-Objekt hei\u00dft hier <code>res</code> und wird durch die Anfrage erzeugt. Wir senden in der <code>response</code> ein JavaScript-Objekt zur\u00fcck, das einen Schl\u00fcssel <code>message</code> enth\u00e4lt. </p> <p>In der <code>server.js</code> haben wir mit <code>app.use(express.json())</code> (Zeile <code>7</code>) angegeben, dass alle JavaScript-Objekte in der <code>response</code> nach JSON umgewandelt werden sollen. Wenn nun die URL <code>localhost:3000</code> aufgerufen wird, dann wird ein <code>request</code> ausgel\u00f6st, den wir hier mit <code>Hello FIW!</code> als <code>response</code> beantworten (Zeilen <code>5-8</code>). </p> <p>Wichtig ist, dass wir <code>router</code> mit <code>module.exports</code> exportieren, damit es von anderen Modulen importiert und genutzt werden kann. Siehe dazu z.B. hier. Meine Empfehlung ist, (noch) nicht das neue ESM6-Format zu nutzen! </p> <p>Noch \"l\u00e4uft\" unser Backend aber noch nicht. Wir m\u00fcssen es erst starten. </p>"},{"location":"backend/#starten-des-projektes-und-installation-von-nodemon","title":"Starten des Projektes und Installation von nodemon","text":"<p>Das Projekt l\u00e4sst sich nun starten. Wir geben dazu im Terminal im <code>backend</code>-Ordner</p> <pre><code>node server.js\n</code></pre> <p>ein. Im Terminal erscheint </p> <pre><code>Server started and listening on port 3000 </code></pre> <p>und wenn Sie im Browser die URL <code>http://localhost:3000/</code> eingeben, wird dort</p> <p></p> <p>angezeigt. Sie k\u00f6nnen auch Postman \u00f6ffnen und <code>http://localhost:3000</code> eintragen (<code>GET</code>-Methode):</p> <p></p> <p>Wann immer wir jetzt jedoch etwas an der Implementierung \u00e4ndern, m\u00fcssen wir im Terminal zun\u00e4chst den Webserver mit </p> <pre><code>Strg-C      // bzw. Control-C\n</code></pre> <p>stoppen, um ihn dann wieder mit <code>node server.js</code> zu starten. Um das zu umgehen, gibt es das Paket nodemon. Da es nur sinnvoll w\u00e4hrend der Entwicklung eingesetzt werden kann (und sollte), installieren wir es als eine development dependency:</p> <pre><code>npm install --save-dev nodemon\n</code></pre> <p>Die <code>package.json</code> sieht daraufhin so aus:</p> package.json <pre><code>{\n\"name\": \"backend\",\n\"version\": \"1.0.0\",\n\"description\": \"Backend REST-API\",\n\"main\": \"server.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n},\n\"keywords\": [\n\"restapi\",\n\"backend\"\n],\n\"author\": \"J. Freiheit\",\n\"license\": \"ISC\",\n\"dependencies\": {\n\"express\": \"^4.18.2\"\n},\n\"devDependencies\": {\n\"nodemon\": \"^2.0.20\"\n}\n}\n</code></pre> <p>Zur Verwendung von <code>nodemon</code> f\u00fcgen wir in die <code>package.json</code> unter <code>\"scripts\"</code> noch die Eigenschaft <code>watch</code> (frei gew\u00e4hlt) und den dazugeh\u00f6rigen Wert <code>nodemon server.js</code> ein:</p> package.json <pre><code>{\n\"name\": \"backend\",\n\"version\": \"1.0.0\",\n\"description\": \"Backend REST-API\",\n\"main\": \"server.js\",\n\"scripts\": {\n\"watch\": \"nodemon ./server.js\",\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n},\n\"keywords\": [\n\"restapi\",\n\"backend\"\n],\n\"author\": \"J. Freiheit\",\n\"license\": \"ISC\",\n\"dependencies\": {\n\"express\": \"^4.18.2\"\n},\n\"devDependencies\": {\n\"nodemon\": \"^2.0.20\"\n}\n}\n</code></pre> <p>Nun l\u00e4sst sich die Anwendung mithilfe von <code>nodemon</code> per </p> <pre><code>npm run watch\n</code></pre> <p>starten und muss auch nicht mehr gestoppt und neu gestartet werden, wenn \u00c4nderungen an der Implementierungen durchgef\u00fchrt wurden. Die Ausgabe im Terminal nach Eingabe von <code>npm run watch</code> ist ungef\u00e4hr so:</p> <pre><code>&gt; backend@1.0.0 watch\n&gt; nodemon ./server.js\n\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,json\n[nodemon] starting `node ./server.js`\nServer started and listening on port 3000 ... </code></pre> <p>Hier nur zum Verst\u00e4ndnis. Angenommen, wir \u00e4ndern bspw. in der <code>server.js</code> die Zeile <code>8</code> zu </p> <pre><code>app.use('/api', routes);\n</code></pre> <p>, dann w\u00fcrden alle Routen, die wir in <code>routes.js</code> definieren, unter <code>localhost:3000/api</code> verf\u00fcgbar sein. Wenn wir dann also z.B. in der <code>routes.js</code> die Zeile <code>5</code> zu </p> <pre><code>router.get('/fiw', async(req, res) =&gt; {\n</code></pre> <p>\u00e4ndern, dann ist der GET-Endpunkt <code>localhost:3000/api/fiw</code>. </p>"},{"location":"backend/#mongoose-installieren","title":"Mongoose installieren","text":"<p>MongoDB ist die am meisten verwendete NoSQL (not only SQL) Datenbank. Sie basiert nicht auf Relationen, Tabellen und ihren Beziehungen zueinander (ist also keine relationale Datenbank), sondern speichert Dokumente in JSON-\u00e4hnlichem Format. Die Community Edition der MongoDB ist Open Source und kostenlos verf\u00fcgbar.  Sollten Sie mit Visual Studio Code arbeiten, sollten Sie sich am besten die MongoDB for VS Code-Ereiterung installieren. </p> <p>Zur Verwendung von MongoDB im Backend verwenden wir das Modul Mongoose. Wir installieren Mongoose mithilfe von</p> <pre><code>npm install mongoose --save\n</code></pre> <p>In die <code>package.json</code> wird das Paket und die entsprechende Abh\u00e4ngigkeit eingetragen:</p> package.json <pre><code>{\n\"name\": \"backend\",\n\"version\": \"1.0.0\",\n\"description\": \"Backend REST-API\",\n\"main\": \"server.js\",\n\"scripts\": {\n\"watch\": \"nodemon ./server.js\",\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n},\n\"keywords\": [\n\"restapi\",\n\"backend\"\n],\n\"author\": \"J. Freiheit\",\n\"license\": \"ISC\",\n\"dependencies\": {\n\"express\": \"^4.17.1\",\n\"mongoose\": \"^6.0.14\"\n},\n\"devDependencies\": {\n\"nodemon\": \"^2.0.15\"\n}\n}\n</code></pre> <p>Mongoose stellt eine einfach zu verwendende Schnittstelle zwischen Node.js und MongoDB bereit. Die MongoDB ben\u00f6tigen wir aber trotzdem (wir k\u00f6nnten jedoch auch eine Cloud von MongoDB oder z.B. <code>mlab.com</code> verwenden). Bevor wir uns mit der MongoDB verbinden, erstellen wir zun\u00e4chst noch eine Datenbank. </p> <p>Um Datenbanken zu erstellen, zu bef\u00fcllen, anzusehen und zu verwalten, k\u00f6nnen Sie entweder MongoDB Compass oder MongoDB Shell verwenden. Ich empfehle Compass, weil es komfortabler ist. Im Folgenden ist der etwas kompliziertere Weg mit der MongoDB Shell gezeigt. Der hat aber den Vorteil, dass man die queries sieht, die verwendet werden. </p> <p>Sollten Sie Compass verwenden, dann nennen sie Ihre Datenbank und die Collection einfach jeweils <code>members</code> und f\u00fcgen die Daten mithilfe dieser Datei ein. Das Ergebnis sieht dann so aus:</p> <p></p>"},{"location":"backend/#datenbank-erstellen","title":"Datenbank erstellen","text":"<p>Wenn <code>mongosh</code> gestartet ist, erscheint im Terminal <code>test&gt;</code>. Das bedeutet, dass Sie auf der Datenbank <code>test</code> operieren. Mit dem Befehl <code>db</code> k\u00f6nnen Sie sich die Datenbank anschauen, auf der Sie gerade operieren. Das ist zu Beginn die <code>test</code>-Datenbank. Wir wollen eine neue Datenbank <code>members</code> erstellen. Dazu nutzen wir den Befehl <code>use &lt;db&gt;</code>:</p> <pre><code>&gt; use members\n</code></pre> <p>(ohne das <code>&gt;</code> - das soll nur symbolisieren, dass wir in der MongoDB-Shell sind). Es entsteht die Datenbank <code>members</code> und es wird direkt in diese Datenbank gewechselt. </p> <pre><code>test&gt; db\ntest\ntest&gt; use members\nswitched to db members\nmembers&gt; db\nmembers\nmembers&gt; </code></pre> <p>Wir bef\u00fcllen diese Datenbank unter Verwendung des Befehls:</p> <pre><code>db.collection.insertMany(\n[ &lt;document 1&gt; , &lt;document 2&gt;, ... ]\n)\n</code></pre> <p>Dabei sind die <code>&lt;documente&gt;</code> Objekte in JavaScript Object Notation (JSON) und <code>collection</code> stellt einen Namen (\u00e4hnlich einer Tabelle in relationalen Datenbanken) dar. Insgesamt sieht der befehl mit unseren Daten so aus:</p> Daten einf\u00fcgen <pre><code>db.members.insertMany([\n    {\n     \"forename\": \"Catherine\",\n     \"surname\": \"Williams\",\n     \"email\": \"cwilliamsl@360.cn\"\n    },\n    {\n     \"forename\": \"Adam\",\n     \"surname\": \"Anderson\",\n     \"email\": \"aanderson8@google.fr\"\n    },\n    {\n     \"forename\": \"Susan\",\n     \"surname\": \"Andrews\",\n     \"email\": \"sandrewsn@google.co.jp\"\n    },\n    {\n     \"forename\": \"Catherine\",\n     \"surname\": \"Andrews\",\n     \"email\": \"candrewsp@noaa.gov\"\n    },\n    {\n     \"forename\": \"Alan\",\n     \"surname\": \"Bradley\",\n     \"email\": \"abradley1c@globo.com\"\n    },\n    {\n     \"forename\": \"Anne\",\n     \"surname\": \"Brooks\",\n     \"email\": \"abrooks16@bravesites.com\"\n    },\n    {\n     \"forename\": \"Russell\",\n     \"surname\": \"Brown\",\n     \"email\": \"rbrownq@nifty.com\"\n    },\n    {\n     \"forename\": \"Ryan\",\n     \"surname\": \"Burton\",\n     \"email\": \"rburton18@foxnews.com\"\n    },\n    {\n     \"forename\": \"Roy\",\n     \"surname\": \"Campbell\",\n     \"email\": \"rcampbell1@geocities.com\"\n    },\n    {\n     \"forename\": \"Russell\",\n     \"surname\": \"Campbell\",\n     \"email\": \"rcampbell17@eventbrite.com\"\n    },\n    {\n     \"forename\": \"Bonnie\",\n     \"surname\": \"Coleman\",\n     \"email\": \"bcoleman11@fc2.com\"\n    },\n    {\n     \"forename\": \"Ernest\",\n     \"surname\": \"Coleman\",\n     \"email\": \"ecoleman15@businessweek.com\"\n    },\n    {\n     \"forename\": \"Richard\",\n     \"surname\": \"Cruz\",\n     \"email\": \"rcruz7@unc.edu\"\n    },\n    {\n     \"forename\": \"Sean\",\n     \"surname\": \"Cruz\",\n     \"email\": \"scruz10@answers.com\"\n    },\n    {\n     \"forename\": \"Rebecca\",\n     \"surname\": \"Cunningham\",\n     \"email\": \"rcunninghamd@mac.com\"\n    },\n    {\n     \"forename\": \"Margaret\",\n     \"surname\": \"Evans\",\n     \"email\": \"mevansh@pcworld.com\"\n    },\n    {\n     \"forename\": \"Jeffrey\",\n     \"surname\": \"Ford\",\n     \"email\": \"jford14@cnet.com\"\n    },\n    {\n     \"forename\": \"Andrea\",\n     \"surname\": \"Gardner\",\n     \"email\": \"agardnerv@woothemes.com\"\n    },\n    {\n     \"forename\": \"Deborah\",\n     \"surname\": \"George\",\n     \"email\": \"dgeorge6@furl.net\"\n    },\n    {\n     \"forename\": \"Sean\",\n     \"surname\": \"Gibson\",\n     \"email\": \"sgibsony@alexa.com\"\n    },\n    {\n     \"forename\": \"Virginia\",\n     \"surname\": \"Graham\",\n     \"email\": \"vgrahamk@aol.com\"\n    },\n    {\n     \"forename\": \"Steven\",\n     \"surname\": \"Hamilton\",\n     \"email\": \"shamiltonu@state.tx.us\"\n    },\n    {\n     \"forename\": \"Virginia\",\n     \"surname\": \"Hawkins\",\n     \"email\": \"vhawkinsf@ehow.com\"\n    },\n    {\n     \"forename\": \"Edward\",\n     \"surname\": \"Hicks\",\n     \"email\": \"ehicksc@pcworld.com\"\n    },\n    {\n     \"forename\": \"Mark\",\n     \"surname\": \"Johnson\",\n     \"email\": \"mjohnsonj@hostgator.com\"\n    },\n    {\n     \"forename\": \"Ruth\",\n     \"surname\": \"Jordan\",\n     \"email\": \"rjordan1a@smugmug.com\"\n    },\n    {\n     \"forename\": \"Antonio\",\n     \"surname\": \"Kim\",\n     \"email\": \"akim4@odnoklassniki.ru\"\n    },\n    {\n     \"forename\": \"Jennifer\",\n     \"surname\": \"Marshall\",\n     \"email\": \"jmarshallt@gnu.org\"\n    },\n    {\n     \"forename\": \"Eric\",\n     \"surname\": \"Matthews\",\n     \"email\": \"ematthews5@independent.co.uk\"\n    },\n    {\n     \"forename\": \"Raymond\",\n     \"surname\": \"Mcdonald\",\n     \"email\": \"rmcdonald2@ihg.com\"\n    },\n    {\n     \"forename\": \"Eric\",\n     \"surname\": \"Miller\",\n     \"email\": \"emillere@creativecommons.org\"\n    },\n    {\n     \"forename\": \"Jonathan\",\n     \"surname\": \"Morales\",\n     \"email\": \"jmoralesa@ovh.net\"\n    },\n    {\n     \"forename\": \"Marie\",\n     \"surname\": \"Morgan\",\n     \"email\": \"mmorganb@cloudflare.com\"\n    },\n    {\n     \"forename\": \"Amanda\",\n     \"surname\": \"Nelson\",\n     \"email\": \"anelson13@indiatimes.com\"\n    },\n    {\n     \"forename\": \"Lisa\",\n     \"surname\": \"Olson\",\n     \"email\": \"lolsonr@telegraph.co.uk\"\n    },\n    {\n     \"forename\": \"Alice\",\n     \"surname\": \"Ortiz\",\n     \"email\": \"aortizw@histats.com\"\n    },\n    {\n     \"forename\": \"Peter\",\n     \"surname\": \"Phillips\",\n     \"email\": \"pphillipss@1688.com\"\n    },\n    {\n     \"forename\": \"Matthew\",\n     \"surname\": \"Porter\",\n     \"email\": \"mporter9@europa.eu\"\n    },\n    {\n     \"forename\": \"Tammy\",\n     \"surname\": \"Ray\",\n     \"email\": \"trayx@weather.com\"\n    },\n    {\n     \"forename\": \"Mark\",\n     \"surname\": \"Richardson\",\n     \"email\": \"mrichardson1d@ihg.com\"\n    },\n    {\n     \"forename\": \"Joan\",\n     \"surname\": \"Roberts\",\n     \"email\": \"jroberts12@alibaba.com\"\n    },\n    {\n     \"forename\": \"Kathleen\",\n     \"surname\": \"Rose\",\n     \"email\": \"kroseg@pinterest.com\"\n    },\n    {\n     \"forename\": \"Steve\",\n     \"surname\": \"Sanders\",\n     \"email\": \"ssanders1b@wikispaces.com\"\n    },\n    {\n     \"forename\": \"Shirley\",\n     \"surname\": \"Scott\",\n     \"email\": \"sscottm@macromedia.com\"\n    },\n    {\n     \"forename\": \"Lillian\",\n     \"surname\": \"Stephens\",\n     \"email\": \"lstephens19@hugedomains.com\"\n    },\n    {\n     \"forename\": \"Nicole\",\n     \"surname\": \"Thompson\",\n     \"email\": \"nthompson3@admin.ch\"\n    },\n    {\n     \"forename\": \"Marie\",\n     \"surname\": \"Thompson\",\n     \"email\": \"mthompsonz@yelp.com\"\n    },\n    {\n     \"forename\": \"Alan\",\n     \"surname\": \"Vasquez\",\n     \"email\": \"avasquezo@miibeian.gov.cn\"\n    },\n    {\n     \"forename\": \"Mildred\",\n     \"surname\": \"Watkins\",\n     \"email\": \"mwatkins0@miibeian.gov.cn\"\n    },\n    {\n     \"forename\": \"Eugene\",\n     \"surname\": \"Williams\",\n     \"email\": \"ewilliamsi@deliciousdays.com\"\n    }\n ])\n</code></pre> <p>Im Terminal erscheint eine Ausgabe in der folgenden Form:</p> Ausgabe im Terminal <pre><code>{\n  acknowledged: true,\n  insertedIds: {\n    '0': ObjectId(\"61af491bfef87d1bebfa13d4\"),\n    '1': ObjectId(\"61af491bfef87d1bebfa13d5\"),\n    '2': ObjectId(\"61af491bfef87d1bebfa13d6\"),\n    '3': ObjectId(\"61af491bfef87d1bebfa13d7\"),\n    '4': ObjectId(\"61af491bfef87d1bebfa13d8\"),\n    '5': ObjectId(\"61af491bfef87d1bebfa13d9\"),\n    '6': ObjectId(\"61af491bfef87d1bebfa13da\"),\n    '7': ObjectId(\"61af491bfef87d1bebfa13db\"),\n    '8': ObjectId(\"61af491bfef87d1bebfa13dc\"),\n    '9': ObjectId(\"61af491bfef87d1bebfa13dd\"),\n    '10': ObjectId(\"61af491bfef87d1bebfa13de\"),\n    '11': ObjectId(\"61af491bfef87d1bebfa13df\"),\n    '12': ObjectId(\"61af491bfef87d1bebfa13e0\"),\n    '13': ObjectId(\"61af491bfef87d1bebfa13e1\"),\n    '14': ObjectId(\"61af491bfef87d1bebfa13e2\"),\n    '15': ObjectId(\"61af491bfef87d1bebfa13e3\"),\n    '16': ObjectId(\"61af491bfef87d1bebfa13e4\"),\n    '17': ObjectId(\"61af491bfef87d1bebfa13e5\"),\n    '18': ObjectId(\"61af491bfef87d1bebfa13e6\"),\n    '19': ObjectId(\"61af491bfef87d1bebfa13e7\"),\n    '20': ObjectId(\"61af491bfef87d1bebfa13e8\"),\n    '21': ObjectId(\"61af491bfef87d1bebfa13e9\"),\n    '22': ObjectId(\"61af491bfef87d1bebfa13ea\"),\n    '23': ObjectId(\"61af491bfef87d1bebfa13eb\"),\n    '24': ObjectId(\"61af491bfef87d1bebfa13ec\"),\n    '25': ObjectId(\"61af491bfef87d1bebfa13ed\"),\n    '26': ObjectId(\"61af491bfef87d1bebfa13ee\"),\n    '27': ObjectId(\"61af491bfef87d1bebfa13ef\"),\n    '28': ObjectId(\"61af491bfef87d1bebfa13f0\"),\n    '29': ObjectId(\"61af491bfef87d1bebfa13f1\"),\n    '30': ObjectId(\"61af491bfef87d1bebfa13f2\"),\n    '31': ObjectId(\"61af491bfef87d1bebfa13f3\"),\n    '32': ObjectId(\"61af491bfef87d1bebfa13f4\"),\n    '33': ObjectId(\"61af491bfef87d1bebfa13f5\"),\n    '34': ObjectId(\"61af491bfef87d1bebfa13f6\"),\n    '35': ObjectId(\"61af491bfef87d1bebfa13f7\"),\n    '36': ObjectId(\"61af491bfef87d1bebfa13f8\"),\n    '37': ObjectId(\"61af491bfef87d1bebfa13f9\"),\n    '38': ObjectId(\"61af491bfef87d1bebfa13fa\"),\n    '39': ObjectId(\"61af491bfef87d1bebfa13fb\"),\n    '40': ObjectId(\"61af491bfef87d1bebfa13fc\"),\n    '41': ObjectId(\"61af491bfef87d1bebfa13fd\"),\n    '42': ObjectId(\"61af491bfef87d1bebfa13fe\"),\n    '43': ObjectId(\"61af491bfef87d1bebfa13ff\"),\n    '44': ObjectId(\"61af491bfef87d1bebfa1400\"),\n    '45': ObjectId(\"61af491bfef87d1bebfa1401\"),\n    '46': ObjectId(\"61af491bfef87d1bebfa1402\"),\n    '47': ObjectId(\"61af491bfef87d1bebfa1403\"),\n    '48': ObjectId(\"61af491bfef87d1bebfa1404\"),\n    '49': ObjectId(\"61af491bfef87d1bebfa1405\")\n  }\n}\nmembers&gt;\n</code></pre> <p>Die Datenbank <code>members</code> existiert nun und ist mit Daten bef\u00fcllt. Wir k\u00f6nnen uns z.B. alle diese Daten mit </p> <pre><code>db.members.find()\n</code></pre> <p>anzeigen lassen oder z.B. mit </p> <pre><code>db.members.find( { forename: \"Sean\" } )\n</code></pre> <p>alle Eintr\u00e4ge anzeigen lassen, in denen <code>forename</code> den Wert <code>'Sean'</code> hat:</p> <pre><code>[\n{\n_id: ObjectId(\"61af491bfef87d1bebfa13e1\"),\n    forename: 'Sean',\n    surname: 'Cruz',\n    email: 'scruz10@answers.com'\n},\n  {\n_id: ObjectId(\"61af491bfef87d1bebfa13e7\"),\n    forename: 'Sean',\n    surname: 'Gibson',\n    email: 'sgibsony@alexa.com'\n}\n]\nmembers&gt; </code></pre>"},{"location":"backend/#mongodb-in-vscode","title":"MongoDB in VSCode","text":"<p>Falls Sie Visual Studio Code verwenden und darin die MongoDB for VS Code-Erweiterung installiert haben, k\u00f6nnen Sie auf der linken Seite auf das MongoDB-Blatt klicken und das <code>Advanced Connection Settings</code> mit dem Formular <code>Open form</code> anklicken.</p> <p>Sie geben <code>mongodb://127.0.0.1:27017</code> ein und dass Sie keine Authentifizierung verwenden. \u00d6ffnen Sie die <code>connection</code> und darin <code>members</code> und es erscheint</p> <p></p> <p>Um sich in Node.js mit der MongoDB zu verbinden, geben Sie </p> server.js <pre><code>const express = require('express');\nconst routes = require('./routes');\nconst mongoose = require('mongoose');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\napp.use('/', routes);\n\n// connect to mongoDB\nmongoose.connect('mongodb+srv://&lt;username&gt;:&lt;passwort&gt;@cluster0.g3nbd.mongodb.net', { dbName: 'members' });\nconst db = mongoose.connection;\ndb.on('error', err =&gt; {\nconsole.log(err);\n});\ndb.once('open', () =&gt; {\nconsole.log('connected to DB');\n});\napp.listen(PORT, (error) =&gt; {\nif (error) {\nconsole.log(error);\n} else {\nconsole.log(`Server started and listening on port ${PORT} ... `);\n}\n});\n</code></pre> <p>ein. Sie m\u00fcssen nat\u00fcrlich Ihren Nutzerinnennamen und Ihr Passwort einsetzen. Sollten Sie eine MongoDB lokal installiert haben, dann verbinden Sie sich mit <code>mongodb://127.0.0.1:27017</code> (bzw. <code>mongodb://127.0.0.1:27017/members</code>). Im Terminal sollte dann</p> <pre><code>[nodemon] restarting due to changes...\n[nodemon] starting `node ./server.js`\nServer started and listening on port 3000 ...\nconnected to DB\n</code></pre> <p>erscheinen. </p>"},{"location":"backend/#dotenv-fur-sichere-zugangsdaten","title":"Dotenv f\u00fcr sichere Zugangsdaten","text":"<p>F\u00fcr die \"geheimen\" Zugangsdaten (die jetzt noch gar nicht \"geheim\" sind) verwenden wir das dotenv-Paket:</p> <pre><code>npm install dotenv --save\n</code></pre> <p>Im Projektordner erstellen wir und eine Datei <code>.env</code> (mit Punkt!) und schreiben darin entweder f\u00fcr die lokale MongoDB</p> .env <pre><code>DB_CONNECTION = mongodb://127.0.0.1:27017/members\n</code></pre> <p>oder f\u00fcr die Atlas-Verbindung</p> .env <pre><code>DB_CONNECTION = mongodb+srv://&lt;username&gt;:&lt;passwort&gt;@cluster0.g3nbd.mongodb.net\nDATABASE = members\n</code></pre> <p>Beachten Sie, dass der Wert nicht in Hochkomma steht und dass auch kein Semikolon folgt!  Wir f\u00fcgen <code>dotenv</code> n die <code>server.js</code> ein und greifen mithilfe von <code>process.env.DB_CONNECTION</code> auf den Wert von <code>DB_CONNECTION</code> zu (und mit <code>process.env.DATEBASE</code> auf den Wert von <code>DATABASE</code>) :</p> server.js <pre><code>const express = require('express');\nconst routes = require('./routes');\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\napp.use('/', routes);\n\n// connect to mongoDB\nmongoose.connect(process.env.DB_CONNECTION, { dbName: process.env.DATABASE });\nconst db = mongoose.connection;\ndb.on('error', err =&gt; {\nconsole.log(err);\n});\ndb.once('open', () =&gt; {\nconsole.log('connected to DB');\n});\n\napp.listen(PORT, (error) =&gt; {\nif (error) {\nconsole.log(error);\n} else {\nconsole.log(`Server started and listening on port ${PORT} ... `);\n}\n});\n</code></pre> <p>In Zeil <code>3</code> wird das <code>dotenv</code>-Paket importiert. Mithilfe der <code>config()</code>-Funktion wird die <code>.env</code>-datei eingelesen. Auf die in der <code>.env</code>-Datei hinterlegten Schl\u00fcssel-Werte-Paare (mit <code>=</code> dazwischen) kann dann mittels <code>process.env.&lt;Schl\u00fcssel&gt;</code> zugegriffen werden (siehe Zeile <code>14</code>). </p> <p>Beachten Sie, die <code>.env</code>-Datei in die <code>.gitignore</code> einzutragen. Die <code>.env</code>-Datei sollte nicht committed werden!</p>"},{"location":"backend/#ein-model-erstellen","title":"Ein Model erstellen","text":"<p>Mongoose ist Schema-basiert. Ein Schema kann man sich wie ein Datenmodell vorstellen. Tats\u00e4chlich wird es verwendet, um ein entsprechendes Mongoose-Model zu erstellen. Ein Schema wird unter Aufruf des Konstruktors (<code>new Schema()</code>) in Mongoose erstellt. Unter Verwendung des Schemas wird dann mithilfe der <code>model()</code>-Funktion das Datenmodell erzeugt. </p> <p>Wir werden im Folgenden zeigen, wie ein Schema f\u00fcr <code>members</code> erstellt wird. Das Datenmodell hei\u00dft dann <code>Member</code>. Um sp\u00e4ter auch weitere Schemata, z.B. f\u00fcr <code>user</code> o.\u00e4. zu entwicklen und diese zu trennen, erstellen wir das Schema in einem eigenen Ordner <code>models</code>. Das bedeutet, wir erstellen im Projektordner </p> <ul> <li>ein Ordner <code>models</code> und</li> <li>darin eine Datei <code>models/members.js</code></li> </ul> <p>Die Datei <code>members.js</code> bekommt folgenden Inhalt:</p> models/members.js <pre><code>const mongoose = require('mongoose');\n\nconst schema = new mongoose.Schema({\nfirstname: String,\nlastname: String,\nemail: String,\nipaddress: String\n});\n\nmodule.exports = mongoose.model('Member', schema);\n</code></pre> <p>Weiterf\u00fchrende Informationen zu Mongoose-Models finden Sie z.B. hier. Das Thema Schema wird z.B. hier n\u00e4her erl\u00e4utert. </p>"},{"location":"backend/#zugriffe-auf-die-datenbank","title":"Zugriffe auf die Datenbank","text":"<p>Nun haben wir alles, was wir ben\u00f6tigen, um unsere Anfragen zu implementieren. Wir nutzen den <code>express.Router</code>, um die Routen zu definieren und k\u00f6nnen mithilfe des Mongoose-Models auf die MongoDB zugreifen. Wir werden nun sukzessive alle Anfragen in die <code>routes.js</code> einf\u00fcgen. </p>"},{"location":"backend/#r-read-all","title":"R - read all","text":"<p>Wir beginnen mit der Anfrage, alle Daten aus der Datenbank auszulesen. F\u00fcr die MongoDB erfolgt dies mit der Funktion <code>find()</code>. In <code>routes.js</code> \u00e4ndern wir unsere <code>GET</code>-Anfrage wie folgt: </p> routes.js <pre><code>const express = require('express');\nconst router = express.Router();\nconst Member = require('./models/members');\n// get all members\nrouter.get('/members', async(req, res) =&gt; {\nconst allMembers = await Member.find();\nconsole.log(allMembers);\nres.send(allMembers);\n});\nmodule.exports = router;\n</code></pre> <p>Beachten Sie, dass wir dazu nun das <code>Member</code>-Model in die <code>routes.js</code> einbinden (Zeile <code>3</code>). Die Route wird mit <code>localhost:3000/members</code> definiert. Die anonyme Callback-Funktion enth\u00e4lt noch zwei Schl\u00fcsselw\u00f6rter: <code>async</code> und <code>await</code>. Die Funktion <code>find()</code> ist ein sogenanntes Promise (siehe dazu hier). Die Funktion <code>find()</code> wird asynchron ausgef\u00fchrt und \"irgendwann\" ist entweder das Ergebnis dieser Funktion verf\u00fcgbar oder die Funktion gibt einen Fehler zur\u00fcck. Auf eines der beiden wird gewartet (<code>await</code>). Nur eine als <code>async</code> deklarierte Funktion darf einen <code>await</code>-Aufruf enthalten (siehe dazu z.B. hier).</p> <p>Die Ausgabe der Werte auf die Konsole (Zeile <code>8</code>) ist nat\u00fcrlich nicht erforderlich und Sie k\u00f6nnen sie auch l\u00f6schen, wenn Sie wollen. Wenn Sie nun in Postman <code>GET http://localhost:3000/members</code> aufrufen, erscheinen alle Eintr\u00e4ge aus der Datenbank:</p> <p></p>"},{"location":"backend/#c-create","title":"C - create","text":"<p>Als n\u00e4chstes implementieren wir einen Endpunkt, an dem wir einen neuen Datensatz in die Datenbank anlegen k\u00f6nnen. Daf\u00fcr gibt es die http-Methode <code>POST</code>. Wir f\u00fchren also nicht mehr eine <code>GET</code>-, sondern eine <code>POST</code>-Anfrage durch. Bei dieser <code>POST</code>-Anfrage wird der neue Datensatz an den Webserver mitgeschickt. Dies erfolgt im <code>body</code> des <code>request</code>-Objektes. Das Schreiben des Datensatzes in die Datenbank erfolgt mithilfe der <code>save()</code>-Funktion von MongoDB. </p> routes.js <pre><code>// post one member\nrouter.post('/members', async(req, res) =&gt; {\nconst newMember = new Member({\nfirstname: req.body.firstname,\nlastname: req.body.lastname,\nemail: req.body.email,\nipaddress: req.body.ipaddress\n})\nawait newMember.save();\nres.send(newMember);\n});\n</code></pre> <p>In den Zeilen <code>15-17</code> werden die Daten aus dem <code>body</code> des <code>request</code>-Objektes ausgelesen und mit diesen Daten ein neues <code>Member</code>-Objekt erzeugt. Dieses neue <code>Member</code>-Objekt (<code>newMember</code>) wird in Zeile <code>19</code> in die Datenbank gespeichert und in Zeile <code>20</code> als <code>response</code> zur\u00fcckgeschickt.  </p> <p>Nun geben wir in Postman <code>POST http://localhost:3000/members</code> ein und bef\u00fcllen den <code>Body</code> z.B. mit:</p> <pre><code>{\n\"firstname\": \"Maria\",\n\"lastname\": \"Musterfrau\",\n\"email\": \"maria@musterfrau.fr\",\n\"ipaddress\": \"146.146.11.46\"\n}\n</code></pre> <p>Achten Sie darauf, dass in der zweiten Men\u00fczeile rechts <code>JSON</code> ausgew\u00e4hlt ist (im Bild blau) - nicht <code>Text</code>. Wir klicken auf <code>Send</code> und es erscheint:</p> <p></p> <p>Schauen Sie auch in Compass nach, ob der Datensatz dort erscheint:</p> <p></p>"},{"location":"backend/#r-read-one","title":"R - read one","text":"<p>Wir erweitern die <code>routes.js</code> um einen Endpunkt, der uns f\u00fcr eine gegebene <code>id</code> den entsprechenden Datensatz zur\u00fcckliefert. Die <code>_id</code> werden von MongoDB automatisch vergeben und sind recht kryptisch, also z.B. <code>\"61b0e4fcc050789546f979d3\"</code>. Wir k\u00f6nnen nat\u00fcrlich nach jedem beliebigen Wert f\u00fcr jeden Schl\u00fcssel in der Datenbank suchen. Wir nehmen hier beispielhaft die <code>_id</code>. </p> <p>Die <code>id</code> wird aus der URL des Endpunktes ausgelesen, d.h. wenn wir bspw. den Endpunkt <code>GET http://localhost:3000/members/61b0e4fcc050789546f979d3</code> eingeben, dann soll der Datensatz mit der <code>_id: 61b0e4fcc050789546f979d3</code> im JSON-Format zur\u00fcckgegeben werden. Wir nutzen dazu parametrisierte Routen und lesen die <code>id</code> aus der Parameterliste aus. Paremtrisierte Routen werden per <code>:</code> und dann den Namen des Parameters (hier <code>id</code>) erstellt. Um dann den Wert des Parametrs <code>id</code> aus der Parameterliste auszulesen, wird <code>params</code> verwendet. Im folgenden Code lassen wir <code>req.params</code> auf die Konsole ausgeben, um die Funktionsweise zu erl\u00e4utern. Diese Ausgabe kann nat\u00fcrlich gel\u00f6scht werden (Zeile <code>27</code>). </p> routes.js <pre><code>// get one member via id\nrouter.get('/members/:id', async(req, res) =&gt; {\nconst member = await Member.findOne({ _id: req.params.id });\nconsole.log(req.params);\nif(member) {\nres.send(member);\n} else {\nres.status(404);\nres.send({\nerror: \"Member does not exist!\"\n});\n}\n})\n</code></pre> <p>Zum Finden eines einzelnen Datensatzes wird in MongoDB die Funktion <code>findOne()</code> verwendet (siehe hier). Wird der Datensatz gefunden, d.h. existiert die entsprechende <code>_id</code>, dann wird dieser in der <code>response</code> zur\u00fcckgesendet (Zeile <code>28</code>). Existiert er nicht, wird der HTTP-Statuscode <code>404</code> gesendet (Zeile <code>30</code>) und ein JSON mit der <code>error</code>-Nachricht <code>Member does not exist!</code> (Zeile <code>31</code>). </p> <p>Nach Neustart des Servers geben wir in Postman z.B. <code>GET http://localhost:3000/members/639a0121ff0ff0884ce0dd24</code> ein (bei Ihnen sind die <code>_id</code>-Werte andere!) und erhalten:</p> <p></p> <p>Probieren Sie auch einmal <code>GET http://localhost:3000/members/0</code> aus, um die Fehlermeldung als JSON zu sehen. </p>"},{"location":"backend/#u-update","title":"U - update","text":"<p>Um einen bereits existierenden Datensatz zu \u00e4ndern, kann entweder die HTTP-Anfrage <code>PUT</code> oder <code>PATCH</code> verwendet werden. Zur Unterscheidung zwischen <code>PUT</code> und <code>PATCH</code> siehe z.B. hier oder hier. Um einen Datensatz in der MongoDB zu \u00e4ndern, stehen prinzipiell mehrere Funktionen zur Verf\u00fcging:</p> <ul> <li><code>updateOne()</code>: \u00e4ndert einzelne (oder alle) Teile eines Datensatzes und sendet die <code>_id</code> zur\u00fcck, falls ein neur Datensatz angelegt wurde,</li> <li><code>findOneAndUpdate()</code>: \u00e4ndert einzelne (oder alle) Teile eines Datensatzes und sendet den kompletten Datensatz zur\u00fcck,</li> <li><code>replaceOne()</code>: \u00e4ndert den kompletten Datensatz. </li> </ul> <p>In der folgenden Implementierung haben wir uns f\u00fcr die HTTP-Anfragemethode <code>PATCH</code> und f\u00fcr die MongoDB-Funktion <code>updateOne()</code> entschieden. Diese Funktion erwartet als ersten Parameter einen <code>&lt;filter&gt;</code>, d.h. die Werte, nach denen nach einem Datensatz gesucht werden soll. Im folgenden Beispiel ist der Filter die <code>_id</code>. Dazu wird erneute ein Parameter <code>id</code> f\u00fcr die URL definiert. Der zweite Parameter der <code>updateOne()</code>-Funktion sind die zu \u00e4ndernden Werte f\u00fcr diesen Datensatz. In der folgenden Implementierung werden diese zu \u00e4ndernden Werte als ein JSON dem <code>body</code> des <code>request</code>-Objektes \u00fcbergeben. Um zu erm\u00f6glichen, dass ein, zwei oder drei Schl\u00fcssel-Werte-Paare in diesem JSON enthalten sein k\u00f6nnen, pr\u00fcfen wir die Eintr\u00e4ge im <code>body</code> und setzen daraus ein neues <code>member</code>-Objekt zusammen, wenn es bereits in der Datenbank existiert (deshalb zun\u00e4chst <code>findOne()</code>):</p> router.js <pre><code>// update one member\nrouter.patch('/members/:id', async(req, res) =&gt; {\ntry {\nconst member = await Member.findOne({ _id: req.params.id })\n\nif (req.body.firstname) {\nmember.firstname = req.body.firstname\n}\n\nif (req.body.lastname) {\nmember.lastname = req.body.lastname\n}\n\nif (req.body.email) {\nmember.email = req.body.email\n}\n\nif (req.body.ipaddress) {\nmember.ipaddress = req.body.ipaddress\n}\n\nawait Member.updateOne({ _id: req.params.id }, member);\nres.send(member)\n} catch {\nres.status(404)\nres.send({ error: \"Member does not exist!\" })\n}\n});\n</code></pre> <p>Wir k\u00f6nnen diese Funktion in Postman ausprobieren, indem wir im <code>body</code> z.B. das JSON </p> <pre><code>{\n\"lastname\": \"Mustermann\",\n\"email\": \"maria@mustermann.fr\"\n}\n</code></pre> <p>mit unserem Request \u00fcbergeben und <code>PATCH http://localhost:3000/members/639a0121ff0ff0884ce0dd24</code> w\u00e4hlen (bei Ihnen eine andere <code>id</code>!). Der Datensatz mit der <code>_id=639a0121ff0ff0884ce0dd24</code> wird dann aktualisiert. </p> <p>Vor Ausf\u00fchrung der Anfrage:</p> <p></p> <p>Nach Ausf\u00fchrung der Anfrage:</p> <p></p> <p>Schauen Sie auch in der Datenbank nach (z.B. in VSCode) und w\u00e4hlen auch ruhig nochmal <code>GET http://localhost:3000/members</code> (z.B. in Postman).</p>"},{"location":"backend/#d-delete-one","title":"D - delete one","text":"<p>Jetzt implementieren wir noch den Endpunkt, um einen Datensatz zu l\u00f6schen. Dazu werden die HTTP-Anfragemethode <code>DELETE</code> und die MongoDB-Funktion <code>deleteOne()</code> verwendet. Im folgenden Beispiel wird der Datensatz erneut \u00fcber die <code>_id</code> ermittelt und daf\u00fcr erneut die parametrisierte URL ausgelesen:</p> routes.js <pre><code>// delete one member via id\nrouter.delete('/members/:id', async(req, res) =&gt; {\ntry {\nawait Member.deleteOne({ _id: req.params.id })\nres.status(204).send()\n} catch {\nres.status(404)\nres.send({ error: \"Member does not exist!\" })\n}\n});\n</code></pre> <p>Wenn wir nun in Postman z.B. <code>DELETE http://localhost:3000/members/639a0121ff0ff0884ce0dd24</code> w\u00e4hlen (bei Ihnen eine andere <code>id</code>!), wird der Datensatz mit der <code>_id=639a0121ff0ff0884ce0dd24</code> aus der Datenbank gel\u00f6scht. </p> <p>Hier nochmal die vollst\u00e4ndige <code>routes.js</code>:</p> routes.js <pre><code>const express = require('express');\nconst router = express.Router();\nconst Member = require('./models/members');\n\n// get all members\nrouter.get('/members', async(req, res) =&gt; {\nconst allMembers = await Member.find();\nconsole.log(allMembers);\nres.send(allMembers);\n});\n\n// post one member\nrouter.post('/members', async(req, res) =&gt; {\nconst newMember = new Member({\nfirstname: req.body.firstname,\nlastname: req.body.lastname,\nemail: req.body.email,\nipaddress: req.body.ipaddress\n})\nawait newMember.save();\nres.send(newMember);\n});\n\n// get one member via id\nrouter.get('/members/:id', async(req, res) =&gt; {\nconst member = await Member.findOne({ _id: req.params.id });\nconsole.log(req.params);\nif(member) {\nres.send(member);\n} else {\nres.status(404);\nres.send({\nerror: \"Member does not exist!\"\n});\n}\n})\n\n// update one member\nrouter.patch('/members/:id', async(req, res) =&gt; {\ntry {\nconst member = await Member.findOne({ _id: req.params.id })\n\nif (req.body.firstname) {\nmember.firstname = req.body.firstname\n}\n\nif (req.body.lastname) {\nmember.lastname = req.body.lastname\n}\n\nif (req.body.email) {\nmember.email = req.body.email\n}\n\nif (req.body.ipaddress) {\nmember.ipaddress = req.body.ipaddress\n}\n\nawait Member.updateOne({ _id: req.params.id }, member);\nres.send(member)\n} catch {\nres.status(404)\nres.send({ error: \"Member does not exist!\" })\n}\n});\n\n// delete one member via id\nrouter.delete('/members/:id', async(req, res) =&gt; {\ntry {\nawait Member.deleteOne({ _id: req.params.id })\nres.status(204).send()\n} catch {\nres.status(404)\nres.send({ error: \"Member does not exist!\" })\n}\n});\n\nmodule.exports = router;\n</code></pre> <p>Success</p> <p>Wir haben unser Backend erfolgreich als REST-Server implementiert, der alle CRUD-Funktionalit\u00e4ten umsetzt. Wir werden im n\u00e4chsten Schritt das Frontend nun so gestalten, dass es auf die REST-API zugreift und das Backend f\u00fcr die Datenverwaltung verwendet. </p>"},{"location":"backend/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>Die Same Origin Policy (SOP) ist ein Sicherheitskonzept, das clientseitig Skriptsprachen (also z.B. JavaScript oder CSS) untersagt, Ressourcen aus verschiedenen Herkunften zu verwenden, also von verschiedenen Servern. Dadurch soll verhindert werden, dass fremde Skripte in die bestehende Client-Server-Kommunikation eingeschleust werden. Gleiche Herkunft (origin) bedeutet, dass das gleiche Protokoll (z.B. <code>http</code> oder <code>https</code>), von der gleichen Domain (z.B. <code>localhost</code> oder <code>htw-berlin</code>) sowie dem gleichen Port (z.B. <code>80</code> oder <code>4200</code>) verwendet werden. Es m\u00fcssen alle drei Eigenschaften \u00fcbereinstimmen. </p> <p>Mit dem Aufkommen von Single Page Applications und dem darin ben\u00f6tigten AJAX kam jedoch der Bedarf auf, die SOP aufzuweichen. Es sollte m\u00f6glich sein, dass z.B. JavaScript sowohl client-seitig das DOM \u00e4ndert als auch einen Request an den Server (das Backend) sendet. Der Kompromiss, der daf\u00fcr gefunden wurde, nennt sich Cross-Origin Resource Sharing (CORS). Damit ist es m\u00f6glich, f\u00fcr einige oder alle Anfragen zu definieren, dass sie im Sinne der SOP trotzdem erlaub sein sollen. </p> <p>Um CORS f\u00fcr Ihr Backend zu aktivieren, wechseln Sie im Terminal in Ihren <code>backend</code>-Ordner und geben dort</p> <pre><code>npm install cors\n</code></pre> <p>ein. \u00d6ffnen Sie dann die <code>server.js</code> und f\u00fcgen Sie die hervorgehobenen Zeilen ein:</p> server.js <pre><code>const express = require('express');\nconst cors = require('cors');\nconst routes = require('./routes');\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\n// enable cors for all requests\napp.use(cors());\napp.use('/', routes);\n\n// connect to mongoDB\nmongoose.connect(process.env.DB_CONNECTION, { dbName: process.env.DATABASE });\nconst db = mongoose.connection;\ndb.on('error', err =&gt; {\nconsole.log(err);\n});\ndb.once('open', () =&gt; {\nconsole.log('connected to DB');\n});\n\napp.listen(PORT, (error) =&gt; {\nif (error) {\nconsole.log(error);\n} else {\nconsole.log(`Server started and listening on port ${PORT} ... `);\n}\n});\n</code></pre> <p>Wenn Sie z.B. nur die <code>get</code>-Anfrage teilen wollen, dann w\u00e4hlen Sie nicht <code>app.use(cors());</code>, sondern </p> <pre><code>app.get(\"/\", cors(), (req, res) =&gt; {\nres.json({ message: \"Hello FIW!\" });\n});\n</code></pre> <p>Mehr zum CORS-Paket von node.js bzw. express finden Sie hier.</p>"},{"location":"css/","title":"CSS","text":"<p>Cascading Style Sheets werden verwendet, um</p> <ul> <li>dem HTML-Dokument einen ansprechenden Stil (Font, Farben, ...) zuzuweisen,</li> <li>das Layout des HTML-Dokumentes zu definieren (3-Spalten-Layout, 2-Spalten-Layout, Kopf- und Fu\u00dfzeile, ...)</li> <li>das Layout responsive zu gestalten, d.h. unterschiedliche Ansichten des HTML-Dokumentes zu definieren, je nach Bildschirmgr\u00f6\u00dfe (Mobile, Tablet, Desktop)</li> </ul> <p>Generell gilt, dass wir mit HTML ausschlie\u00dflich die Inhalte definieren, das Design jedoch mit CSS. Sehen wir uns dazu folgendes erstes Beispiel an:</p> <p>In obigem Beispiel werden f\u00fcr die HTML-Elemente, die in unserem HTML-Doument verwendet werden, unterschiedliche CSS-Eigenschaften definiert. Die generelle Syntax f\u00fcr CSS-Eigenschaften ist:</p> <pre><code>selektor {\neigenschaft: wert;\n}\n</code></pre> <p>So wird in obigem Beispiel f\u00fcr das HTML-Element <code>body</code> der Eigenschaft <code>font-family</code> der Wert <code>verdana</code> zugeordnet. Somit ist der gesamte Text in <code>&lt;body&gt;</code> in der Schriftart <code>Verdana</code>. Dies gilt auch f\u00fcr alle Elemente, die hierarchisch \"unter\" <code>&lt;body&gt;</code> angesiedelt sind, also alle <code>&lt;h1&gt;</code>-, <code>&lt;h3&gt;</code>-, <code>&lt;p&gt;</code>-, <code>&lt;span&gt;</code>- und <code>&lt;a&gt;</code>-Elemente. Die Eigenschaftsdefinitionen kaskadieren also nach unten - daher cascading style sheets. Da alle <code>&lt;p&gt;</code>-Elemente fett geschrieben werden, sind auch die darin enthaltenen Elemente fett, also <code>&lt;a&gt;</code> und <code>&lt;span&gt;</code>. </p> <p>Begriffsbezeichnungen bei CSS-Definitionen:</p> <p></p>"},{"location":"css/#ort-der-css-definitionen","title":"Ort der CSS-Definitionen","text":"<p>Es gibt drei \"Orte\", an denen CSS-Eigenschaften f\u00fcr ein HTML-Dokument definiert werden k\u00f6nnen: </p> <ol> <li>in einer externen CSS-Datei. Diese endet typischerweise mit der Dateiendung <code>.css</code> und wird im <code>&lt;head&gt;</code> des HTML-Dokumentes mithilfe von <code>&lt;link rel=\"stylesheet\" href=\"mystyle.css\"&gt;</code> (hier hei\u00dft die externe Datei <code>mystyle.css</code>) eingebunden (siehe unten),</li> <li>innerhalb eines <code>&lt;style&gt;</code>-Elementes ebenfalls im <code>&lt;head&gt;</code> des HTML-Dokumentes (siehe unten),</li> <li>als <code>style</code>-Attribut eines HTML-Elementes (siehe unten).</li> </ol> 3 Orte der CSS-Definitionen - HTMLmystyle.css <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"de\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;!-- 1. Einbinden einer externen CSS-Datei --&gt;\n    &lt;link rel=\"stylesheet\" href=\"mystyle.css\"&gt;\n    &lt;title&gt;CSS-Einf\u00fchrung&lt;/title&gt;\n    &lt;!-- 2. Verwenden des &lt;style&gt;-Elementes --&gt;\n    &lt;style&gt;\nh1 {\ncolor: red;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;\u00dcberschrift&lt;/h1&gt;\n&lt;!-- 3. style-Attribut eines HTML-Elementes --&gt;\n&lt;p style=\"border: 1px solid blue;\"&gt;\n    Das ist ein Absatz.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>body {\nfont-family: vardana;\n}\n</code></pre> <p>Im obigen Beispiel wird in der externen CSS-Datei <code>mystyle.css</code> definiert, dass der im gesamten Dokument verwendete Font Verdana sein soll. Im <code>&lt;style&gt;</code>-Element wird als Schriftfarbe f\u00fcr <code>&lt;h1&gt;</code>-\u00dcberschriften rot festgelegt, das gilt f\u00fcr alle <code>&lt;h1&gt;</code>-\u00dcberschriften des Dokumentes. Das <code>style</code>-Attribut des HTML-Elementes <code>&lt;p&gt;</code> legt f\u00fcr diesen Absatz fest, dass er blau umrandet sein soll. Das gilt nicht f\u00fcr alle <code>&lt;p&gt;</code>-Elemente, sondern nur f\u00fcr das Element mit dem <code>style</code>-Attribut.</p> <p>Eine recht gute \u00dcbersicht \u00fcber alle existierenden CSS-Eigenschaften bietet W3Schhols.</p>"},{"location":"css/#selektoren","title":"Selektoren","text":"<p>Bis jetzt haben wir in unseren Beispielen \"nur\" HTML-Elemente als Selektoren verwendet. Es gibt eine Vielzahl anderer M\u00f6glichkeiten, bestimmten HTML-Elementen CSS-Eigenschaften zuzuweisen. Nochmal zur Wiederholung: der generelle Aufbau einer CSS-Definition ist</p> <pre><code>selektor {\neigenschaft: wert;\n}\n</code></pre> <p>Wir werden nun die unterschiedlichen M\u00f6glichkeiten der Selektoren (und Operatoren \u00fcber diese Selektoren) betrachten. Wir betrachten zun\u00e4chst HTML-Elemente, IDs, Klassen und Attribute als Selektoren. Zu den IDs ist zu sagen, dass Sie jedem HTML-Element eine eindeutige <code>id</code> zuweisen k\u00f6nnen, z.B. <code>&lt;div id=\"main\"&gt;</code>. Jedes Element darf nur eine <code>id</code> besitzen und eine <code>id</code> darf in einem HTML-Dokument nur einmal vergeben - muss also eindeutig - sein. Klassen weisen Sie Elementen mit dem <code>class</code>-Attribut zu, also z.B. <code>&lt;div class=\"smallFont blueColor yellowBackground\"&gt;</code>. Klassennamen k\u00f6nnen Sie frei w\u00e4hlen (keine Leer- und Sonderzeichen!). Wenn Sie, wie im Beispiel, mehrere Klassen zuweisen, dann durch einen Leerschritt getrennt. Im Beispiel wurde dem <code>&lt;div&gt;</code> drei Klassen zugewiesen. Sie k\u00f6nnen einem Element beliebig viele Klassen zuweisen und eine Klasse kann beliebig vielen Elementen zugewiesen werden. In den CSS-Deklarationen wird mittels <code>#</code> auf die IDs zugegriffen und mittels <code>.</code> auf die jeweilige Klasse. Siehe die folgende Liste der m\u00f6glichen Selektoren unter Verwendung von Elementnamen, IDs, Klassen und Attributen: </p> Selektor Beispiel Erl\u00e4uterung <code>*</code> <code>*</code> alle HTML-Elemente ausgew\u00e4hlt (Wildcard) <code>element</code> <code>h1</code> alle <code>&lt;h1&gt;</code>-Elemente ausgew\u00e4hlt <code>element element</code> <code>section h1</code> alle <code>&lt;h1&gt;</code>-Elemente innnerhalb eines <code>&lt;section&gt;</code>-Element ausgew\u00e4hlt (Nachfahren) <code>element, element</code> <code>section, h1</code> alle <code>&lt;h1&gt;</code>-Elemente und alle <code>&lt;section&gt;</code>-Elemente ausgew\u00e4hlt <code>element&gt;element</code> <code>section&gt;h1</code> alle <code>&lt;h1&gt;</code>-Elemente deren direkte Eltern ein <code>&lt;section&gt;</code>-Element sind (Kinder) <code>element+element</code> <code>section+h1</code> alle <code>&lt;h1&gt;</code>-Elemente, die direkt nach einem <code>&lt;section&gt;</code>-Element stehen <code>.class</code> <code>.container</code> alle Elemente mit <code>class=\"container\"</code>, d.h. <code>container</code> muss eine zugeordnete Klasse sein <code>.class1.class2</code> <code>.container.top</code> alle Elemente mit <code>class=\"container top\"</code>, d.h. <code>container</code> und <code>top</code> m\u00fcssen zugeordnete Klassen sein <code>.class1 .class2</code> <code>.container .top</code> alle Elemente mit <code>class=\"top\"</code>, welche in Elementen mit <code>class=\"container\"</code> sind (Nachfahren) <code>#id</code> <code>#main</code> das Element mit <code>id=\"main\"</code> (id eindeutig - nur einmal vergeben) <code>[attribute]</code> <code>[src]</code> alle Elemente mit einem <code>src</code>-Attribut <code>[attribute=value]</code> <code>[target=_blank]</code> alle Elemente, die ein <code>target</code>-Attribut besitzen und dessen Wert muss genau <code>_blank</code> sein <code>[attribute*=value]</code> <code>[src*=\"localhost\"]</code> alle Elemente, die ein <code>src</code>-Attribut besitzen und dessen Wert enth\u00e4lt das Wort <code>localhost</code> <code>[attribute^=value]</code> <code>[href^=\"https\"]</code> alle Elemente, die ein <code>href</code>-Attribut besitzen und dessen Wert beginnt mit dem Wort <code>https</code> <code>[attribute$=value]</code> <code>[href$=\"php\"]</code> alle Elemente, die ein <code>href</code>-Attribut besitzen und dessen Wert endet mit dem Wort <code>php</code> <p>Dar\u00fcber hinaus gibt es auch sogenannte Pseudo-Klassen und Pseudo-Elemente, die wir als Selektoren verwenden k\u00f6nnen. Wir betrachten zum besseren Verst\u00e4ndinis zun\u00e4chst ein Beispiel, um eine Idee davon zu bekommen. Angenommen, wir haben in unserem HTML-Dokument einen Hyperlink (<code>#</code>refrenziert auf den Beginn derselben Seite):</p> <pre><code>&lt;a href=\"#\"&gt;Neu laden&lt;/a&gt;\n</code></pre> <p>So ein Hyperlink besitzt zus\u00e4tzliche Pseudo-Klassen <code>link</code>, <code>visited</code>, <code>hover</code>, <code>active</code>. Diese Klassen sind f\u00fcr bestimmte Zust\u00e4nde des Elementes aktiv. Die Pseudoklasse <code>link</code> ist aktiv f\u00fcr noch nicht angeklickte Hyperlinks, <code>visited</code> bei bereits angeklickten, <code>hover</code> (gibt es f\u00fcr alle Elemente) sobald man die Maus \u00fcber das Element h\u00e4lt und <code>active</code> f\u00fcr den Zeitpunkt, zu dem man gerade den Hyperlink anklickt. Pseudoklassen werden \u00fcber <code>element:pseudoklasse</code> angesprochen. Ein CSS k\u00f6nnte also z.B. so aussehen:</p> <pre><code>a { /* alle links */\ntext-decoration:none;\n}\n\na:link { /* noch nicht angeklickt */\ncolor:red;\n}\n\na:visited { /* bereits angeklickt */\ncolor:darkgrey;\n}\n\na:hover {   /* mouse over */\ncolor:limegreen;\n}\n\na:active { /* wird gerade angeklickt */\ncolor:lightblue;\n}\n</code></pre> \u00a0Pseudo-Klasse \u00a0Beispiel \u00a0Erl\u00e4uterung des Beispiels <code>:link</code> <code>a:link</code> \u00a0alle <code>&lt;a&gt;</code>-Elemente, die noch nicht besucht (geklickt) wurden <code>:visited</code> <code>a:visited</code> \u00a0alle <code>&lt;a&gt;</code>-Elemente, die bereits besucht (geklickt) wurden <code>:hover</code> <code>img:hover</code> \u00a0das <code>&lt;img&gt;</code>-Element, \u00fcber dem die Maus verweilt (mouse over) <code>:active</code> <code>a:active</code> \u00a0das <code>&lt;a&gt;</code>-Element, auf das gerade geklickt wird <code>:empty</code> <code>p:empty</code> \u00a0alle <code>&lt;p&gt;</code>-Elemente, die keine Kinder haben <code>:first-child</code> <code>p:first-child</code> \u00a0alle <code>&lt;p&gt;</code>-Elemente, die das jeweils erste Kind ihres Elternelmentes sind <code>:first-of-type</code> <code>p:first-of-type</code> \u00a0alle <code>&lt;p&gt;</code>-Elemente, die das jeweils erste <code>&lt;p&gt;</code>-Element ihres Elternelementes sind <code>:nth-child(n)</code> <code>p:nth-child(2)</code> \u00a0alle <code>&lt;p&gt;</code>-Elemente, die das jeweils zweite Kind ihres Elternelmentes sind <code>:nth-of-type(n)</code> <code>p:nth-of-type(2)</code> \u00a0alle <code>&lt;p&gt;</code>-Elemente, die das jeweils zweite <code>&lt;p&gt;</code>-Element ihres Elternelementes sind <code>:only-child</code> <code>p:only-child</code> \u00a0alle <code>&lt;p&gt;</code>-Elemente, die das jeweils einzige Kind ihres Elternelementes sind <code>:only-of-type</code> <code>p:only-of-type</code> \u00a0alle <code>&lt;p&gt;</code>-Elemente, die das jeweils einzige <code>&lt;p&gt;</code>-Element ihres Elternelementes sind <p>In den runden Klammern, in denen Zahlen angegeben werden k\u00f6nnen (<code>:nth-child(n)</code> und <code>:nth-of-type(n)</code>), k\u00f6nnen Sie anstelle der Zahl auch <code>odd</code> und <code>even</code> einsetzen. So lassen sich z.B. Tabellenzeilen abwechselnd in verschiedenen Hintergrundfarben anzeigen </p> <pre><code>/* unterschiedliche Spaltenfarben */\ntd:nth-child(even) {\nbackground-color: lightgrey;\n}\n\ntd:nth-child(odd) {\nbackground-color: darkgrey;\n}\n\n/* unterschidliche Zeilenfarben */\ntr:nth-child(even) {\nbackground-color: white;\n}\n\ntr:nth-child(odd) {\nbackground-color: grey;\n}\n</code></pre> <p>Neben den oben genannten Pseudoklassen gibt es auch noch deren Pendants: <code>:last-child</code>, <code>:last-of-type</code>, <code>:nth-last-child(n)</code>, <code>:nth-last-of-type(n)</code>.</p> <p>F\u00fcr <code>&lt;input&gt;</code>-Elemente gibt es zus\u00e4tzlich eine Reihe weiterer Pseudo-Klassen. Hier eine Auswahl an Pseudo-Klassen f\u00fcr <code>&lt;input&gt;</code>-Elemente:</p> \u00a0Pseudo-Klasse \u00a0Beispiel \u00a0Erl\u00e4uterung des Beispiels <code>:checked</code> <code>input:checked</code> \u00a0alle checked <code>&lt;input&gt;</code>-Elemente <code>:disabled</code> <code>input:disabled</code> \u00a0alle disabled <code>&lt;input&gt;</code>-Elemente <code>:enabled</code> <code>input:enabled</code> \u00a0alle disabled <code>&lt;input&gt;</code>-Elemente <code>:focus</code> <code>input:focus</code> \u00a0das <code>&lt;input&gt;</code>-Element, das Fokus hat <code>:invalid</code> <code>input:invalid</code> \u00a0alle <code>&lt;input&gt;</code>-Elemente mit einem ung\u00fcltigen Wert <code>:optional</code> <code>input:optional</code> \u00a0alle <code>&lt;input&gt;</code>-Elemente, die nicht \"required\" sind <code>:read-only</code> <code>input:read-only</code> \u00a0alle <code>&lt;input&gt;</code>-Elemente mit einem \"readonly\"-Attribut <code>:read-write</code> <code>input:read-write</code> \u00a0alle <code>&lt;input&gt;</code>-Elemente, die kein \"readonly\"-Attribut haben <code>:required</code> <code>input:required</code> \u00a0alle <code>&lt;input&gt;</code>-Elemente mit einem \"required\"-Attribut <code>:valid</code> <code>input:valid</code> \u00a0alle <code>&lt;input&gt;</code>-Elemente mit einem g\u00fcltigen Wert <p>Pseudo-Elemente sind so \u00e4hnlich wie Pseudo-Klassen, werden aber \u00fcber <code>::</code> angesprochen anstelle <code>:</code> bei Pseudo-Klassen. Hier ein Beispiel f\u00fcr ein Pseudo-Element:</p> HTMLCSS mit Pseudo-Elementen <pre><code>&lt;p&gt;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&lt;/p&gt;\n</code></pre> <pre><code>p::first-letter {\nfont-size:300%;\n}\np::first-line {\nfont-weight: bold;\n}\n</code></pre> <p>Das Ergebnis sieht dann so aus: </p> <p></p> <p>Der erste Buchstabe in einem Absatz ist um das Dreifache gr\u00f6\u00dfer als der Rest der Textes und die erste Zeile in diesem Absatz wird fettgedruckt. </p> <p>Auswahl an Pseudo-Elementen:</p> \u00a0Pseudo-Elemente \u00a0Beispiel \u00a0Erl\u00e4uterung des Beispiels <code>::after</code> <code>p::after</code> \u00a0f\u00fcge etwas hinter den Inhalt aller <code>&lt;p&gt;</code>-Elemente ein <code>::before</code> <code>p::before</code> \u00a0f\u00fcge etwas vor den Inhalt aller <code>&lt;p&gt;</code>-Elemente ein <code>::first-letter</code> <code>p::first-letter</code> \u00a0alle ersten Buchstaben aller <code>&lt;p&gt;</code>-Elemente <code>::first-line</code> <code>p::first-line</code> \u00a0alle ersten Zeilen aller <code>&lt;p&gt;</code>-Elemente <code>::selection</code> <code>p::selection</code> \u00a0alle vom Nutzer markierten (selektierten) Teile eines <code>&lt;p&gt;</code>-Elementes"},{"location":"css/#box-model","title":"Box Model","text":"<p>Wenn Sie die Breite und die H\u00f6he eines Elementes mithilfe der <code>width</code>- und <code>height</code>-Eigenschaft von CSS angeben wollen, dann m\u00fcssen Sie beachten, dass Sie damit \"nur\" die H\u00f6he und Breite des Inahltes dieses Elementes angeben. Zur Gesamtbreite und -h\u00f6he eines Elementes z\u00e4hlen aber auch noch:</p> <ul> <li><code>padding</code>: der Abstand des Inhaltes zum Rahmen (<code>border</code>) des Elementes,</li> <li><code>border</code>: der Rahmen des Elementes (falls es einen gibt) und</li> <li><code>margin</code>: der Abstand des Elementes zu den Nachbarelementen. </li> </ul> <p>Zusammen mit dem Inhalt des Elementes wird dieser Zusammenhang Box Model genannt. Folgende Darstellung zeigt das Box Model:</p> <p></p> <p>Das Box Model besagt, dass alle HTML-Elemente als eine rechteckige \"Box\" verstanden werden k\u00f6nnen und diese Box aus dem Inhalt, <code>padding</code>, <code>border</code> und <code>margin</code> besteht. </p> Beispiel Box Model - HTMLBeispiel Box Model - CSS <pre><code>&lt;body&gt;\n&lt;h3&gt;Box Model&lt;/h3&gt;\n&lt;img src=\"./images/fiw.jpg\" alt=\"fiw logo\" style=\"width:350px\"/&gt;\n&lt;div&gt;Das FIW-Logo hat eine Breite von 350px (width:350px).\n    Der Inhalt dieser Box hat eine Breite von 320px.\n    Dazu kommt padding von 10px (auf beiden Seiten)\n    und ein Rahmen mit der Breite von 5px. Macht zusammen\n    350px.\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>div {\nwidth: 320px;\npadding: 10px;\nborder: 5px solid gray;\nmargin: 0;\n}\n</code></pre> <p>Das Bild hat eine Breite von <code>350px</code>(siehe <code>style</code>-Attribut von <code>img</code>). Der Inhalt des <code>div</code>-Containers hat eine Breite von <code>320px</code>. Der Abstand des Inhalts zum Rahmen ist links und rechts jeweils <code>10px</code> und der Rahmen ist links und rechts jeweils <code>5px</code> gro\u00df. Ergibt zusammen eine Breite von (<code>320</code>+<code>10</code>+<code>10</code>+<code>5</code>+<code>5</code> = <code>350</code>). Somit ist das <code>div</code> inklusive <code>padding</code> und <code>border</code> exakt so breit wie das Bild:</p> <p></p> <p>Das hier beschriebene Box Model entspricht der CSS-Definition <code>box-sizing: content-box;</code>. Dies ist der Standard (muss also nicht angegeben werden). Daneben gibt es auch noch die M\u00f6glichkeit, anstelle von <code>content-box</code> den Wert <code>border-box</code> zu verwenden. Dann ist in der Angabe von <code>width</code>und <code>height</code>sowohl <code>padding</code> als auch <code>border</code> integriert - erweitern Sie obige CSS-Definition um </p> <pre><code>* {\nbox-sizing: border-box;\n}\n</code></pre> <p>Dann wird der Unterschied sichtbar. <code>border-box</code> kann aber zu Problemen bei der Verwendung anderer Frameworks f\u00fchren und sollte deshalb eher nicht verwendet werden. </p>"},{"location":"css/#die-display-eigenschaft","title":"Die <code>display</code>-Eigenschaft","text":"<p>Mithilfe der <code>display</code>-Eigenschaft k\u00f6nnen Block-Elemente als Inline-Elemente definiert werden und umgedreht. <code>display:block</code> definiert ein Element als Block-Element, <code>display: inline</code> definiert ein Element als Inline-Element. Au\u00dferdem gibt es noch die M\u00f6glichkeit, mithilfe von <code>display: none;</code> ein Element unsichtbar zu schalten. Dieses Element nimmt dann im Viewport, also dem sichtbaren Bereich der Webseite, keinen Platz ein (im Gegensatz zu einem Element, das mithilfe von <code>visibility: hidden;</code> auf unsichtbar gesetzt wird). Hier ein Beispiel zur Verwendung der <code>display</code>-Eigenschaft. Fahren Sie unter dem Reiter Result mit der Maus \u00fcber das orange umrandete <code>div</code>.  </p> <p>Es gibt noch viele weitere Werte f\u00fcr <code>display</code>, auf die wir aber nicht n\u00e4her eingehen wollen. Eine \u00dcbersicht finden Sie z.B. hier.</p>"},{"location":"css/#layout-gestalten-mithilfe-von-css","title":"Layout gestalten mithilfe von CSS","text":"<p>Wir werden f\u00fcr das Layout unserer Webseiten in Zukunft CSS-Frameworks, wie z.B. Bootstrap oder Materialize oder SemanticUI verwenden. F\u00fcr das Layout stellen diese Frameworks insbesondere ein Grid-Konzept zur Verf\u00fcgung, das recht einfach nutzbar ist und sogar f\u00fcr eine responsive Darstellung sorgt. Zun\u00e4chst wollen wir jedoch die Prinzipien verstehen, auf denen diese Frameworks (und deren Grid-Konzept) basieren.</p>"},{"location":"css/#mehrspaltig-mithilfe-von-float","title":"Mehrspaltig mithilfe von float","text":"<p>Generell werden Container untereinander dargestellt, in der Reihenfolge ihres Auftretens im HTML. Betrachten wir ein einfaches Beispiel:</p> <pre><code>&lt;body&gt;\n&lt;p id=\"p1\"&gt;&lt;img src=\"./images/fiw.jpg\" alt=\"fiw-logo\" style=\"width:100px;\"/&gt;&lt;/p&gt;\n&lt;p id=\"p2\"&gt;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy\n    eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam\n    voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet\n    clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n    amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam\n    nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,\n    sed diam voluptua. At vero eos et accusam et justo duo dolores et ea\n    rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem\n    ipsum dolor sit amet.&lt;/p&gt;\n&lt;p id=\"p3\"&gt;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy\n    eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam\n    voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet\n    clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n    amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam\n    nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,\n    sed diam voluptua. At vero eos et accusam et justo duo dolores et ea\n    rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem\n    ipsum dolor sit amet.&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <p>Untereinander definiert sind 3 Block-Elemente (<code>&lt;p&gt;</code>-Elemente), die jeweils eine eigene <code>id</code> besitzen. Der erste Absatz enth\u00e4lt ein Bild mit der Breite <code>100px</code>. Dies f\u00fchrt zu folgender Ansicht: </p> <p></p> <p>Alle drei Block-Elemente sind also, wie erwartet, untereinander. </p>"},{"location":"css/#umflieen-lassen-float","title":"Umflie\u00dfen lassen: <code>float</code>","text":"<p>Angenommen, wir wollen nun, dass das Bild von Text umflossen wird, dass also der Absatz mit dem Bild neben den danach folgenden Abs\u00e4tzen erscheint. Dann kommt die CSS-Eigenschaft <code>float</code> ins Spiel. Wir k\u00f6nnen entscheiden, ob das Bild links sein soll und umflossen wird (<code>float: left;</code>) oder rechts sein und dort vom Text umflossen werden soll (<code>float: right;</code>). Wir f\u00fcgen exemplarisch folgende Eigenschaft (f\u00fcr die id <code>p1</code>) hinzu:</p> <pre><code>#p1 {\nfloat:left;\nmargin-right:15px;\n}\n</code></pre> <p>Damit legen wir fest, dass der erste Absatz umflossen werden soll (und links bleibt - <code>float: left;</code>). Mit der <code>margin-right</code>-Eigenschaft sorgen wir f\u00fcr einen Abstand zum unflie\u00dfenden Text. Es entsteht folgende Ansicht: </p> <p></p> <p>Das hei\u00dft, dass alle folgenden Abs\u00e4tze den ersten Absatz umflie\u00dfen. </p>"},{"location":"css/#umflieen-stoppen-clear","title":"Umflie\u00dfen stoppen: <code>clear</code>","text":"<p>Das Umflie\u00dfen kann auch wieder gestoppt werden. Dies geschieht mithilfe der <code>clear</code>-Eigenschaft. Um <code>float: left</code> zu stoppen, wird <code>clear: left</code> verwendet und um <code>float: right</code> zu stoppen, wird <code>clear: right</code> verwendet. Sollte es mehrere Elemente mit einer <code>float</code>-Eigenschaft geben, kann zum Stoppen <code>clear: both</code> verwendet werden. </p> <p>Wenn wir nun also f\u00fcr den dritten Absatz definieren: </p> <pre><code>#p3 {\nclear: left;\n}\n</code></pre> <p></p> <p>, dann beginnt der dritte Absatz wieder am Beginn einer neuen Zeile unterhalb der beiden Abs\u00e4tze <code>p1</code> und <code>p2</code>. </p>"},{"location":"css/#mehr-als-2-spalten","title":"mehr als 2 Spalten","text":"<p>Wenn wir nun alle 3 Abs\u00e4tze nebeneinander setzen wollen, dann definieren wir einfach f\u00fcr alle 3 Abs\u00e4tze <code>float:left;</code>. Damit alle 3 Abs\u00e4tze die gleiche Breite haben, geben wir noch f\u00fcr jeden Absatz an, dass er <code>33.33%</code> des Viewports einnimmt (<code>width: 31.33%</code> + <code>padding:1%</code> - links und rechts):</p> <pre><code>#p1, #p2, #p3 {\nfloat:left;\nwidth: 31.33%;\npadding:1%;\n}\n</code></pre> <p>Beachten Sie dazu noch folgende \u00c4nderung beim <code>&lt;img&gt;</code>-Element. Wir \u00e4ndern die Breite des Bildes von <code>100px</code> (feste Breite) auf <code>100%</code> (relative Breite - relativ zum Elternelement, das ist <code>&lt;p id=\"p1\"&gt;</code>). </p> <pre><code>&lt;p id=\"p1\"&gt;&lt;img src=\"./images/fiw.jpg\" alt=\"fiw-logo\" style=\"width:100%;\"/&gt;&lt;/p&gt;\n</code></pre> <p>Sch\u00f6ner - und \u00fcblicher, weil sp\u00e4ter auch so beim Grid-Konzept - ist es, den Elementen, die man nebeneinander anordnen m\u00f6chte, eine CSS-Klasse zuzuweisen, z.B. <code>class=\"column\"</code>und f\u00fcr diese Klasse dann die <code>float</code>-Eigenschaft mit zugeh\u00f6riger relativer Breite zu definieren. Au\u00dferdem f\u00fcgt man oft um die Spalten einen weiteren Container mit einer Klasse <code>class=\"row\"</code> (Beispiel) und kann dann f\u00fcr diese Klasse (<code>.row:after</code> die <code>clear</code>-Eigenschaft definieren). Ein solches Beispiel nochmal hier:</p>"},{"location":"css/#flexbox","title":"Flexbox","text":"<p>Wir werden sehen, dass das Grid-Konzept, das wir zuk\u00fcnftig verwenden werden, auf der <code>float</code>-Eigenschaft (zusammen mit <code>width</code>) basiert. Ein Konzept, welches von der Komplexit\u00e4t \"zwischen\" <code>float</code> und dem Grid-Konzept liegt, ist <code>flexbox</code>. Mit <code>flexbox</code> ist das Nebeneinanderpositionieren von Containern recht einfach - insbesondere lassen sich auch recht leicht unterschiedliche Spaltenbreiten definieren- Wir gehen hier nicht weiter auf <code>flexbox</code> ein, sondern verweisen auf z.B. A Guide to Flexbox. </p>"},{"location":"css/#grid","title":"Grid","text":"<p><code>flexbox</code> verwendet <code>float</code> und <code>CSS Grid</code> (oder nur <code>Grid</code>) verwendet <code>flexbox</code>. W\u00e4hrend <code>flexbox</code> nur in ein Dimension das Layout gestaltet (n\u00e4mlich horizontal), kann <code>Grid</code> f\u00fcr einen vollst\u00e4ndigen Layout-Entwurf verwendet werden (n\u00e4mlich horizontal und vertikal). Dazu wird unsere Webseite als eine Matrix verstanden, bestehend aus Zellen, die in Zeilen und Spalten angeordnet sind. Am besten, wir betrachten ein Beispiel:</p> HTMLCSS <pre><code>&lt;div class=\"wrapper\"&gt;\n    &lt;div class=\"one orange\"&gt;One&lt;/div&gt;\n    &lt;div class=\"two orange\"&gt;Two&lt;/div&gt;\n    &lt;div class=\"three orange\"&gt;Three&lt;/div&gt;\n    &lt;div class=\"four orange\"&gt;Four&lt;/div&gt;\n    &lt;div class=\"five orange\"&gt;Five&lt;/div&gt;\n    &lt;div class=\"six orange\"&gt;Six&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.wrapper {\ndisplay: grid;\ngrid-template-columns: repeat(3, 1fr);\ngrid-gap: 10px;\ngrid-auto-rows: minmax(100px, auto);\n}\n.one {\ngrid-column: 1 / 3;\ngrid-row: 1;\n}\n.two {\ngrid-column: 2 / 4;\ngrid-row: 1 / 3;\n}\n.three {\ngrid-column: 1;\ngrid-row: 2 / 5;\n}\n.four {\ngrid-column: 3;\ngrid-row: 3;\n}\n.five {\ngrid-column: 2;\ngrid-row: 4;\n}\n.six {\ngrid-column: 3;\ngrid-row: 4;\n}\n\n.orange {\nbackground-color: orange;\nopacity: 0.5;\nborder: 2px solid gray;\nborder-radius: 5px;\npadding: 30px;\n}\n</code></pre> <p>Die Webseite sieht dann so aus:</p> <p></p> <p>Hier nochmal in JSFiddle:</p>"},{"location":"css/#erlauterung-des-codes","title":"Erl\u00e4uterung des Codes","text":"<p>Wir erkennen, dass sechs Zellen in einer Matrix angeordnet werden. Umschlossen sind diese Zellen durch ein <code>div</code> der CSS-Klasse <code>wrapper</code>. F\u00fcr diese Klasse <code>wrapper</code> wird CSS-Grid wie folgt definiert:</p> <pre><code>    .wrapper {\ndisplay: grid;\ngrid-template-columns: repeat(3, 1fr);\ngrid-gap: 10px;\ngrid-auto-rows: minmax(100px, auto);\n}\n</code></pre> <ul> <li>Der umschlie\u00dfende Container wird mithilfe von <code>display: grid;</code> als Grid-Container definiert. </li> <li>Mit <code>grid-template-columns: repeat(3, 1fr);</code> werden die Spalten definiert. Hier werden 3 Spalten festgelegt und jede dieser Spalten hat die gleiche Breite. Wir h\u00e4tten auch schreiben k\u00f6nnen <code>grid-template-columns: 33% 33% 33%;</code>. Allerdings ergibt sich dann ein kleines Problem: </li> <li>Da wir in der folgenden Zeile <code>grid-gap: 10px;</code> angeben, dass zwischen den Spalten ein Abstand von <code>10px</code> eingehalten werden soll, w\u00fcrde die Breite insgesamt die <code>100%</code> \u00fcbersteigen (<code>3 x 33% + 2 * 10px</code>). Deshalb wird die Einheit <code>fr</code> (fraction) verwendet. Zur Einheit <code>fr</code> finden Sie n\u00e4here Informationen hier.</li> </ul> <p>Die Eigenschaft <code>grid-auto-rows: minmax(100px, auto);</code> beschreibt, dass die Zeilenh\u00f6he automatisch berechnet wird (aus dem Inhalt), aber mindestens <code>100px</code> hoch ist.  </p> <p>F\u00fcr die einzelnen Zellen wird nun mithilfe von <code>grid-column: &lt;start-line&gt; / &lt;end-line&gt;</code> und <code>grid-row: &lt;start-line&gt; / &lt;end-line&gt;</code> jeweils angegeben, wo die jeweilige Zelle beginnt und wo sie aufh\u00f6rt. Wird keine <code>&lt;end-line&gt;</code> angegeben, dann geht die Zelle \u00fcber genau eine Spalte bzw. genau eine Zeile. </p> <p>Wenn wir uns also das Grid wie folgt vergegenw\u00e4rtigen:</p> <p></p> <ul> <li>dann geht <code>One</code> von Spaltenlinie <code>1</code> bis Spaltenlinie <code>3</code> und von Zeilenlinie <code>1</code> (bis Zeilenlinie <code>2</code>), </li> <li>dann geht <code>Two</code> von Spaltenlinie <code>2</code> bis ans Ende (Speltenlinie <code>4</code>) und von Zeilenlinie <code>1</code> bis Zeilenlinie <code>3</code>,</li> <li>dann geht <code>Three</code> von Spaltenlinie <code>1</code> (bis Spaltenlinie <code>2</code>) und von Zeilenlinie <code>2</code> bis ans Ende Zeilenlinie <code>5</code> usw. </li> </ul> <p>CSS-Grid ist sehr m\u00e4chtig. Eine detaillierte Beschreibung finden Sie z.B. hier und auch hier.</p>"},{"location":"css/#wertangaben-in-css","title":"Wertangaben in CSS","text":"<p>Numerische Werte k\u00f6nnen in CSS absolut oder relativ angegeben werden, je nach verwendeter Einheit. Folgende Tabelle gibt eine \u00dcbersicht \u00fcber die unterschiedlichen Einheiten f\u00fcr numerische Werte. </p> Einheit \u00a0Angabetyp Bedeutung <code>%</code> \u00a0relativ relativ entweder zur elementeigenen Gr\u00f6\u00dfe, zur Gr\u00f6\u00dfe des Elternelements oder zum allegemeinen Kontext <code>cm</code> absolut Zentimenter <code>em</code> relativ \u00a0Schriftgr\u00f6\u00dfe des Elements (bei font-size aber Schriftgr\u00f6\u00dfe des Elternelements) <code>ex</code> \u00a0relativ \u00a0H\u00f6he des Kleinbuchstabens <code>x</code> im Element (bei font-size aber die Schriftgr\u00f6\u00dfe von <code>x</code> im Elternelement) <code>in</code> \u00a0absolut inch (1 inch = 2,54 cm) <code>mm</code> \u00a0absolut \u00a0Milimeter <code>pc</code> absolut \u00a0pica (1 pc = 12 Punkt) <code>pt</code> absolut Punkt (1 Punkt = 1/72 inch) <code>px</code> absolut und relativ \u00a0absolut auf ein und dasselbe Ausgabeger\u00e4t bezogen und relativ von Ausgabeger\u00e4t zu Ausgabeger\u00e4t (Pixeldichte) <p>Sie sollten absolute Angaben nur in Ausnahmef\u00e4llen verwenden. Wann immer es geht, ist eine relative Gr\u00f6\u00dfenangabe vorzuziehen. Somit werden am h\u00e4ufigsten <code>%</code>-Angaben und am zweith\u00e4ufigsten <code>px</code>-Angaben verwendet. <code>em</code> sieht man auch noch recht h\u00e4ufig. Von allen anderen Einheiten ist eher abzuraten.</p>"},{"location":"css/#custom-properties","title":"Custom Properties","text":"<p>Sie k\u00f6nnen sich eigene Variablen f\u00fcr die Verwendung in CSS-Definitionen erstellen. Es ist \u00fcblich, solche Variablen in einem \"gro\u00dfen\" Scope zu definieren, da sie auf den definierten Scope beschr\u00e4nkt sind. D.h., dass man solche Variablen typischerweise f\u00fcr <code>*</code> (also alle Elemente) oder <code>body</code> definiert. Die Variablen beginnen stets mit <code>--</code>, also z.B. <code>--variablenname</code>. Der Zugriff auf die Variablen erfolgt mit <code>var()</code>, also z.B. <code>var(--variablenname)</code>. Hier ein Beispiel f\u00fcr die Definition von HTW-Farben und -Font:</p> <pre><code>* {\n--htw-gruen: #76B900;\n--htw-grau:#AFAFAF;\n--htw-orange:#FF5F00;\n--htw-blau:#0082D1;\n--htw-font:Verdana, Geneva, sans-serif;\n}\n\nbody {\nfont-family:var(--htw-font);\n}\nh1 {\ncolor: var(--htw-gruen);\n}\nli a:hover {\nbackground-color: var(--htw-orange);\n}\n.active {\nbackground-color: var(--htw-gruen);\n}\n</code></pre>"},{"location":"css/#gewichtung-der-selektoren","title":"Gewichtung der Selektoren","text":"<p>Insbesondere, wenn Sie noch CSS-Frameworks einbinden und/oder viele CSS-Definitionen haben, stellt sich die Frage, welche der Definitionen \u00fcberhaupt wirken. Eine gro\u00dfe Hilfe sind hier die Entwicklertools der Browser. Im folgenden Screenshot sehen Sie die Developer tools von Chrome. Im rechten unteren Fenster sind die definierten Styles angezeigt. Die nicht wirksamen Styledefinitionen sind durchgestrichen. </p> <p></p> <p>Um zu ermitteln, welche Definition Anwendung findet, gibt es eine Gewichtung der Selektoren. Wichtig ist zu wissen, dass die Reihenfolge der Definitionen, egal ob im <code>&lt;style&gt;</code>-Element oder in externen CSS-Dateien keine Rolle spielt! Wir betrachten folgendes Beispiel, um die Gewichtung der Selektoren zu bestimmen:</p> <p>Wenn Sie sich zun\u00e4chst nur die CSS-Definitionen anschauen, dann sehen Sie, dass einem Link f\u00fcnf verschiedene Farben zugewiesen werden. Die Links sind aber rot. Es muss also aus einem bestimmten Grund die Definition </p> <pre><code>#navigation a.link {\ncolor: red;\n}\n</code></pre> <p>am st\u00e4rksten wirken, d.h. der Selektor <code>#navigation a.link</code> hat in unserem Beispiel die st\u00e4rkste Gewichtung. Um die Gewichtung der Selektoren zu ermitteln, werden diese kategorisiert:</p> <ul> <li>Kategorie A: erh\u00e4lt den Wert 1, wenn CSS-Definitionen direkt im style-Attribut eines HTML-Elementes notiert sind </li> <li>Kategorie B: erh\u00e4lt den Wert 1 bei Selektoren f\u00fcr Elemente mit <code>id</code>-Attributen</li> <li>Kategorie C: Anzahl der von einem Selektor betroffenen Klassen und Pseudoklassen</li> <li>Kategorie D: Anzahl der von einem Selektor betroffenen Elementnamen und Pseudo-Elemente</li> </ul> <p>Bei der Reihenfolge der Sortierung gilt: A &gt; B &gt; C &gt; D, also z.B. 1 0 0 0 vor (gr\u00f6\u00dfer als) 0 1 2 2. </p> <p>Betrachten wir unser Beispiel:</p> <ul> <li><code>a:link</code> :    0 0 1 1 (eine Pseudoklasse (link) und ein Element (a))</li> <li><code>.link</code>  :    0 0 1 0 (eine Klasse)</li> <li><code>#navigation a.link</code> :  0 1 1 1 (Element mit <code>id</code>-Attribut, eine Klasse und eine Element)</li> <li><code>li a</code> :  0 0 0 2 (zwei Elemente)</li> <li><code>#navigation li a</code> :    0 1 0 2 (Element mit <code>id</code>-Attribut, zwei Elemente)</li> </ul> <p>Es gilt 0 1 1 1 &gt; 0 1 0 2 &gt; 0 0 1 1 &gt; 0 0 1 0 &gt; 0 0 0 2 und deshalb sind die Links rot. In unserem Beispiel kommt kein <code>style</code>-Attribut vor, deshalb ist bei keinem Selektor die Kategorie A besetzt. W\u00e4re bei einem Link im HTML beispielsweise: </p> <pre><code>&lt;li&gt;&lt;a href=\"startseite.html\" class=\"link\" style=\"color: orange;\"&gt;Startseite&lt;/a&gt;&lt;/li&gt;\n</code></pre> <p>dann w\u00e4re dieser Link orange. </p>"},{"location":"css/#weitere-informationen-uber-css","title":"Weitere Informationen \u00fcber CSS","text":"<ul> <li>Folien CSS</li> <li>W3Schools - CSS</li> <li>Mozilla Developer - CSS</li> <li>Selfhtml - CSS</li> <li>W3C - CSS</li> </ul>"},{"location":"deployment/","title":"Deployment","text":"<p>Das in RxJS und Gurads erstellte Projekt zur einfachen Nutzerverwaltung soll hier deployed werden. Wir werden unterschiedliche M\u00f6glichkeiten des Deployments zeigen. Wichtig ist, dass wir das Frontend und das Backend jeweils unabh\u00e4ngig voneinander deployen. </p>"},{"location":"deployment/#backend-deployment-mittels-render","title":"Backend-Deployment mittels Render","text":"<p>Lange hatte Heroku ist eine kostenfreie cloud-basierte Plattform zum Betrieb von Applikationen bereitgestellt. Leider ist diese nun nicht mehr (ganz) kostenfrei. Insbesondere m\u00fcssen Sie nun, selbst bei kostenfreier Nutzung von Heroku eine Zahlungsmethode hinterlegen. Dasselbe gilt f\u00fcr die AWS Cloud. Damit entfallen diese M\u00f6glichkeiten f\u00fcr uns. Aber es gibt Render und dort ist zum Gl\u00fcck die kostenfreie Nutzung (auch ohne Zahlungsmittel zu hinterlegen) m\u00f6glich. Allerdings muss man sich registrieren, kann daf\u00fcr aber auch den GitHub-Account (oder GitLab oder Google) nutzen. Nach dem Einloggen in Render erscheint folgendes Dashboard:</p> <p></p>"},{"location":"deployment/#eigenes-backend-repository","title":"Eigenes Backend-Repository","text":"<p>Wichtig ist, dass Sie Ihr Backend in einem eigenen Repository haben, damit Sie explizit auf das Backend verweisen k\u00f6nnen. Das hei\u00dft, Ihr Repository auf Github (Sie k\u00f6nnen auch GitLab w\u00e4hlen) sollte ungef\u00e4hr so aussehen:</p> <p></p> <p>Achten Sie darauf, dass Sie <code>.env</code>, <code>/node_modules</code> und <code>package-lock.json</code> in die <code>.gitignore</code> eingetragen haben. Sollten Sie z.B. die <code>.env</code>-Datei <code>committed</code> haben, ehe Sie sie in die <code>.gitignore</code> eingetragen hatten, k\u00f6nnen Sie sie mit <code>git rm --cached .env</code> aus dem Git-Tracking entfernen. </p> <p>Klicken Sie nun im Render-Dashboard in der Karte <code>Web Services</code> auf den Button <code>New Web Service</code>. Es erscheint ein Formular <code>Create a new Web Service</code>. Tragen Sie in das Eingabefeld unter <code>Public Git repository</code> die URL zu Ihrem Repository ein, z.B. so:</p> <p></p> <p>Klicken Sie auf <code>Continue</code>. F\u00fcllen Sie das folgende Formular aus, z.B. so:</p> <p></p> <p>Als <code>Build command</code> k\u00f6nnen Sie ruhig <code>yarn</code> lassen. W\u00e4hlen Sie als <code>Instance Type</code> <code>Free</code> und klicken unten auf <code>Create Web Service</code>. Es kommen noch Fehler, da Sie noch keine <code>Environment</code>-Variablen gesetzt haben (die ja in der <code>.env</code>-Datei stehen, die nicht in Github hochgeladen wurde) . F\u00fcgen Sie deshalb unter <code>Environment</code> die Umgebungsvariablen aus der <code>.env</code>-Datei hinzu oder laden Sie dort Ihre <code>.env</code>-Datei hoch:</p> <p></p> <p>Sie k\u00f6nnen dann jederzeit <code>Manual Deploy</code> ausw\u00e4hlen und darin <code>Clear build cache &amp; deploy</code>. Prinzipiell sollte der Build-Prozess dann durchlaufen, allerdings endet er mit </p> <pre><code>Server started and listening on port 3000 ...\n</code></pre> <p>und nicht mit der Ausgabe, dass sich auch mit der MongoDB im Cloud-Atlas verbunden wurde. Dazu sind zun\u00e4chst weitere Schritte notwendig. </p>"},{"location":"deployment/#mongodb-cloud-atlas-vorbereiten","title":"MongoDB Cloud Atlas vorbereiten","text":"<p>Wenn Sie MongoDB Atlas verwenden, dann muss f\u00fcr diese ein App Service als eine Github Application installiert werden. Loggen Sie sich dazu in der Webanwendung von MongoDB Atlas ein und w\u00e4hlen Sie f\u00fcr Ihren cluster unter <code>Manage</code> den Men\u00fceintrag <code>Deployment</code>:</p> <p></p> <p>Klicken Sie auf den Link <code>Install App Services on GitHub</code> unter Schritt <code>1</code> der Anleitung. Es \u00f6ffnet sich ein GitHub-Tab im Browser und Sie k\u00f6nnen ausw\u00e4hlen, dass f\u00fcr Ihre Repositories der <code>MongoDB Atlas App Service</code> installiert werden soll. </p> <p></p> <p>Nach Auswahl erscheint</p> <p></p> <p>Wechseln Sie zur\u00fcck in das Render-Dashboard und geben Sie dort nun auch noch die Umgebungsvariablen <code>username</code> und <code>password</code> an. Die Werte dazu k\u00f6nnen Sie der <code>DB_CONNECTION</code>-URL entnehmen, also <code>mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.g3nbd.mongodb.net</code>. Wenn Sie nun erneut <code>Manual Deploy</code> ausw\u00e4hlen und darin <code>Clear build cache &amp; deploy</code>, dann erscheint</p> <pre><code>Server started and listening on port 3000 ...\nconnected to DB\n</code></pre> <p>und die Verbindung zu MongoDB Atlas wurde hergestllt. Die URL des Backends finden Sie links oben im Render-Dashboard:</p> <p></p> <p>In diesem Fall aus der Abbildung also <code>https://userbackend-cvf9.onrender.com</code>. Nun k\u00f6nnen wir beispielsweise mithilfe von Postman alle Endpunkte probieren, also z.B. <code>GET https://userbackend-cvf9.onrender.com/users</code>:</p> <p></p> <p>wenn bereits Daten in der Datenbank enthalten sind. </p> <p>Das Backend wird \u00fcbrigens immer neu deployed, sobald neue Daten in das GitHub-Repo committed und gepusht wurden, da oben in den Einstellungen des Deployments <code>Auto-Deploy</code> auf <code>Yes</code> gesetzt wurde. </p> <p>Wurden 30 Minuten keine Requests an das Backend geschickt, schickt Render die Anwendung in den Schlafmodus. Es dauert dann eine Weile, ehe ein weiterer Request beantwortet wird. </p> <p>\u00c4hnlich (fast genauso) wie bei Render funktioniert der gesamte Deployment-Prozess auch mit Railway. Eine detaillierte Beschreibung dazu finden Sie hier.</p>"},{"location":"deployment/#frontend-deployment-als-github-pages","title":"Frontend-Deployment als GitHub-Pages","text":"<p>Prinzipiell wird ein Angular-Projekt mithilfe des Befehls</p> <pre><code>ng build\n</code></pre> <p>deployed. Dadurch entsteht im Projektordner ein Ordern <code>dist/&lt;projektname&gt;</code>. Dieser Ordner enth\u00e4lt die <code>index.html</code> sowe einige <code>.js</code>-Dateien und eine <code>css</code>-Datei. Es handelt sich nun um eine statisches Projekt, welches einfach durch den Aufruf der <code>index.html</code> gestartet werden k\u00f6nnte, wenn nicht aufgrund der CORS policy das Laden der <code>.js</code>-Datein unterbunden w\u00e4re. Au\u00dferdem m\u00fcssen wir noch beachten, dass der Zugriff auf das Backend immer mit <code>localhost:3000</code> (oder einer leicht abweichenden <code>baseURL</code>) implementiert wurde. Dies muss ebenfalls angepasst werden. </p>"},{"location":"deployment/#eigenes-frontend-repository","title":"Eigenes Frontend-Repository","text":"<p>Wichtig ist, dass Sie Ihr Frontend in einem eigenen Repository haben, damit Sie explizit auf das Frontend verweisen und dieses separat deployen k\u00f6nnen. Wenn Sie Ihr Angular-Projekt mithilfe der Angular CLI (also mithilfe von <code>ng new</code>) erstellen, dann wird auch automatisch ein <code>.git</code>-Ordner angelegt, d.h. das Projekt ist unter Git-Verwaltung. Sie m\u00fcssen dann nur noch ein GitHub-Repository (am besten, ohne dort bereits eine <code>Readme.md</code>-Datei anzulegen, sonst haben Sie gleich einen Konflikt) erstellen und das Projekt-Repo mit dem Github-repo verbinden. Wie das geht, steht dann bereits auf der ersten Seite in GitHub sobald Sie das Repo dort erstellt haben. Die <code>.gitignore</code>-Datei ist durch die Angular CLI ebenfalls bereits gut configuriert. </p>"},{"location":"deployment/#angular-projekt-environments","title":"Angular-Projekt Environments","text":"<p>Derzeit haben wir nur die <code>development</code>-Environment von Angular verwendet und z.B. als <code>baseURL</code> f\u00fcr den Zugriff auf das Backend <code>localhost:3000</code> o.\u00e4. angegeben. Wir wollen nun unterscheiden, ob wir noch in der Entwicklung oder bereits in der Produktion sind. Dazu konfigurieren wir eine Environment f\u00fcr unser Projekt. Im Angular-Projekt geben wir ins Terminal dazu </p> <pre><code>ng generate environments\n</code></pre> <p>ein. Sollte die Eingabe einen Fehler erzeugen, dann ist Ihre Angular CLI zu alt. Sie sollten dann <code>ng update @angular/cli @angular/core</code> ausf\u00fchren. Danach klappt <code>ng generate environments</code>. </p> <p>Es wird ein Ordner <code>/src/environments</code> erstellt, in dem zun\u00e4chst 2 Datein sind <code>environment.development.ts</code> und <code>environment.ts</code>. Sie k\u00f6nnen diesem Ordner weitere Dateien hinzuf\u00fcgen, wenn Sie weitere Umgebungen konfigurieren wollen. Wir belassen es bei diesen beiden Dateien, da wir in der <code>environment.development.ts</code> die Entwicklungsumgebung beschreiben k\u00f6nnen und in der <code>environment.ts</code> die Produktionsumgebung. </p> <p>Die beiden Datein konfigurieren wir zun\u00e4chst so:</p> environment.tsenvironment.development.ts <pre><code>export const environment = {\nproduction: true,\napiUrl: 'https://userbackend-cvf9.onrender.com'\n};\n</code></pre> <pre><code>export const environment = {\nproduction: false,\napiUrl: 'http://localhost:3000'\n};\n</code></pre> <p>Nun binden wir die <code>environment.ts</code> in unseren Service ein, in dem wir die <code>apiUrl</code> nutzen wollen:</p> auth.service.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { User } from './user';\nimport { environment } from '../../environments/environment';\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AuthService {\nbaseUrl = environment.apiUrl;\nuser: User = {username: '', password: '', email: '', role: ''};\nuserChange: Subject&lt;User&gt; = new Subject&lt;User&gt;();\nloggedIn = false;\nloggedInChange: Subject&lt;boolean&gt; = new Subject&lt;boolean&gt;();\n\nconstructor(private http: HttpClient) {\nthis.loggedInChange.subscribe((value) =&gt; {\nthis.loggedIn = value\n});\nthis.userChange.subscribe((value) =&gt; {\nthis.user = value\n});\n}\n\ngetAllUsers(): Observable&lt;User[]&gt;{\nreturn this.http.get&lt;User[]&gt;(this.baseUrl + '/users');\n}\n\ngetOneUser(username: string): Observable&lt;User&gt;{\nreturn this.http.get&lt;User&gt;(this.baseUrl + '/users/' + username);\n}\n\nregisterUser(user:User): Observable&lt;any&gt; {\nreturn this.http.post(this.baseUrl + '/users/register', user);\n}\n\nloginUser(username: string, password: string ): Observable&lt;any&gt;{\nreturn this.http.post(this.baseUrl + '/users/login/', { username: username, password: password }, {observe: 'response'});\n}\n\nisLoggedin(): boolean {\nreturn this.loggedIn;\n}\n\nlogin(user: User): void {\nthis.loggedIn = true\nthis.loggedInChange.next(this.loggedIn);\nthis.user = user;\nthis.userChange.next(this.user);\nconsole.log('login() : ', this.user);\n}\n\nlogout(): void {\nthis.loggedIn = false;\nthis.loggedInChange.next(this.loggedIn);\nthis.user = {username: '', password: '', email: '', role: ''};\nthis.userChange.next(this.user);\n}\n\nisAdmin(): boolean {\nif(this.user?.role === 'admin')\n{\nreturn true;\n}\nreturn false;\n}\n\nisUser(): boolean {\nif(this.user?.role === 'user')\n{\nreturn true;\n}\nreturn false;\n}\n}\n</code></pre> <p>Wenn nun <code>ng build</code> ausgef\u00fchrt wird, dann wird die <code>environment.ts</code> importiert und der dort hinterlegte Wert f\u00fcr die <code>apiUrl</code> verwendet. Wenn wir jedoch <code>ng build --watch --configuration development</code> ausf\u00fchren, dann soll die <code>environment.development.ts</code> verwendet werden. Dazu erweitern wir die <code>package.json</code> um ein <code>fileReplacement</code>. Darin geben wir an, dass f\u00fcr die <code>configuration development</code> die Datei <code>environment.ts</code> durch die <code>environment.development.ts</code> ersetzt werden soll. </p> package.json <pre><code>{\n\"name\": \"frontend\",\n\"version\": \"0.0.0\",\n\"scripts\": {\n\"ng\": \"ng\",\n\"start\": \"ng serve\",\n\"build\": \"ng build\",\n\"watch\": \"ng build --watch --configuration development\",\n\"test\": \"ng test\"\n},\n\"private\": true,\n\"dependencies\": {\n\"@angular/animations\": \"^15.1.1\",\n\"@angular/cdk\": \"^15.0.4\",\n\"@angular/common\": \"^15.1.1\",\n\"@angular/compiler\": \"^15.1.1\",\n\"@angular/core\": \"^15.1.1\",\n\"@angular/forms\": \"^15.1.1\",\n\"@angular/material\": \"^15.0.4\",\n\"@angular/platform-browser\": \"^15.1.1\",\n\"@angular/platform-browser-dynamic\": \"^15.1.1\",\n\"@angular/router\": \"^15.1.1\",\n\"rxjs\": \"~7.5.0\",\n\"tslib\": \"^2.3.0\",\n\"zone.js\": \"~0.12.0\"\n},\n\"devDependencies\": {\n\"@angular-devkit/build-angular\": \"^15.1.2\",\n\"@angular/cli\": \"~15.1.2\",\n\"@angular/compiler-cli\": \"^15.1.1\",\n\"@types/jasmine\": \"~4.3.0\",\n\"jasmine-core\": \"~4.5.0\",\n\"karma\": \"~6.4.0\",\n\"karma-chrome-launcher\": \"~3.1.0\",\n\"karma-coverage\": \"~2.2.0\",\n\"karma-jasmine\": \"~5.1.0\",\n\"karma-jasmine-html-reporter\": \"~2.0.0\",\n\"typescript\": \"~4.8.2\"\n},\n\"configurations\": {\n\"development\": {\n\"fileReplacements\": [\n{\n\"replace\": \"src/environments/environment.ts\",\n\"with\": \"src/environments/environment.development.ts\"\n}\n]\n}\n}\n}\n</code></pre> <p>Wenn wir nun das Projekt mithilfe von <code>ng build --watch --configuration development</code> compilieren, dann werden alle notwendigen Dateien in den <code>dist/&lt;projektname&gt;</code> Ordner \u00fcbersetzt. Schauen wir uns dort die <code>main.js</code> an, dann finden wir </p> /dist//main.js <pre><code>/***/ 2340:\n/*!*****************************************!*\\\n  !*** ./src/environments/environment.ts ***!\n  \\*****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) =&gt; {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"environment\": () =&gt; (/* binding */ environment)\n/* harmony export */ });\nconst environment = {\nproduction: false,\napiUrl: 'http://localhost:3000'\n};\n\n/***/ }),\n</code></pre> <p>Wenn wir aber das Projekt mithilfe von <code>ng build</code> compilieren, dann werden ebenfalls alle notwendigen Dateien in den <code>dist/&lt;projektname&gt;</code> Ordner \u00fcbersetzt. Dann steht dort in der <code>main.js</code> aber</p> /dist//main.js <pre><code>/***/ 2340:\n/*!*****************************************!*\\\n  !*** ./src/environments/environment.ts ***!\n  \\*****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) =&gt; {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"environment\": () =&gt; (/* binding */ environment)\n/* harmony export */ });\nconst environment = {\nproduction: true,\napiUrl: 'hhttps://userbackend-cvf9.onrender.com'\n};\n\n/***/ }),\n</code></pre>"},{"location":"deployment/#deployment-bei-vercel","title":"Deployment bei Vercel","text":"<p>Das Deployment des Angular-Projektes ist dann sehr einfach. Committen und pushen Sie Ihr Projekt nach Github. Loggen Sie sich mit Ihrem Github-Account bei Vercel ein. Verbinden Sie Ihr Repository mit Vercel, installieren Sie die Vercel App bei Github und voil\u00e0: hier erreichbar unter <code>https://userfrontend-one.vercel.app/</code>:</p> <p></p> <p>mit allen (CRUD-)Funktionalit\u00e4ten. Sowohl Backend als auch Frontend sind nun permanent und f\u00fcr alle verf\u00fcgbar. Detaillierte Informationen zum Deployment von Angular Projekten finden Sie hier und hier.</p> <p>Success</p> <p>Wir haben unsere Webanwendung nun permanent und \u00f6ffentlich verf\u00fcgbar gemacht. Das Backend und das Frontend wurden jeweils deployed und werden von einem \u00f6ffentlichen Dienst betrieben. </p>"},{"location":"einfuehrung/","title":"Webtechnologien - Einf\u00fchrung","text":"<p>Als ein wesentlicher Begr\u00fcnder des World Wide Webs gilt Tim Berners Lee. Er begann 1989 mit einem Projekt, dessen Ergebnisse </p> <ul> <li>der erste Browser,</li> <li>der erste Webserver,</li> <li>HTTP und </li> <li>HTML</li> </ul> <p>waren. Hier werden die wesentlichen Begriffe erl\u00e4utert, die bei den Webtechnologien eine Rolle spielen.  </p>"},{"location":"einfuehrung/#internet","title":"Internet","text":"<p>Das Internet ist ein Netzwerk von Rechnernetzen (Interconnected Network - InterNet). Es handelt sich also um miteinander verbundene Rechnernetze. </p> <p></p> <p>Das Internet ist aus dem ARPANET (Advanced Research Projects Agency Network) entstanden, welches Ende der 1960er Jahre am MIT und im US-Verteidigungsministerium entwickelt wurde. Die folgende Abbildung zeigt das komplette ARPANET im Jahre 1973:</p> <p></p> <p>Die erste Daten\u00fcbertragung im ARPANET erfolgte 1969. Zwei wesentliche Konzepte wurden daf\u00fcr (im Laufe der folgenden Jahre) entwickelt:</p> <ul> <li>die eindeutige Adressierbarkeit der einzelnen Rechner im ARPANET/Internet und</li> <li>das Transportprotokolle, das die Daten\u00fcbertragung (in Datenpaketen) erm\u00f6glichte.</li> </ul> <p>Es entstand eine Internetprotokollfamilie: das Internet Protocol (IP).</p>"},{"location":"einfuehrung/#internet-protocol","title":"Internet Protocol","text":"<p>Das Internet Protocol ist im OSI-Schichtenmodell die erste Schicht, die unabh\u00e4ngig vom eigentlichen \u00dcbetragungsmedium ist. Ein wesentlicher Teil der Definition des Internet Protocols nehmen die IP-Adressen ein. Die IP-Adressen des Internet Protocols Version 4 (v4) bestehen aus 32 Bits und sind in 4 Bl\u00f6cke unterteilt, die durch einen Punkt getrennt sind. In Dezimaldarstellung kann jeder dieser vier Bl\u00f6cke die Werte von <code>0</code> bis <code>255</code> annehmen. Eine IP-Adresse der HTW sieht z.B. so aus:</p> <pre><code>141.45.66.214\n</code></pre> <p>Die ersten drei Zahlenbl\u00f6cke bilden den Netzanteil und der letzte Zahlenblock gibt den Hostanteil an. Die Aufteilung dieser Anteile kann allerdings durch eine Subnetzmaske festgelegt bzw. ge\u00e4ndert werden. Die genannte Aufteilung gilt f\u00fcr eine Subnetzmaske <code>255.244.255.0</code>. </p> <p>Die Kommunikation zwischen den Teilnetzen erfolgt \u00fcber einen Router. Unter Verwendung von IPv4 lassen sich <code>2^32 = 256^4 = 4.294.967.296</code> Adressen unterscheiden. Da die Anzahl der Rechner, die mit dem Internet verbunden sind, in den vergangenen Jahren enorm gestiegen ist und weitere Ger\u00e4te (siehe Internet of Things) hinzukommen werden, reicht dieser Adressraum nicht mehr aus und es wurde IPv6 spezifiziert, in dem 128 Bit zur Adressierung verwendet werden und somit <code>2^128</code> Adressen zur Verf\u00fcgung stehen. Das gen\u00fcgt erstmal (Diese Anzahl reicht aus, um f\u00fcr jeden Quadratmillimeter der Erdoberfl\u00e4che mindestens 665.570.793.348.866.944 (= 6,65 \u00b7 10^17) IP-Adressen bereitzustellen Wikipedia).</p> <p>Die \u00dcbertragung der Datenpakete zwischen zwei Hosts (Rechner mit jeweiliger IP-Adresse) wird auf der Transportschicht durch das Transmission Control Protocol (TCP) geregelt. Dabei kommunizieren die beiden sich verbindenden Rechner im Vollduplex, d.h. beide Rechner k\u00f6nnen sowohl Daten empfangen als auch senden. Die herstellung der Verbindung zwischen den beiden Rechnern erfogt \u00fcber einen Handshake. Die jeweiligen Datenpakete bestehen aus einem Header und den eigentlichen Daten. Ein Paket wird so oft gesendet, bis der Empfang best\u00e4tigt wurde. TCP wird als Transportprotokoll f\u00fcr viele Internet-Dienste verwendet, z.B. f\u00fcr WWW und f\u00fcr E-Mail. Dabei darf das Transportprotokoll (Transportschicht) nicht mit einem Protokoll der Anwendungsschicht (ist \u00fcber der Transportschicht) verwechselt werden. Das HTTP (Anwendungsschicht) nutzt TCP genauso wie SMTP. </p>"},{"location":"einfuehrung/#internet-dienste","title":"Internet-Dienste","text":"<p>Das Internet (der Verbund aus Rechnernetzen) stellt zusammen mit dem Internet Protocol eine Infrastruktur f\u00fcr verschiedene Dienste zur Verf\u00fcgung. Dienste stellen M\u00f6glichkeiten dar, das Internet zu nutzen. Zu solchen Diensten geh\u00f6ren z.B. (in Klammern die verwendteen Protokolle):</p> <ul> <li>E-Mail (SMTP, POP3, IMAP), </li> <li>File Transfer (FTP), </li> <li>World Wide Web (HTTP, HTTPS),</li> <li>Secure Shell (SSH),</li> <li>Namensaufl\u00f6sung (DNS),</li> <li>Internet-Telefonie (VoIP), Video-Chat, Video on Demand usw. </li> </ul> <p>Das WWW ist also ein Dienst f\u00fcr die Infrastruktur Internet! Die beiden Begriffe werden h\u00e4ufig f\u00e4lschlicherweise synonym verwendet.</p>"},{"location":"einfuehrung/#hypertext-transfer-protocol-http","title":"Hypertext Transfer Protocol (HTTP)","text":"<p>Das Hypertext Transfer Protocol ist ein Protokoll der Anwendungsschicht, aufbauend auf das TCP der Transportschicht. Es wird verwendet, um Daten von einem Rechner (dem Webserver) auf einen anderen Rechner (dem Client mit einem Webbrowser) zu \u00fcbetragen (und vice versa). Es wurde von Tim Berners Lee entwickelt und nun vom World Wide Web Consortium (W3C) standardisiert. Es unterscheidet nur wenige Anfragemethoden (folgende Liste nicht ganz vollst\u00e4ndig):</p> <ul> <li><code>GET</code>: fragt eine Ressource (Daten/Datei) von einem Webserver an,</li> <li><code>POST</code>: schickt Daten vom Client an den Webserver, </li> <li><code>PUT</code>: schickt ebenfalls Daten an den Webserver, typischerweise, um Ressourcen zu aktualisieren, </li> <li><code>DELETE</code>: schickt Daten an den Server, um sie dort zu l\u00f6schen. </li> </ul> <p>Die wichtigste Anfragemethode ist <code>GET</code>, denn sie wird in den allermeisten F\u00e4llen verwendet, um eine Webseite von einem Webserver anzufragen. Wenn wir in die Konsole bspw. </p> <pre><code>curl https://www.htw-berlin.de/\n</code></pre> <p>eingeben, dann erhalten wir vom Webserver der HTW die Webseite der HTW. F\u00fcr <code>curl</code> siehe hier. Typischerweise werden die Anfragen an den Webserver aber von einem Browser aus durchgef\u00fchrt. Das hei\u00dft, die Anfrage <code>GET https://www.htw-berlin.de/</code> wird von einem Browser durchgef\u00fchrt, wenn wir in das URL-Eingabefeld <code>https://www.htw-berlin.de/</code> eingeben. Das prinzipielle Szenario ist also wie folgt:</p> <p> </p> <p>Der request beginnt mit einer der obigen Anfragemethoden und der angefragten Ressource (also z.B. <code>GET https://www.htw-berlin.de/index.html</code>). Die response besteht dann genau aus der angefragten Ressource (<code>index.html</code>), wenn sie existiert. Die Ressource muss nicht zwingend eine <code>html</code>-Seite sein, es kann sich auch um eine <code>xml</code>, <code>json</code> oder irgendein anderes Dateiformat handeln. </p> <p>Ein konkreter request und eine konkrete response ist im folgenden Bild zu sehen:</p> <p> </p> <p>In der response wird ein sogenannter HTTP-Statuscode mitgesendet. Die folgende Tabelle gibt einen kurzen \u00dcberblick \u00fcber diese Codes (siehe auch hier):</p> Methode Beschreibung <code>1xx</code> Verarbeitung des Requests dauert noch an. (Seltene) R\u00fcckmeldung, um Abbruch durch Zeit\u00fcberschreitung zu verhindern.              <code>2xx</code> Erfolgreiche Bearbeitung der Anfrage und R\u00fcckmeldung.  <code>200 OK</code> <code>3xx</code> Angeforderte Ressource wurde verschoben (Umleitung).  <code>301 Moved Permanently</code> <code>4xx</code> Client-Fehler. Z.B. Request auf ein Dokument, das nicht existiert.  <code>404 Not Found</code> <code>5xx</code> Server-Fehler. Z.B. Server kann Anfrage nicht bearbeiten.  <code>500 Internal Server Error</code> <p>Ganz wichtig ist, dass das HTTProtokoll zustandslos ist. Das bedeutet, dass keine Informationen aus fr\u00fcheren Anfragen gespeichert oder anderweitig verwaltet werden. Das bedeutet aber auch, dass bspw. ein bef\u00fcllter Warenkorb durch HTTP gar nicht unterst\u00fctzt w\u00fcrde (f\u00fchere \"K\u00e4ufe\" k\u00f6nnen durch das Protokoll nicht ber\u00fccksichtigt werden). Um dieses Zustandslosigkeit zu umgehen, werden z.B. Cookies oder Session-IDs verwendet, um eine Historie der Anfragen beim Webserver erstellen und den Nutzern zuordnen zu k\u00f6nnen. </p> <p>HTTPS funktioniert wie HTTP, nur dass die Verbindung zwischen Browser und Webserver mittels Transport Layer Security (TLS) verschl\u00fcsselt wird. </p> <p>Ein Programm, welches das HTTProtokoll implementiert hat, ist Curl. Wenn Sie Curl installiert haben und im Terminal bspw. </p> <pre><code>curl -v http://freiheit.f4.htw-berlin.de/WT/index.html\n</code></pre> <p>eingeben (<code>-v</code> steht f\u00fcr den <code>verbose</code>-Modus), dann erhalten Sie</p> <pre><code>*   Trying 141.45.146.146...\n* TCP_NODELAY set\n* Connected to freiheit.f4.htw-berlin.de (141.45.146.146) port 80 (#0)\n&gt; GET /WT/index.html HTTP/1.1\n&gt; Host: freiheit.f4.htw-berlin.de\n&gt; User-Agent: curl/7.64.1\n&gt; Accept: */*\n&gt; \n&lt; HTTP/1.1 301 Moved Permanently\n&lt; Date: Fri, 08 Oct 2021 06:35:13 GMT\n&lt; Server: Apache/2.4.38 (Debian)\n&lt; Location: https://freiheit.f4.htw-berlin.de/WT/index.html\n&lt; Content-Length: 346\n&lt; Content-Type: text/html; charset=iso-8859-1\n&lt; \n&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;title&gt;301 Moved Permanently&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;h1&gt;Moved Permanently&lt;/h1&gt;\n&lt;p&gt;The document has moved &lt;a href=\"https://freiheit.f4.htw-berlin.de/WT/index.html\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;address&gt;Apache/2.4.38 (Debian) Server at freiheit.f4.htw-berlin.de Port 80&lt;/address&gt;\n&lt;/body&gt;&lt;/html&gt;\n* Connection #0 to host freiheit.f4.htw-berlin.de left intact\n* Closing connection 0\n</code></pre> <p>Sie erhalten also die Meldung vom Webserver, dass die Seite <code>index.html</code> nicht mehr unter dieser Adresse verf\u00fcgbar ist, sondern wegbewegt wurde (<code>Moved permanently</code>). Der Statuscode der Antwort ist <code>301</code>. Das ist anders, wenn die Anfrage an die Ressource <code>https://freiheit.f4.htw-berlin.de/WT/index.html</code> gestellt wird, also per <code>Transport Layer Security (TLS)</code> verschl\u00fcsselt wird:</p> <p><pre><code>*   Trying 141.45.146.146...\n* TCP_NODELAY set\n* Connected to freiheit.f4.htw-berlin.de (141.45.146.146) port 443 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/cert.pem\n  CApath: none\n* TLSv1.2 (OUT), TLS handshake, Client hello (1):\n* TLSv1.2 (IN), TLS handshake, Server hello (2):\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\n* TLSv1.2 (IN), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (IN), TLS handshake, Finished (20):\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\n* ALPN, server accepted to use http/1.1\n* Server certificate:\n*  subject: CN=freiheit.f4.htw-berlin.de\n*  start date: Aug  9 20:15:57 2021 GMT\n*  expire date: Nov  7 20:15:55 2021 GMT\n*  subjectAltName: host \"freiheit.f4.htw-berlin.de\" matched cert's \"freiheit.f4.htw-berlin.de\"\n*  issuer: C=US; O=Let's Encrypt; CN=R3\n*  SSL certificate verify ok.\n&gt; GET /WT/index.html HTTP/1.1\n&gt; Host: freiheit.f4.htw-berlin.de\n&gt; User-Agent: curl/7.64.1\n&gt; Accept: */*\n&gt; \n&lt; HTTP/1.1 200 OK\n&lt; Date: Fri, 08 Oct 2021 06:49:55 GMT\n&lt; Server: Apache/2.4.38 (Debian)\n&lt; Last-Modified: Wed, 17 Oct 2018 13:09:16 GMT\n&lt; ETag: \"f3-5786c60a5f2e6\"\n&lt; Accept-Ranges: bytes\n&lt; Content-Length: 243\n&lt; Vary: Accept-Encoding\n&lt; Content-Type: text/html\n&lt; \n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"de\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Webtech&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hallo FIW!&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n* Connection #0 to host freiheit.f4.htw-berlin.de left intact\n* Closing connection 0\n</code></pre> Sie sehen darin, dass der Webserver <code>freiheit.f4.htw-berlin.de</code> unter der IP <code>141.45.146.146</code> l\u00e4uft, das die Verbindung \u00fcber <code>TLSv1.2</code> hergestellt wird (Port <code>443</code>) und dass f\u00fcr die <code>GET</code>-Anfrage das HTTProtokoll in der Version <code>1.1</code> verwendet wird. Als response wird die HTML-Seite <code>index.html</code> zur\u00fcckgesendet. Der Status-Code der Antwort ist nun <code>200 OK</code>. F\u00fcr Curl siehe auch hier. </p>"},{"location":"einfuehrung/#uniform-resource-identifier-uri","title":"Uniform Resource Identifier (URI)","text":"<p>Uniform Resource Identifiers sind Zeichenfolgen, die Ressourcen eindeutig beschreiben und deren Zugriff darauf. Die bekannteste Unterart von URI sind Uniform Resource Locator (URL). H\u00e4ufig werden URL und URI synonym verwendet, was nicht ganz korrekt ist. </p> <p>Generell beschreiben URI:</p> <ul> <li>Wie kann ich auf die Ressource zugreifen (Zugriffsmethode)?</li> <li>Um welche Ressource handelt es sich (URI) bzw. wo befindet sich die Ressource im Netzwerk (URL)?</li> </ul> <p>Der generelle Aufbau einer URI ist wie folgt:</p> <pre><code>scheme://authority/path?query#fragment\n</code></pre> <ul> <li><code>scheme</code> kann z.B. <code>ftp</code>, <code>mailto</code>, <code>news</code>, <code>file</code> oder <code>http</code> sein. </li> <li><code>authority</code> beschreibt meistens einen Host, z.B. <code>freiheit.f4.htw-berlin.de</code> oder <code>freiheit.f4.htw-berlin.de:443</code> oder <code>141.45.146.146</code>.</li> <li><code>path</code> beschreibt den Pfad hin zur Ressource und die Ressource selbst, z.B. <code>WT/index.html</code>.</li> <li><code>query</code> ist ein (oder mehrere) Schl\u00fcssel-Werte-Paare der Form <code>key=value</code>. Das erste Schl\u00fcssel-Werte-Paar steht nach einem <code>?</code>, jedes weitere Schl\u00fcssel-Werte-Paar steht nach einem <code>&amp;</code>, z.B. <code>?search=webtech&amp;id=1234</code>.</li> <li><code>fragment</code> steht f\u00fcr eine bestimmte Stelle innerhalb der Ressource (z.B. ein Anker im HTML-Dokument)</li> </ul> <p>Ganz wichtig ist, dass URI (URL) keine Leerzeichen enthalten d\u00fcrfen (auch keine Umlaute! und manche Sonderzeichen, wie z.B. <code>?</code> und <code>&amp;</code> eine Bedeutung haben). Daraus ergibt sich, dass solche Zeichen maskiert werden. Z.B. wird ein Leerzeichen als <code>%20</code> maskiert. </p>"},{"location":"einfuehrung/#domain-name-system-dns","title":"Domain Name System (DNS)","text":"<p>Das Domain Name System (DNS) ist f\u00fcr die Aufl\u00f6sung von Namen nach IP-Adressen zust\u00e4ndig. Wenn wir bspw. in den Browser <code>https://freiheit.f4.htw-berlin.de</code> eingeben, dann wird eine <code>GET</code>-Anfrage an den Webserver mit dem Namen <code>freiheit.f4.htw-berlin.de</code> gestellt. Da die Kommunikation unter den Rechnern im Internet jedoch \u00fcber IP-Adressen erfolgt und nicht \u00fcber Namen, muss dieser Namen \"aufgel\u00f6st\" werden. Das \u00fcbernimmt das DNS. Es ermittelt f\u00fcr diesen Webserver die IP <code>141.45.146.146</code>. Das DNS funktioniert also wie eine Telefonauskunft, f\u00fcr einen konkreten Namen wird eine eindeutige IP ermittelt. </p> <p>Das DNS besteht aus sehr vielen Servern, die jeweils unabh\u00e4ngig voneinander (dezentral) arbeiten und die eine hierarchische Struktur des Namensraumes abbilden. F\u00fcr den Fall <code>freiheit.f4.htw-berlin.de</code> bedeutet das, dass zuerst die Server (Root-Server) angesprochen werden, die die Top-level-Domain <code>de</code> verwalten. Von diesen Servern wird man an die Server weitergelietet, die den Namensraum <code>htw-berlin</code> verwalten und so weiter bis die IP-Adresse vollst\u00e4ndig ermittelt und aufgel\u00f6st werden kann. </p> <p>Verfolgen l\u00e4sst sich diese Aufl\u00f6sung bspw. mithilfe des <code>dig</code>-Kommandos:</p> <pre><code>dig +trace +additional -t A freiheit.f4.htw-berlin.de\n</code></pre> <p>Dieses Kommande erzeugt z.B. folgende Ausgabe (gek\u00fcrzt):</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace +additional -t A freiheit.f4.htw-berlin.de\n;; global options: +cmd\n.           79476   IN  NS  d.root-servers.net.\n.           79476   IN  NS  f.root-servers.net.\n.           79476   IN  NS  c.root-servers.net.\n.           79476   IN  NS  k.root-servers.net.\n.           79476   IN  NS  i.root-servers.net.\n.           79476   IN  NS  g.root-servers.net.\n.           79476   IN  NS  h.root-servers.net.\n.           79476   IN  NS  j.root-servers.net.\n.           79476   IN  NS  b.root-servers.net.\n.           79476   IN  NS  a.root-servers.net.\n.           79476   IN  NS  e.root-servers.net.\n.           79476   IN  NS  l.root-servers.net.\n.           79476   IN  NS  m.root-servers.net.\n.           79476   IN  RRSIG   NS 8 0 518400 20211021050000 20211008040000 14748 . ;; Received 525 bytes from 192.168.178.1#53(192.168.178.1) in 11 ms\n\nde.         172800  IN  NS  s.de.net.\nde.         172800  IN  NS  n.de.net.\nde.         172800  IN  NS  a.nic.de.\nde.         172800  IN  NS  f.nic.de.\nde.         172800  IN  NS  l.de.net.\nde.         172800  IN  NS  z.nic.de.\nde.         86400   IN  DS  26755 8 2 F341357809A5954311CCB82ADE114C6C1D724A75C0395137AA397803 5425E78D\nde.         86400   IN  RRSIG   DS 8 1 86400 20211021050000 20211008040000 14748 . \ns.de.net.       172800  IN  A   195.243.137.26\ns.de.net.       172800  IN  AAAA    2003:8:14::53\nn.de.net.       172800  IN  A   194.146.107.6\nn.de.net.       172800  IN  AAAA    2001:67c:1011:1::53\na.nic.de.       172800  IN  A   194.0.0.53\na.nic.de.       172800  IN  AAAA    2001:678:2::53\nf.nic.de.       172800  IN  A   81.91.164.5\nf.nic.de.       172800  IN  AAAA    2a02:568:0:2::53\nl.de.net.       172800  IN  A   77.67.63.105\nl.de.net.       172800  IN  AAAA    2001:668:1f:11::105\nz.nic.de.       172800  IN  A   194.246.96.1\nz.nic.de.       172800  IN  AAAA    2a02:568:fe02::de\n;; Received 759 bytes from 198.41.0.4#53(a.root-servers.net) in 25 ms\n\nhtw-berlin.de.      86400   IN  NS  dns-2.dfn.de.\nhtw-berlin.de.      86400   IN  NS  infobloxv.htw-berlin.de.\ntjlb7qbojvmlf1s6gdriru7vsms1lg16.de. 7200 IN NSEC3 1 1 15 CA12B74ADB90591A TJLFG48H\nvkljn0takntiv7s3te6vlcveecv4kj34.de. 7200 IN NSEC3 1 1 15 CA12B74ADB90591A VKLN0C6F\ntjlb7qbojvmlf1s6gdriru7vsms1lg16.de. 7200 IN RRSIG NSEC3 8 2 7200 20211017040550 20211003023550 54729 de. \nvkljn0takntiv7s3te6vlcveecv4kj34.de. 7200 IN RRSIG NSEC3 8 2 7200 20211018032318 20211004015318 54729 de. \ninfobloxv.htw-berlin.de. 86400  IN  A   141.45.65.100\n;; Received 628 bytes from 2003:8:14::53#53(s.de.net) in 17 ms\n\nfreiheit.f4.htw-berlin.de. 28800 IN A   141.45.146.146\n;; Received 70 bytes from 141.45.65.100#53(infobloxv.htw-berlin.de) in 35 ms\n</code></pre> <p>Zuerst erfolgt die Abfrage \u00fcber die Root-Server und einige Weiterleitungsserver bis der Name vom DNS-Server der HTW <code>infobloxv.htw-berlin.de</code> (IP-Adresse <code>141.45.65.100</code>) schlussendlich aufgel\u00f6st wird. Man sieht auch, dass die Anfragen an die DNS-Server \u00fcber den Port <code>53</code> gesendet werden. </p> <p></p>"},{"location":"einfuehrung/#world-wide-web-www","title":"World Wide Web (WWW)","text":"<p>Die Grundidee von Webservern ist es, HTML-Dokumente zum Lesen zur Verf\u00fcgung zu stellen. HTML steht f\u00fcr Hypertext Markup Language. Dabei steht Hypertext f\u00fcr die Idee, in den Textdokumenten Hyperlinks auf andere Textdokumente (die auf dem gleichen oder anderen Webservern liegen) zu definieren. Ein Klick auf diese Hyperlinks liest die Dokumente vom Webserver und \u00f6ffnet sie im Browser. Stellt man alle diese Dokumente als Knoten dar und fasst man die Hyperlinks als eine Verbindung zwischen diesen Dokumenten (Knoten) auf, so entsteht das Bild eines Netzes (Web). Da es Webserver auf der ganzen Welt umspannt, wird vom World Wide Web gesprochen. </p> <p></p> <p>Das WWW ist also ein \u00fcber das Internet aufrufbares Hypertext-System aus lauter Webseiten. Heute spricht man eher von Hypermedien als von Hypertexten. Es ist eines von vielen Diensten des Internets. </p>"},{"location":"einfuehrung/#tim-berners-lee","title":"Tim Berners Lee","text":"<p>Es ist beeindruckend, wie viele der Webtechnologien erstmalig von Tim Berners Lee umgesetzt wurden. Er entwickelte</p> <ul> <li>HTML</li> <li>HTTP</li> <li>URL</li> <li>den ersten Webbrowser (WorldWideWeb) und</li> <li>den ersten Webserver (CERN httpd)</li> </ul> <p></p> <p>Keine dieser Entwicklungen wurden patentiert und konnten somit kostenfrei von allen genutzt werden, was der schnellen Verbreitung dieser Technologien diente. 1994 gr\u00fcndete er das World Wide Web Consortium (W3C), welches sich um die Standadisierung dieser und weiterer Webtechnologien k\u00fcmmert, siehe w3.org. </p>"},{"location":"fe-be-anbindung/","title":"Frontend-Backend-Anbindung","text":"<p>Wir haben jetzt ein Backend, das als REST-Server funngiert. \u00dcber die Endpunkte der REST-API k\u00f6nnen wir auf die einzelnen Funktionen des Backends zugreifen, um die Daten in der MongoDB (oder der PostgreSQL) zu manipulieren (erzeugen, lesen, \u00e4ndern und l\u00f6schen - CRUD). Unser Frontend stellt zur Zeit nur einen Daten-Service zur Verf\u00fcgung, der die Daten client-seitig verwaltet. Dies wollen wir jetzt \u00e4ndern. Das Frontend soll mit dem Backend kommunizieren, um die Daten zu nutzen, die das Backend zur Verf\u00fcgung stellt. </p> <p>Wir werden uns ein neues Frontend erstellen und dabei die einzelnen Schritte genauer untersuchen (bzw. wiederholen). Das hat folgende Vorteile:</p> <ul> <li>wir werden sicherer bei der Erstellung von Frontends mithilfe von Angular,</li> <li>wir m\u00fcssen nicht auf bestehende Frontends aufsetzen, die evtl. bei einigen von Ihnen nicht richtig funktionieren,</li> <li>wir haben die M\u00f6glichkeit, tiefer in die Prinzipien von Angular einzutauchen und wesentliche Prinzipien ausf\u00fchrlicher zu diskutieren. </li> </ul> <p>Ich werde das Frontend, das ich hier erstelle, <code>frontend</code> nennen. Der Name bleibt nat\u00fcrlich Ihnen \u00fcberlassen. Wir erstellen uns also neben unserem alten Frontend, neben dem Backend usw. in unserem Repository mithilfe von </p> <pre><code>ng new frontend --routing\n</code></pre> <p>ein neues Angular-Projekt und w\u00e4hlen CSS. Wir wechseln in den <code>frontend</code>-Ordner und erzeugen uns dort 6 neue Komponenten:</p> <pre><code>cd frontend \nng g c nav\nng g c footer\nng g c home\nng g c table\nng g c create\nng g c detail\n</code></pre> <p>Au\u00dferdem f\u00fcgen wir Bootstrap hinzu: </p> <pre><code>ng add @ng-bootstrap/ng-bootstrap\n</code></pre>"},{"location":"fe-be-anbindung/#navigation-und-routing","title":"Navigation und Routing","text":"<p>Wir passen unsere <code>nav</code>-Komponente an und k\u00f6nnen dabei gleich mal \u00fcberpr\u00fcfen, ob Bootstrap funktioniert. Den Code habe ich von hier entnommen. Au\u00dferdem erstellen wir noch einen <code>footer</code> und die <code>home</code>-Seite und legen die Routen fest:</p> nav.component.htmlfooter.component.htmlhome.component.htmlhome.component.css <pre><code>&lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n    &lt;div class=\"container-fluid\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"http://freiheit.f4.htw-berlin.de/webtech/fe-be-anbindung/\"&gt;WebTech&lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n    &lt;/button&gt;\n        &lt;div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"&gt;\n            &lt;div class=\"navbar-nav\"&gt;\n                &lt;a class=\"nav-link\" aria-current=\"page\" [routerLink]=\"'/'\"&gt;Home&lt;/a&gt;\n                &lt;a class=\"nav-link\" [routerLink]=\"'/table'\"&gt;Table&lt;/a&gt;\n                &lt;a class=\"nav-link\" [routerLink]=\"'/member'\"&gt;New&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre> <pre><code>&lt;div class=\"fixed-bottom text-white-50 bg-dark p-3 text-center\"&gt;\n    Frontendanbindung an das Backend\n&lt;/div&gt;    \n</code></pre> <pre><code>&lt;main class=\"d-flex align-items-center min-vh-100\"&gt;\n    &lt;div class=\"container text-center\"&gt;\n        Welcome home!\n    &lt;/div&gt;\n&lt;/main&gt;  \n</code></pre> <pre><code>main {\nbackground-color: grey;\n}\n</code></pre> <p>Hier die Routendefinitionen und das Einbinden der Komponenten:</p> app-routing.module.tsapp.component.html <pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CreateComponent } from './create/create.component';\nimport { DetailComponent } from './detail/detail.component';\nimport { HomeComponent } from './home/home.component';\nimport { TableComponent } from './table/table.component';\n\nconst routes: Routes = [{\npath: \"\",\ncomponent: HomeComponent,\npathMatch: 'full'\n},\n{\npath: \"table\",\ncomponent: TableComponent\n},\n{\npath: \"member\",\ncomponent: CreateComponent\n},\n{\npath: \"member/:id\",\ncomponent: DetailComponent\n}];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <pre><code>&lt;app-nav&gt;&lt;/app-nav&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;app-footer&gt;&lt;/app-footer&gt;\n</code></pre> <p>Wir geben im Terminal innerhalb des <code>frontend</code>-Ordners <code>ng serve</code> ein, um das Projekt zu starten. Die Startseite sollte nun so aussehen:</p> <p></p> <p>bzw. bei breiterem Viewport:</p> <p></p> <p>Die Routen sollten ebenfalls funktionieren, d.h. wenn Sie auf die Men\u00fceintr\u00e4ge in der Navigation klicken, wird die entsprechende Komponente angezeigt. </p>"},{"location":"fe-be-anbindung/#service-fur-http","title":"Service f\u00fcr HTTP","text":"<p>Wir bereits beim Routing-Thema eingef\u00fchrt, erstellen wir auch nun wieder einen Service zur Verwaltung der Daten. Dieses Mal sind die Daten aber nicht direkt im Code, sondern wir greifen mit dem Service auf das Backend zu, vielmehr auf die Endpunkte des Backends:</p> Methode URL Bedeutung GET /members hole alle Datens\u00e4tze GET /members/11 hole den Datensatz mit der id=11 POST /members f\u00fcge einen neuen Datensatz hinzu PATCH /members/11 \u00e4ndere den Datensatz mit der id=11 DELETE /members/11 l\u00f6sche den Datensatz mit der id=11 DELETE /members l\u00f6sche alle Datens\u00e4tze <p>Wobei der Wert der <code>id</code> nur ein Beispiel ist.  </p> <p>Achtung!</p> <p>Damit wir \u00fcberhaupt das Backend nutzen k\u00f6nnen, muss es laufen! Vergessen Sie also nicht, Ihr Backend zu starten!</p> <p>Wir erstellen uns im Ordner <code>shared</code> einen <code>backend</code>-Service:</p> <pre><code>ng g service shared/backend\n</code></pre> <p>In diesem Service wollen wir ein Modul verwenden, dass die Kommunikation mit dem Backend per HTTP erm\u00f6glicht. Diese Modul hei\u00dft <code>HttpClientModule</code> und muss zun\u00e4chst f\u00fcr die Anwendung in <code>app.module.ts</code> importiert werden:</p> app.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavComponent } from './nav/nav.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { TableComponent } from './table/table.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HomeComponent } from './home/home.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DetailComponent } from './detail/detail.component';\nimport { CreateComponent } from './create/create.component';\n\n@NgModule({\ndeclarations: [\nAppComponent,\nNavComponent,\nFooterComponent,\nTableComponent,\nHomeComponent,\nDetailComponent,\nCreateComponent\n],\nimports: [\nBrowserModule,\nAppRoutingModule,\nBrowserAnimationsModule,\nHttpClientModule\n],\nproviders: [],\nbootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>Das <code>HttpClientModule</code> enth\u00e4lt einen Service <code>HttpClient</code>, der alle HTTP-Anfragemethoden, also <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code> usw. als Funktionen bereitstellt. Diesen Service wollen wir in unserem <code>backend</code>-Service verwenden und binden ihn deshalb dort per dependency injection ein:</p> shared/backend.service.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class BackendService {\n\nconstructor(private http: HttpClient) { }\n}\n</code></pre> <p>Im Sinne der Typsicherheit erstellen wir uns auch hier wieder ein Interface f\u00fcr unsere Daten, um diesen als Typ zu verwenden. Beim letzten Mal hatten wir das Interface generisch <code>Data</code> genannt. Wir nennen es nun konkreter <code>Member</code> und erstellen es ebenfalls im <code>shared</code>-Ordner:</p> <pre><code>ng g interface shared/member\n</code></pre> <p>Wir \u00fcbernehmen hier das Datenmodell, das wir f\u00fcr die MongoDB gew\u00e4hlt hatten. Bei der PostgreSQL hatten die Eigenschaften andere Namen (<code>id</code>, <code>firstname</code>, <code>lastname</code>)! Das sollte dann entsprechend angepasst werden - je nachdem, welches Backend verwendet wird. </p> shared/member.ts <pre><code>export interface Member {\n_id: string;\nfirstname: string;\nlastname: string;\nemail: string;\nipaddress: string;\n}\n</code></pre>"},{"location":"fe-be-anbindung/#get-funktion-von-httpclient","title":"<code>get()</code>-Funktion von <code>HttpClient</code>","text":"<p>Wir erstellen nun die erste \"Verkn\u00fcpfung\" mit dem Backend und implementieren ein <code>GET</code>-Request an das Backend, um alle <code>members</code> abzufragen. Dazu verwenden wir die <code>get()</code>-Funktion des <code>HttpClient</code>-Services. </p> <p>Die einfachste Form der Anwendung der <code>get()</code>-Funktion besteht darin, dieser Funktion die entsprechende URL des Backends zu \u00fcbergeben. In unserem Fall also </p> <pre><code>http.get('http://localhost:3000/members');\n</code></pre> <p>Diese Funktion gibt ein sogenanntes Observable zur\u00fcck. Observables implementieren das Observer Pattern - ein Design Pattern zur Kommunikation zwischen einem sogenannte subject, das einen oder mehrere observers beobachtet und das immer dann informiert wird, sobald sich der Zustand eines observers ge\u00e4ndert hat. Eine typische Implementierung des Observer Patterns findet durch Ereignis-Listener statt. Jemand (das subject) meldet sich an einem observer an, z.B. einem Button (genauer gesagt, an das Click-Ereignis des Buttons) und wird informiert, sobald der Button gecklickt wurde. </p> <p>Die Grundidee bei Observables in TypeScript ist die, dass es eine Funktion gibt, die Werte ermittelt (z.B. <code>http.get()</code>), aber diese Funktion nur ausgef\u00fchrt wird, wenn sie jemand <code>subscribe</code>d. <code>subscribe()</code> ist also wie eine Anmeldung an den zu beobachtenden Wert. </p> <p>Wir schauen uns dieses Prinzip mal mit der <code>get()</code>-Funktion des <code>HttpClient</code>s an:</p> src/app/shared/backend.service.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Member } from './member';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class BackendService {\nbaseUrl = 'http://localhost:3000/members';\nconstructor(private http: HttpClient) { }\n\ngetAll(): Observable&lt;Member[]&gt;{\nreturn this.http.get&lt;Member[]&gt;(this.baseUrl);\n}\n}\n</code></pre> <p>Zun\u00e4chst einmal sehen wir in Zeile <code>15</code> den Aufruf der <code>get()</code>-Funktion von <code>HttpClient</code>. Der <code>get()</code>-Funktion wird als Parameter die URL des Backends \u00fcbergeben. Diese ist in der Eigenschaft <code>baseUrl</code> in Zeile <code>10</code> definiert. </p> <p>Die R\u00fcckgabe der <code>get()</code>-Funktion ist, wie gesagt, ein <code>Observable</code>. Wir erzeugen den Aufruf der <code>get()</code>-Funktion in einer von uns erstellten Funktion <code>getAll()</code>deren R\u00fcckgabetyp dieses <code>Obervable</code> ist (Zeile <code>14</code>). Dieses <code>Observable</code> ist sogar typisiert, n\u00e4mlich mit unserem Datenmodell-Typ <code>Member</code>. Vielmehr bekommen wir ein Array von <code>Member</code>-Objekten zur\u00fcck, deshalb <code>Observable&lt;Member[]&gt;</code> als R\u00fcckgabetyp der <code>getAll()</code>-Funktion. Da wir diesen R\u00fcckgabetyp so konkret angeben (und nicht einfach nur <code>Observable</code> oder <code>Observable&lt;any&gt;</code>, erfordert TypeScript auch, dass wir die <code>get()</code>-Funktion typisieren - deshalb <code>get&lt;Member[]&gt;()</code>.</p> <p>Wir m\u00fcssen sowohl <code>Observable</code> (aus <code>rxjs</code>) als auch <code>Member</code> (aus unserer <code>member.ts</code>) importieren (Zeilen <code>3</code> und <code>4</code>). Nun m\u00fcssen wir uns noch an dieses <code>Observable</code> mittels <code>subscribe()</code> anmelden. Das machen wir in unserer <code>TableComponent</code>.</p>"},{"location":"fe-be-anbindung/#subscribe","title":"<code>subscribe()</code>","text":"<p>In unserer <code>TableComponent</code> wollen wir die <code>getAll()</code>-Funktion unseres Backend-Services nutzen, um uns alle <code>members</code>-Datens\u00e4tze vom Backend anfragen und anzeigen zu lassen. Wir \u00f6ffnen dazu die <code>table.component.ts</code>:</p> src/app/table.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { BackendService } from '../shared/backend.service';\nimport { Member } from '../shared/member';\n\n@Component({\nselector: 'app-table',\ntemplateUrl: './table.component.html',\nstyleUrls: ['./table.component.css']\n})\nexport class TableComponent implements OnInit {\nmembers!: Member[];\n\nconstructor(private bs: BackendService) { }\n\nngOnInit(): void {\nthis.readAll();\n}\n\nreadAll(): void {\nthis.bs.getAll().subscribe(\n{\nnext: (response) =&gt; {\nthis.members = response;\nconsole.log(this.members);\nreturn this.members;\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('getAll() completed')\n})\n}\n}\n</code></pre> <p>Zun\u00e4chst binden wir den <code>BackendService</code> mittels dependency injection in unsere Komponente ein (Zeile <code>13</code>). In einer eigenen Funktion <code>readAll()</code> rufen wir nun die <code>getAll()</code>-Funktion des <code>BackendService</code> auf (Zeile <code>20</code>). Wie in dem Abschnitt zuvor erl\u00e4utert, wird diese Funktion nur durch ein <code>subscribe()</code> ausgef\u00fchrt. Die <code>subscribe()</code>-Funktion \"holt\" das <code>Observer</code>-Objekt, welches drei sogenannte callback-Funktionen definiert: <code>next</code>, <code>error</code> und <code>complete</code>. Callback-Funktionen sind hier erl\u00e4utert. Wir haben also drei Parameter in der <code>subscribe()</code>-Funktion, von denen jedoch nur einer (<code>next</code>) erforderlich ist. <code>error</code> und <code>complete</code> sind optional. </p> <p>Unter <code>next</code> erhalten wir die <code>response</code> zur\u00fcck, also das angefragte Objekt. Wir verwenden daf\u00fcr eine Arrow-Funktion (siehe Arrow-Funktionen). Wie wir diese Funktion nennen, bleibt uns \u00fcberlassen. Hier hei\u00dft sie <code>response</code>. Der Inhalt dieser Funktion ist die Zuweisung der <code>response</code> auf unsere Eigenschaft <code>members</code> vom Typ <code>Member[]</code> (definiert in Zeile <code>11</code>) und der R\u00fcckgabe der <code>response</code> (wir geben <code>this.members</code> zur\u00fcck, entspricht aber genau der <code>response</code>). Die Konsolenausgabe kann nat\u00fcrlich auch weggelassen werden. </p>"},{"location":"fe-be-anbindung/#backend-starten","title":"Backend starten","text":"<p>Um die Anbindung an das Backend zu testen, d\u00fcrfen wir nicht vergessen, es zu starten! Wechseln Sie im Terminal in Ihren Backend-Ordner und rufen dort</p> <pre><code>node server.js </code></pre> <p>auf. Es erscheint im Terminal (wenn das MongoDB-Backend gestartet wird)</p> <pre><code>Server started and listening on port 3000 ... \nconnected to DB\n</code></pre>"},{"location":"fe-be-anbindung/#frontend-starten","title":"Frontend starten","text":"<p>Wir m\u00fcssen unser Frontend compilieren <code>ng serve</code> und wenn wir dann im Browser <code>http://localhost:4200/table</code> eingeben, also die Route zu unserer <code>TableComponent</code>, dann sollten wir in der Konsole in den Entwicklertools die Ausgabe der Response sehen (die <code>id</code>s und auch die Anzahl der Eintr\u00e4ge k\u00f6nnen bei Ihnen anders sein):</p> <p></p> <p>Achtung! Man sieht nichts auf der Webseite, sondern wir geben die Datens\u00e4tze derzeit nur in der Konsole der Entwicklertools aus! </p> <p></p> <p>Success</p> <p>Wir haben das Backend an das Frontend angebunden. Wir haben die erste Anfrage an das Backend im Frontend umgesetzt, n\u00e4mlich <code>GET /members</code>, indem wir im Frontend die <code>get()</code>-Funktion des <code>HttpClient</code> implementiert und diese in der <code>TableComponent</code>mittels <code>subscribe()</code> ausgef\u00fchrt haben. Wir werden nun zun\u00e4chst die Daten noch im HTML-Template darstellen und dann weitere Endpunkte unserer REST-API anbinden. </p>"},{"location":"fe-be-anbindung/#r-ead-tablecomponent","title":"R-ead -- TableComponent","text":"<p>Wir wollen eine ansprechende Ansicht der Daten erzeugen. Wir werden die Daten in einer Tablle anzeigen und verwenden dazu Bootstrap-CSS-Klassen f\u00fcr das Design. Dazu wollen wir auch Bootstrap-Icons (oder auch diese) verwenden. Diese installieren wir mit </p> <pre><code>npm i bootstrap-icons\n</code></pre> <p>(f\u00fcr die ngx-bootstrap-icons m\u00fcssten Sie <code>npm i ngx-bootstrap-icons</code> eingeben). Um die Icons in der <code>TableComponent</code> einfach verwenden zu k\u00f6nnen, werden die Icons in der <code>table.component.css</code> importiert:</p> table.component.css <pre><code>@import url('../../../node_modules/bootstrap-icons/font/bootstrap-icons.css');\n</code></pre> <p>Die Bootstrap-Klassen f\u00fcr eine Tablle k\u00f6nnen hier entnommen werden. </p> table.component.html <pre><code>&lt;div class=\"container mt-3\"&gt;\n  &lt;h3 class=\"m-3\"&gt;Alle Eintr\u00e4ge&lt;/h3&gt;\n  &lt;div class=\"table-responsive\"&gt;\n    &lt;table class=\"m-3 table table-striped table-hover\"&gt;\n      &lt;caption&gt;Alle &lt;code&gt;members&lt;/code&gt;&lt;/caption&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th scope=\"col \"&gt;Nr&lt;/th&gt;\n          &lt;th scope=\"col \"&gt;Vorname&lt;/th&gt;\n          &lt;th scope=\"col \"&gt;Nachname&lt;/th&gt;\n          &lt;th scope=\"col \"&gt;E-Mail&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr *ngFor=\"let member of members; let i=index; \"&gt;\n          &lt;td&gt;{{ i+1 }}&lt;/td&gt;\n          &lt;td&gt;{{ member.firstname }}&lt;/td&gt;\n          &lt;td&gt;{{ member.lastname }}&lt;/td&gt;\n          &lt;td&gt;\n            &lt;a [href]=\"'mailto:' + member.email\"&gt;&lt;span class=\"bi bi-envelope px-5\"&gt;&lt;/span&gt;&lt;/a&gt;\n            &lt;a [routerLink]=\"['/member', member._id]\"&gt; &lt;span class=\" bi bi-pencil-square px-5 \"&gt;&lt;/span&gt;&lt;/a&gt;\n            &lt;span (click)=\"delete(member._id)\" class=\" bi bi-trash px-5 \"&gt;&lt;/span&gt;\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>In der <code>table.component.ts</code> wird beim Erstellen der Komponente (<code>ngOnInit()</code>) die Variable <code>members</code> mit allen Daten aus der Datenbank bef\u00fcllt. Dieses Array wird in der <code>table.component.html</code> ausgelesen. Wir verwenden dazu wieder die <code>*ngFor</code>-Direktive (siehe Zeile <code>15</code>).</p> <p>Die erste Spalte der Tabelle wird einfach mit einer fortlaufenden Nummer bef\u00fcllt, in die zweite Spalte kommt der Vorname (<code>member.forename</code>) und in die dritte Spalte der Nachname (<code>member.surname</code>) - siehe Zeilen <code>16-18</code>. In Zeile <code>20</code> erstellen wir einen Link, um an die E-Mail-Adresse (<code>member.email</code>) eine E-Mail zu senden. Der Inhalt des Links ist das Bootstrap-Icon <code>bi-envelope</code> - siehe hier.</p> <p>In Zeile <code>21</code> definieren wir ebenfalls einen Link, dieses Mal aber keinen Hyperlink, sondern einen Routerlink unter Verwendung der <code>_id</code> von <code>member</code>. Es entsteht der Aufruf der Route <code>/member/:id</code>, wobei f\u00fcr die <code>:id</code> die entsprechende <code>_id</code> von <code>member</code> eingesetzt wird. Inhalt des Links ist das Bootstrap-Icon pencil-square.</p> <p>In Zeile <code>22</code> verwenden wir das Bootstrap-Icon trash. Dieses wird an das <code>click</code>-Ereignis angemeldet. Sobald das Icon angeklickt wird, wird die Methode <code>delete(id)</code> aufgerufen. Dieser Methode wird die jeweilige <code>_id</code> von <code>member</code> \u00fcbergeben. Diese Methode <code>delete(id)</code> muss dazu in der <code>table.component.ts</code> definiert werden. Um die vollst\u00e4ndige Implementierung der Methode k\u00fcmmern wir uns sp\u00e4ter. Zun\u00e4chst f\u00fcgen wir sie nur ein, damit kein Fehler beim \u00dcbersetzen der Anwendung mehr passiert und geben einfach die \u00fcbergebene <code>_id</code> auf die Konsole aus:</p> table.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { BackendService } from '../shared/backend.service';\nimport { Member } from '../shared/member';\n\n@Component({\nselector: 'app-table',\ntemplateUrl: './table.component.html',\nstyleUrls: ['./table.component.css']\n})\nexport class TableComponent implements OnInit {\nmembers!: Member[];\nconstructor(private bs: BackendService) { }\n\nngOnInit(): void {\nthis.readAll();\n}\n\nreadAll(): void {\nthis.bs.getAll().subscribe(\n{\nnext: (response) =&gt; {\nthis.members = response;\nconsole.log(this.members);\nreturn this.members;\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('getAll() completed')\n})\n}\n\ndelete(id: string): void {\nconsole.log(\"id :\" ,id );\n}\n}\n</code></pre> <ul> <li>Wenn Sie nun auf das <code>trash</code>-Icon klicken, wird in der Konsole Ihrer Developer-Tools die <code>_id</code> von <code>member</code> aus dieser Zeile ausgegeben. </li> <li>Wenn Sie nun auf das <code>pencil</code>-Icon klicken, wird die <code>DetailComponent</code> aufgerufen (in der URL steht dann soetwas wie <code>http://localhost:4200/member/61b7127e13537fa69be3a21c</code>). </li> <li>Wenn Sie nun auf das <code>envelope</code>-Icon klicken, wird Ihr E-Mail-Client aufgerufen und in der Empf\u00e4ngerzeile der E-Mail ist die <code>email</code> von <code>member</code> eingetragen. </li> </ul>"},{"location":"fe-be-anbindung/#u-pdate-detailcomponent","title":"U-pdate -- DetailComponent","text":"<p>Die <code>detail</code>-Komponente wird durch die Route <code>/member/:id</code> aufgerufen, wobei <code>:id</code> einer <code>_id</code> eines <code>member</code> entspricht. Die Idee dieser Komponente ist, den Datensatz von <code>member</code> zu \u00e4ndern. Wir erstellen ein Formular, in dem die Daten von <code>member</code> eingetragen werden, so dass sie aktualisiert werden k\u00f6nnen. Werden diese neuen Daten an das Backend gesendet, wird dort die <code>update</code>-Funktion aufgerufen, d.h. wir sprechen beim Senden der Daten den Endpunkt <code>PATCH /members/:id</code> an. </p> <p>Zun\u00e4chst implementieren wir, dass der Datensatz von <code>member</code>, dessen <code>_id</code> in der Route \u00fcbergeben wird, aus der Datenbank geholt wird. Dazu</p> <ul> <li>erweiteren wir den <code>BackendService</code> um eine Funktion <code>getOne(id)</code>, die den Endpunkt <code>GET /members/id</code> der REST-API des Backends aufruft.</li> <li>Wir nutzen diese Funktion, um in der <code>detail.component.ts</code> die Daten dieses <code>member</code> zu speichern. Dazu gehen wir wie beim Routing mit parametrisierten Routen gezeigt, vor. </li> </ul> backend.service.tsdetail.component.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Member } from './member';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class BackendService {\nbaseUrl = 'http://localhost:3000/members';\n\nconstructor(private http: HttpClient) { }\n\ngetAll(): Observable&lt;Member[]&gt;{\nreturn this.http.get&lt;Member[]&gt;(this.baseUrl);\n}\n\ngetOne(id: string): Observable&lt;Member&gt;{\nreturn this.http.get&lt;Member&gt;(this.baseUrl + '/' + id);\n}\n}\n</code></pre> <pre><code>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BackendService } from '../shared/backend.service';\nimport { Member } from '../shared/member';\n\n@Component({\nselector: 'app-detail',\ntemplateUrl: './detail.component.html',\nstyleUrls: ['./detail.component.css']\n})\nexport class DetailComponent implements OnInit {\nid: string = '';\nmember!: Member;\nconstructor(\nprivate route: ActivatedRoute,\nprivate bs: BackendService\n) { }\n\nngOnInit(): void {\nthis.id = this.route.snapshot.paramMap.get('id') || '';\nthis.readOne(this.id);\n}\n\nreadOne(id: string): void {\nthis.bs.getOne(id).subscribe(\n{\nnext: (response: Member) =&gt; {\nthis.member = response;\nconsole.log(this.member);\nreturn this.member;\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('getOne() completed')\n});\n}\n\n}\n</code></pre> <p>Wenn wir nun die <code>detail</code>-Komponente durch Klick auf das <code>pencil</code>-Icon in der Tabelle aufrufen, wird beim Initialisieren der Komponente die Variable <code>member</code> mit den passenden Eintr\u00e4gen aus der Datenbank bef\u00fcllt und auf der Konsole in den Developertools angezeigt. Wir nutzen erneut die <code>subscribe()</code>-Funktion des <code>Observable</code>, das durch die Funktion <code>getOne(id)</code> des <code>BackendService</code> erzeugt wird.  </p> <p>Um die Daten von <code>member</code> \u00e4ndern zu k\u00f6nnen, laden wir diese in ein Formular. Der folgende Abschnitt diskutiert die M\u00f6glichkeiten der Formularerstellung in Angular.</p>"},{"location":"fe-be-anbindung/#formulare-in-angular","title":"Formulare in Angular","text":"<p>Formulare werden verwendet, um Nutzereingaben zu erm\u00f6glichen und die eingegebenen Daten zu verwalten, sie z.B. in einer Datenbank zu speichern. In Angular gibt es zwei verschiedene Ans\u00e4tze, Forumlare zu erstellen:</p> <ul> <li>reaktive Formulare werden in der TypeScript-Klasse konzipiert und basieren auf einem unver\u00e4nderlichen Datenmodell. Sie sind leichter zu skalieren als Template-basierte Formulare und besser wiederzuverwenden. Sie sind prinzipiell den Template-basierten Formularen vorzuziehen, au\u00dfer dass Formular ist sehr einfach und besteht z.B. nur aus einem einzigen Eingabefeld.</li> <li>Template-basierte Formulare basieren auf Direktiven im HTML. Sie sind sehr einfach zu erstellen (direkt im HTML), k\u00f6nnen aber weniger einfach evaluiert und getestet werden und sind f\u00fcr strukturierte (verschachtelte) Datenmodelle ungeeignet. </li> </ul> <p>F\u00fcr weitere Informationen zu Formularen in Angular siehe hier. </p>"},{"location":"fe-be-anbindung/#reactive-forms-in-componentts","title":"Reactive Forms in <code>*.component.ts</code>","text":"<p>Wir verwenden hier reaktive Formulare. Die beiden wesentlichen TypeScript-Klassen bei Formularen sind</p> <ul> <li><code>FormControl</code> f\u00fcr ein einzelnes Steuerelement (z.B. ein <code>input</code> oder ein <code>radio</code>Button) und</li> <li><code>FormGroup</code> f\u00fcr eine zusammenh\u00e4ngende Menge von Steuerlementen (einem Formular). </li> </ul> <p>Um reaktive Formulare zu verwenden, ist es wichtig, das Modul <code>ReactiveFormsModule</code> in die <code>app.module.ts</code> zu importieren!</p> app.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavComponent } from './nav/nav.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { TableComponent } from './table/table.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HomeComponent } from './home/home.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DetailComponent } from './detail/detail.component';\nimport { CreateComponent } from './create/create.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\ndeclarations: [\nAppComponent,\nNavComponent,\nFooterComponent,\nTableComponent,\nHomeComponent,\nDetailComponent,\nCreateComponent\n],\nimports: [\nBrowserModule,\nAppRoutingModule,\nBrowserAnimationsModule,\nHttpClientModule,\nReactiveFormsModule\n],\nproviders: [],\nbootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>Wenn das vergessen wird, sind die Fehlerausgaben wirklich nicht zielf\u00fchrend und es ist recht schwierig, diesen Fehler zu finden! Reactive Forms werden, im Gegensatz zu den template-basierten Formularen, haupts\u00e4chlich in der TypeScript-Klasse erstellt. Wir passen deshalb unsere <code>detail.component.ts</code> wie folgt an:</p> detail.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { BackendService } from '../shared/backend.service';\nimport { Member } from '../shared/member';\n\n@Component({\nselector: 'app-detail',\ntemplateUrl: './detail.component.html',\nstyleUrls: ['./detail.component.css']\n})\nexport class DetailComponent  implements OnInit {\nid: string = '';\nmember!: Member ;\nform = new FormGroup({\nfirstnameControl : new FormControl&lt;string&gt;(''),\nlastnameControl: new FormControl&lt;string&gt;(''),\nemailControl: new FormControl&lt;string&gt;(''),\nipaddressControl: new FormControl&lt;string&gt;(''),\n});\nconstructor(\nprivate route: ActivatedRoute,\nprivate bs: BackendService\n) { }\n\nngOnInit(): void {\nthis.id = this.route.snapshot.paramMap.get('id') || '';\nthis.readOne(this.id);\n\n}\n\nreadOne(id: string): void {\nthis.bs.getOne(id).subscribe(\n{\nnext: (response) =&gt; {\nthis.member = response;\nconsole.log('member', this.member);\nthis.form.patchValue({\nfirstnameControl: this.member?.firstname,\nlastnameControl: this.member?.lastname,\nemailControl: this.member?.email,\nipaddressControl: this.member?.ipaddress\n})\nreturn this.member;\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('getOne() completed')\n});\n\n}\n\nupdate(): void {\n\n}\n\ncancel(): void {\n\n}\n\n}\n</code></pre> <p>Wir erstellen uns eine Referenzvariable <code>form</code> vom Typ <code>FormGroup</code> (Zeile <code>15</code>). Diese Variable zeigt auf unser Formular. Das Formular besteht aus <code>FormControl</code>-Elementen, die wir in den Zeilen <code>16-19</code> erzeugen. Sie sind mit <code>string</code> typisiert, das kann aber auch weggelassen werden. </p> <p>In den Zeilen <code>39-44</code> werden den Eingabefeldern bereits Werte zugewiesen. Diese Werte werden <code>member</code> entnommen, welches durch die <code>getOne(id)</code>-Funktion des <code>BackendService</code> bef\u00fcllt wurde. Um die Werte in das Formular einzutragen, bietet die Klasse <code>FormGroup</code> zwei Funktionen an:</p> <ul> <li><code>setValue()</code> - setzt f\u00fcr alle <code>FormControl</code>-Elemente innerhalb der <code>FormGroup</code> einen Wert (<code>value</code>)</li> <li><code>patchValue()</code> - kann allen oder bestimmten (einzelnen) <code>FormControl</code>-Elementen einen Wert (<code>value</code>) zuweisen. </li> </ul> <p>Wir verwenden <code>patchValue()</code>, Sie k\u00f6nnen aber auch <code>setValue()</code> ausprobieren. Beachten Sie auch das <code>?</code> hinter der <code>member</code>-Variablen bei den Wertzuweisungen. Es handelt sich dabei um den safe navigation operator. </p>"},{"location":"fe-be-anbindung/#safe-navigation-operator","title":"Safe navigation operator","text":"<p>Um zu vermeiden, dass versucht wird, auf einen Wert zuzugreifen, der (noch) gar nicht existiert (<code>undefined</code> ist), kann der sogenannte safe navigation operator verwendet werden. Das Prinzip dieses Operators entspricht einer <code>*ngIf</code>-Direktive. Erst wenn der Wert ungleich <code>undefined</code> ist, wird er dargestellt. Die Syntax des safe navigation operators  ist ein <code>?</code>:</p> <p><code>objekt?.eigenschaft</code></p> <p>Solange <code>objekt</code> noch <code>undefined</code> ist, wird nicht auf die (noch nicht existierende) <code>eigenschaft</code> zugegriffen. Wir verwenden den safe navigation operator in der <code>detail.component.ts</code> ein:</p> detail.component.ts (Auszug mit safe navigation oprator) <pre><code>  this.form.patchValue({\n    firstnameControl: this.member?.firstname,\n    lastnameControl: this.member?.lastname,\n    emailControl: this.member?.email,\n    ipaddressControl: this.member?.ipaddress\n  })\n</code></pre> <p>Jetzt wird zun\u00e4chst gepr\u00fcft, ob <code>member</code> \u00fcberhaupt definiert ist (also nicht <code>undefined</code>). Wenn nicht, wird gar nicht erst auf die Eigenschaft (z.B. <code>firstname</code>) zugegriffen. Ohne den Operator erhalten Sie eine Fehlermeldung, da z.B. der Zugriff <code>undefined.firstname</code> versucht w\u00fcrde.  Allerdings wird ja direkt nach der Wertzuweisung auf die <code>member</code>-Variable zugegriffen. Dadurch k\u00f6nnte hier der <code>safe navigation operator</code> auch weggelassen werden. </p>"},{"location":"fe-be-anbindung/#reactive-forms-in-componenthtml","title":"Reactive Forms in <code>*.component.html</code>","text":"<p>Das Formular existiert nun (als TypeScript-Objekt). Nun binden wir es in die <code>detail.component.html</code> ein. </p> detail.component.html <pre><code>&lt;main class=\"d-flex min-vh-100\"&gt;\n  &lt;fieldset class=\"container  mt-5\"&gt;\n    &lt;legend *ngIf=\"member\" class=\"mb-4\"&gt;Eintrag von {{ member.firstname }} {{ member.lastname }} aktualisieren\n    &lt;/legend&gt;\n    &lt;legend *ngIf=\"!member\" class=\"mb-4\"&gt;Eintrag aktualisieren&lt;/legend&gt;\n    &lt;form [formGroup]=\"form\" (ngSubmit)=\"update()\"&gt;\n      &lt;div class=\"mb-3 row\"&gt;\n        &lt;label class=\"col-2 col-form-label\" for=\"firstname\"&gt;Vorname&lt;/label&gt;\n        &lt;div class=\"col-10\"&gt;\n          &lt;input type=\"text\" class=\"form-control\" id=\"firstname\" placeholder=\"Vorname\"\n          formControlName=\"firstnameControl\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-3 row\"&gt;\n        &lt;label class=\"col-2 col-form-label\" for=\"lastname\"&gt;Nachname&lt;/label&gt;\n        &lt;div class=\"col-10\"&gt;\n          &lt;input type=\"text\" class=\"col-10 form-control\" id=\"lastname\" placeholder=\"Nachname\"\n          formControlName=\"lastnameControl\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-3 row\"&gt;\n        &lt;label class=\"col-2 col-form-label\" for=\"email\"&gt;E-Mail&lt;/label&gt;\n        &lt;div class=\"col-10\"&gt;\n          &lt;input type=\"email\" class=\"col-10 form-control\" id=\"email\" placeholder=\"E-Mail\" formControlName=\"emailControl\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-3 row\"&gt;\n        &lt;label class=\"col-2 col-form-label\" for=\"ipaddress\"&gt;IP-Adresse&lt;/label&gt;\n        &lt;div class=\"col-10\"&gt;\n          &lt;input type=\"text\" class=\"col-10 form-control\" id=\"ipaddress\" placeholder=\"IP-Adresse\" formControlName=\"ipaddressControl\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"row \"&gt;\n        &lt;button type=\"submit\" class=\"col-5 btn btn-secondary\"&gt;Aktualisieren&lt;/button&gt;\n        &lt;div class=\"col-2\"&gt;&lt;/div&gt;\n        &lt;button type=\"button\" class=\"col-5 btn btn-secondary\" (click)=\"cancel() \"&gt;Abbrechen&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n  &lt;/fieldset&gt;\n&lt;/main&gt;\n</code></pre> <p>Es entsteht folgende Ansicht:</p> <p></p> detail.component.css <pre><code>main {\nbackground-color: rgba(99, 192, 235, 0.729);\n}\n\nlegend {\nfont-weight: bold;\n}\n</code></pre>"},{"location":"fe-be-anbindung/#eventuelle-anpassung-des-backends","title":"Eventuelle Anpassung des Backends","text":"<p>Es kann sein, dass Ihr Backend f\u00fcr <code>GET /member/:id</code> nicht das Objekt selbst, sondern ein Array zur\u00fcckgibt, das das Objekt enth\u00e4lt. Erwartet w\u00fcrde, dass z.B. dieses JavaScript-Objekt zur\u00fcckgegeben wird: </p> <pre><code>{_id: '6399ec28bc9eaaf21290cc3b', firstname: 'Adam', lastname: 'Anderson', email: 'aanderson8@google.fr', ipaddress: '118.93.83.157'}\n</code></pre> <p>Es kann aber sein, dass Sie stattdessen</p> <pre><code>[ 0 : {_id: '6399ec28bc9eaaf21290cc3b', firstname: 'Adam', lastname: 'Anderson', email: 'aanderson8@google.fr', ipaddress: '118.93.83.157'} ]\n</code></pre> <p>zur\u00fcckbekommen. Im letzteren Fall ist es am einfachsten, wenn Sie das Backend wie folgt anpassen:</p> routes.js <pre><code>// get one member - Read \nrouter.get('/members/:id', async(req, res) =&gt; {\ntry {\nconst member = await Member.find({ _id: req.params.id });\nconsole.log(req.params);\nres.send(member[0]);\n} catch {\nres.status(404);\nres.send({\nerror: 'Member does not exist'\n})\n}\n})\n</code></pre> <p>also statt des Arrays, das die <code>find()</code>-query zur\u00fcckgibt, den ersten Eintrag aus dem Array. Sie k\u00f6nnen stattdessen auch mal ausprobieren, was der R\u00fcckgabetyp von <code>findOne()</code> ist. </p>"},{"location":"fe-be-anbindung/#submit-und-cancel-ereignisbehandlung","title":"Submit- und Cancel-Ereignisbehandlung","text":"<p>Um sich an das <code>submit</code>-Ereignis anzumelden, wird f\u00fcr das <code>&lt;form&gt;</code>-Element <code>(ngSubmit)</code> hinzugef\u00fcgt und als dessen Wert die Funktion, die aufgerufen werden soll, beim Absenden des Formulars - hier die Funktion <code>update()</code> (die wir gleich noch in <code>detail.component.ts</code> implementieren). F\u00fcr den <code>Abbrechen</code>-Button melden wir uns an das <code>click</code>-Ereignis mithilfe von <code>(click)</code> und der Angabe der Funktion, die ausgef\u00fchrt werden soll (hier <code>cancel()</code>) an. </p> <p>Wir implementieren nun die Funktionen <code>cancel()</code> und <code>update()</code>. Die <code>cancel()</code>-Funktion wird durch das <code>click</code>-Ereignis des <code>Abbrechen</code>-Buttons aufgerufen und die <code>update()</code>-Funktion durch den <code>submit</code>-Button <code>Aktualisieren</code> (siehe im Formular <code>(ngSubmit)=\"update()\"</code>). Wenn wir auf <code>Abbrechen</code> klicken, dann wollen wir wieder zur Tabellenansicht zur\u00fcck. Das erreichen wir mit dem Service <code>Location</code> aus <code>@angular/common</code>, der uns z.B. die <code>back()</code>-Funktion zur Verf\u00fcgung stellt:</p> detail.component.ts <pre><code>import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { BackendService } from '../shared/backend.service';\nimport { Member } from '../shared/member';\n\n@Component({\nselector: 'app-detail',\ntemplateUrl: './detail.component.html',\nstyleUrls: ['./detail.component.css']\n})\nexport class DetailComponent  implements OnInit {\nid: string = '';\nmember!: Member ;\nform = new FormGroup({\nfirstnameControl : new FormControl&lt;string&gt;(''),\nlastnameControl: new FormControl&lt;string&gt;(''),\nemailControl: new FormControl&lt;string&gt;(''),\nipaddressControl: new FormControl&lt;string&gt;(''),\n});\n\nconstructor(\nprivate route: ActivatedRoute,\nprivate bs: BackendService,\nprivate location: Location\n) { }\n\nngOnInit(): void {\nthis.id = this.route.snapshot.paramMap.get('id') || '';\nthis.readOne(this.id);\n\n}\n\nreadOne(id: string): void {\nthis.bs.getOne(id).subscribe(\n{\nnext: (response) =&gt; {\nthis.member = response;\nconsole.log('member', this.member);\nthis.form.patchValue({\nfirstnameControl: this.member.firstname,\nlastnameControl: this.member.lastname,\nemailControl: this.member.email,\nipaddressControl: this.member.ipaddress\n})\nreturn this.member;\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('getOne() completed')\n});\n\n}\n\nupdate(): void {\n\n}\n\ncancel(): void {\nthis.location.back();\n}\n\n}\n</code></pre> <p>Wenn wir nun auf <code>Abbrechen</code> klicken, dann haben wir das gleiche Verhalten, als w\u00fcrden wir im Browser auf <code>zur\u00fcck</code> (oder <code>back</code>) klicken. </p> <p>Wenn jedoch der <code>Aktualisieren</code>-Button gedr\u00fcckt wird, dann soll der Datensatz in der Datenbank aktualisiert werden, d.h. es wird der Endpunkt <code>PATCH /members/:id</code> der REST-API angesprochen, wobei <code>:id</code> den Wert der <code>_id</code> des aktuell bearbeiteten Datensatzes erh\u00e4lt und die Werte aus dem Formular im <code>body</code> des <code>request</code>-Objektes \u00fcbergeben werden. Dazu erweiteren wir zun\u00e4chst den <code>BackendService</code> um eine entsprechende Funktion, die wir dort ebenfalls <code>update()</code> nennen und der die <code>id</code> sowie die Daten aus dem Formular \u00fcbergeben werden.</p> backend.service.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Member } from './member';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class BackendService {\nbaseUrl = 'http://localhost:3000/members';\n\nconstructor(private http: HttpClient) { }\n\ngetAll(): Observable&lt;Member[]&gt;{\nreturn this.http.get&lt;Member[]&gt;(this.baseUrl);\n}\n\ngetOne(id: string): Observable&lt;Member&gt;{\nreturn this.http.get&lt;Member&gt;(this.baseUrl + '/' + id);\n}\n\nupdate(id: string, data: Member): Observable&lt;Member&gt; {\nreturn this.http.patch&lt;Member&gt;(this.baseUrl + '/' + id, data);\n}\n}\n</code></pre> <p>In der <code>detail.component.ts</code> werden in der <code>update()</code>-Funktion zun\u00e4chst alle Werte des Formulars ausgelesen und in <code>this.member</code> gespeichert und dann wird die <code>update()</code>-Funktion des <code>BackendService</code> aufgerufen und ihr die <code>this.id</code> sowie <code>this.member</code> \u00fcbergeben. Nachdem der Datensatz in der Datenbank aktualisiert wurde, wird wieder die <code>table</code>-Komponente aufgerufen. Dazu wird die <code>navigateByUrl()</code>-Funktion des <code>Router</code>-Services verwendet.</p> detail.component.ts <pre><code>import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BackendService } from '../shared/backend.service';\nimport { Member } from '../shared/member';\n\n@Component({\nselector: 'app-detail',\ntemplateUrl: './detail.component.html',\nstyleUrls: ['./detail.component.css']\n})\nexport class DetailComponent  implements OnInit {\nid: string = '';\nmember!: Member ;\nform = new FormGroup({\nfirstnameControl : new FormControl&lt;string&gt;(''),\nlastnameControl: new FormControl&lt;string&gt;(''),\nemailControl: new FormControl&lt;string&gt;(''),\nipaddressControl: new FormControl&lt;string&gt;(''),\n});\n\nconstructor(\nprivate route: ActivatedRoute,\nprivate bs: BackendService,\nprivate location: Location,\nprivate router: Router\n) { }\n\nngOnInit(): void {\nthis.id = this.route.snapshot.paramMap.get('id') || '';\nthis.readOne(this.id);\n\n}\n\nreadOne(id: string): void {\nthis.bs.getOne(id).subscribe(\n{\nnext: (response) =&gt; {\nthis.member = response;\nconsole.log('member', this.member);\nthis.form.patchValue({\nfirstnameControl: this.member.firstname,\nlastnameControl: this.member.lastname,\nemailControl: this.member.email,\nipaddressControl: this.member.ipaddress\n})\nreturn this.member;\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('getOne() completed')\n});\n\n}\n\nupdate(): void {\nconst values = this.form.value;\nthis.member.firstname = values.firstnameControl!;\nthis.member.lastname = values.lastnameControl!;\nthis.member.email = values.emailControl!;\nthis.member.ipaddress = values.ipaddressControl!;\nthis.bs.update(this.id, this.member)\n.subscribe({\nnext: (response) =&gt; {\nconsole.log(response);\nconsole.log(response._id);\n},\nerror: (err) =&gt; {\nconsole.log(err);\n},\ncomplete: () =&gt; console.log('update() completed')\n}\n);\nthis.router.navigateByUrl('/table');\n}\n\ncancel(): void {\nthis.location.back();\n}\n\n}\n</code></pre> <p>Als n\u00e4chstes implementieren wir noch die <code>delete(id)</code>-Funktion in der <code>table.component.ts</code>, um einen Datensatz zu l\u00f6schen.</p>"},{"location":"fe-be-anbindung/#d-elete-tablecomponent","title":"D-elete -- TableComponent","text":"<p>In der <code>table</code>-Komponente ist das L\u00f6schen eines Datensatzes bereits vorbereitet. Bei Klick auf das <code>trash</code>-Icon in der Tabelle wird die <code>delete()</code>-Funktion in der <code>table.component.ts</code> aufgerufen und ihr die <code>_id</code> des l\u00f6schenden Datensatzes \u00fcbergeben. Derzeit gibt die Funktion aber diese <code>id</code> nur auf der Konsole aus. </p> <p>Wir implementieren zun\u00e4chst eine <code>deleteOne(id)</code>-Funktion im <code>BackendService</code>. Es wird der Endpunkt <code>DELETE /members/:id</code> verwendet. </p> backend.service.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Member } from './member';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class BackendService {\nbaseUrl = 'http://localhost:3000/members';\n\nconstructor(private http: HttpClient) { }\n\ngetAll(): Observable&lt;Member[]&gt;{\nreturn this.http.get&lt;Member[]&gt;(this.baseUrl);\n}\n\ngetOne(id: string): Observable&lt;Member&gt;{\nreturn this.http.get&lt;Member&gt;(this.baseUrl + '/' + id);\n}\n\nupdate(id: string, data: Member): Observable&lt;Member&gt; {\nreturn this.http.patch&lt;Member&gt;(this.baseUrl + '/' + id, data);\n}\n\ndeleteOne(id: string): Observable&lt;any&gt;{\nreturn this.http.delete&lt;any&gt;(this.baseUrl + '/' + id, {observe: 'response'});\n}     }\n</code></pre> <p>Im Gegensatz zu den anderen Endpunkten, kann die <code>response</code> beim Aufruf von <code>DELETE /members/:id</code> leer sein (wenn der Datensatz gel\u00f6scht wurde) oder es wird ein Objekt mit einem <code>error</code> zur\u00fcckgesendet (siehe hier). Die Typisierung des <code>Observale</code> ist deshalb nicht <code>Member</code>, sondern <code>any</code>. Da vom Backend jedoch der HTTP-Status in der <code>response</code> zur\u00fcckgegeben wird (<code>204</code> oder <code>404</code>) wollen wir auf diesen Status zugreifen. W\u00e4re die <code>response</code> leer, ginge das jedoch nicht. Deshalb legen wir mit <code>{observe: 'response'}</code> als zweitem Parameter fest, dass in jedem Fall eine <code>response</code> (und nicht nur der <code>body</code>) durch das <code>Observable</code> erzeugt wird.</p> <p>Wir verwenden diese Funktion nun in unserer <code>table.component.ts</code>:</p> table.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BackendService } from '../shared/backend.service';\nimport { Member } from '../shared/member';\n\n@Component({\nselector: 'app-table',\ntemplateUrl: './table.component.html',\nstyleUrls: ['./table.component.css']\n})\nexport class TableComponent implements OnInit {\nmembers: Member[] = [];\ndeleted = false;\nconstructor(private bs: BackendService, private router: Router) { }\nngOnInit(): void {\nthis.readAll();\n}\n\nreadAll(): void {\nthis.bs.getAll().subscribe(\n{\nnext: (response) =&gt; {\nthis.members = response;\nconsole.log(this.members);\nreturn this.members;\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('getAll() completed')\n})\n}\n\ndelete(id: string): void {\nthis.bs.deleteOne(id).subscribe(\n{\nnext: (response: any) =&gt; {\nconsole.log('response : ', response);\nif(response.status == 204){\nconsole.log(response.status);\nthis.reload(true);\n} else {\nconsole.log(response.status);\nconsole.log(response.error);\nthis.reload(false);\n}\n},\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('deleteOne() completed')\n});\n}\nreload(deleted: boolean)\n{\nthis.deleted = deleted;\nthis.readAll();\nthis.router.navigateByUrl('/table');\n}\n}\n</code></pre> <p>Wir haben gleich mehrer Sachen hinzugef\u00fcgt. Zun\u00e4chst ruft die <code>delete(id)</code>-Funktion wie gewohnt die <code>BackendService</code>-Funktion <code>deleteOne(id)</code> mit <code>subsribe()</code> auf. Wir haben darin eine Fallunterscheidung, je nach zur\u00fcckgegebenem HTTP-Status integriert mit jeweiliger Konsolen-Ausgabe (die k\u00f6nnen nat\u00fcrlich raus). </p> <p>Um eine Nachricht anzeigen zu lassen, dass der Datensatz gel\u00f6scht wurde, f\u00fcgen wir der TypeScript-Klasse die Eigenschaft <code>deleted</code> hinzu. Ist der Wert von <code>deleted</code> <code>false</code> wird die Tabelle angezeigt. Ist der Wert jedoch <code>true</code> wird die L\u00f6schnachricht angezeigt. In der L\u00f6schnachricht ist ein Button, dessen Klickereignis die Funktion <code>reload()</code> aufruft. In <code>reload()</code> wird die Tabelle neu geladen. Dazu werden zuvor nochmal alle Eintr\u00e4ge aus der Datenbank mit <code>readAll()</code> geholt, damit man sieht, dass der Datensatz gel\u00f6scht wurde. Die <code>table.component.html</code> sieht nun so aus:</p> table.component.html <pre><code>&lt;div *ngIf=\"!deleted\" class=\"container mt-3\"&gt;\n&lt;h3 class=\"m-3\"&gt;Alle Eintr\u00e4ge&lt;/h3&gt;\n  &lt;div class=\"table-responsive\"&gt;\n    &lt;table class=\"m-3 table table-striped table-hover\"&gt;\n      &lt;caption&gt;Alle &lt;code&gt;members&lt;/code&gt;&lt;/caption&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th scope=\"col \"&gt;Nr&lt;/th&gt;\n          &lt;th scope=\"col \"&gt;Vorname&lt;/th&gt;\n          &lt;th scope=\"col \"&gt;Nachname&lt;/th&gt;\n          &lt;th scope=\"col \"&gt;E-Mail&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr *ngFor=\"let member of members; let i=index; \"&gt;\n          &lt;td&gt;{{ i+1 }}&lt;/td&gt;\n          &lt;td&gt;{{ member.firstname }}&lt;/td&gt;\n          &lt;td&gt;{{ member.lastname }}&lt;/td&gt;\n          &lt;td&gt;\n            &lt;a [href]=\"'mailto:' + member.email\"&gt;&lt;span class=\"bi bi-envelope px-5\"&gt;&lt;/span&gt;&lt;/a&gt;\n            &lt;a [routerLink]=\"['/member', member._id]\"&gt; &lt;span class=\" bi bi-pencil-square px-5 \"&gt;&lt;/span&gt;&lt;/a&gt;\n            &lt;span (click)=\"delete(member._id)\" class=\" bi bi-trash px-5 \"&gt;&lt;/span&gt;\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div *ngIf=\"deleted\" class=\" container mt-3 \"&gt;\n&lt;h3&gt;Datensatz wurde gel\u00f6scht!&lt;/h3&gt;\n&lt;button type=\"button\" class=\"btn btn-secondary\" (click)=\"reload(false)\"&gt;Zur\u00fcck zur Tabelle&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <p>Success</p> <p>Wir haben nun die CRUD-Funktionen im Frontend implementiert und daf\u00fcr das Frontend an das Backend vollst\u00e4ndig angebunden. Zwar fehlt hier noch Create, aber das sollten Sie selbst\u00e4ndig leicht hinbekommen. Schauen Sie sich das Formular f\u00fcr Update an, dann sollte das kein Problem sein! Ist eine gute \u00dcbung! Der Entwicklungsstack Datenbank &lt;-&gt; Backend &lt;-&gt; Frontend ist damit fertig und abgeschlossen. Eine weitere gute \u00dcbung f\u00fcr Sie w\u00e4re, statt des MongoDB-Backends das PostgreSQL-Backend anzubinden. Sie werden feststellen, dass nur sehr wenige Anpassungen notwendig sind. Wir haben nun alle Voraussetzungen besprochen, um die Semesteraufgabe zu erledigen. </p>"},{"location":"guards/","title":"Subject, Observable, Observer und Guards","text":"<p>Wir wollen am Beispiel einer Nutzerverwaltung die Verwendung von Subject, Observable, Observer und Guards demonstrieren. Alle diese Konzepte werden im Frontend verwendet. Subject, Observable, Observer dienen dazu, Werte an Subscriber zu propagieren. Eine gute \u00dcbersicht \u00fcber Subject, Observable, Observer bietet die folgende Abbildung (hier entnommen).</p> <p></p> <p>Subject, Observable, Observer finden sich im RxJS-Paket. Subject hat den gro\u00dfen Vorteil, dass ein (neuer) Wert an viele Subscriber gesendet (multicast) werden kann. Wir werden Subjects z.B. verwenden, um der <code>nav</code>-Komponente mitzuteilen, dass sich eine Nutzerin ein- bzw. ausgelogged hat. Ein Subject ist sowohl ein Observer als auch ein Observable. Observable kann mehrere Werte (nacheinander) pushen (an die Subscriber). Folgende Tabelle aus gibt einen guten \u00dcberblick \u00fcber die Funktionalit\u00e4t eines *Observable*s.</p> <p></p> <p>Ein Observer konsumiert die Werte, die ein Observable liefert. Alle Funktionen des HTTP-Clients sind Observables. Sie liefern die Werte vom Backend (mittels einer <code>next</code>-Funktion). Mithilfe eines Observers werden wir diese Werte empfangen (<code>next</code>, <code>error</code>, <code>complete</code>).</p> <p>Mithilfe von Guards wird die Verwendung von Komponenten gesteuert. Eine Komponente soll z.B. nur dann aufgerufen werden k\u00f6nnen, wenn die Nutzerin eingelogged ist. </p> <p>Obwohl alle diese Konzepte zum Frontend geh\u00f6ren, erstellen wir uns zun\u00e4chst ein Backend f\u00fcr die Nutzerverwaltung. </p>"},{"location":"guards/#rest-api-zur-nutzerverwaltung-backend","title":"REST-API zur Nutzerverwaltung (Backend)","text":"<p>Folgende Endpunkte soll die REST-API zur Verf\u00fcgung stellen:</p> Endpunkt Beschreibung <code>GET /users</code> gebe alle <code>user</code>-Eintr\u00e4ge zur\u00fcck <code>POST /users/register</code> erstelle einen neuen <code>user</code> (<code>Registrierung</code>-Funktion) <code>POST /users/login</code> Pr\u00fcft, ob <code>username == name</code> existiert und ob das Passwort stimmt (<code>Login</code>-Funktion) <code>GET /users/:name</code> gibt den <code>user</code> mit <code>username == name</code> zur\u00fcck <code>DELETE /users/:id</code> l\u00f6scht den <code>user</code> mit <code>_id == id</code> <code>PUT /users/:id</code> \u00e4ndert Daten von <code>user</code> mit <code>_id == id</code> <p>Wir gehen wie in REST-API (MongoDB) vor und erstellen uns ein <code>Node.js</code>-Projekt:</p> <pre><code>mkdir backend\ncd backend\nnpm i\nnpm i express --save\nnpm i nodemon --save-dev\nnpm i mongoose --save\nnpm i dotenv --save\nnpm i cors --save\n</code></pre> <p>Als Einstiegspunkt w\u00e4hlen wir <code>server.js</code>. Diese sieht wie folgt aus:</p> server.js <pre><code>const express = require('express');\nconst cors = require('cors');\nconst userRoutes = require('./routes/users');\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\napp.use(cors());\napp.use('/users', userRoutes);\n\n// connect to mongoDB\nmongoose.connect(process.env.DB_CONNECTION, { dbName: process.env.DB_NAME });\nconst db = mongoose.connection;\ndb.on('error', err =&gt; {\nconsole.log(err);\n});\ndb.once('open', () =&gt; {\nconsole.log('connected to DB');\n});\n\napp.listen(PORT, (error) =&gt; {\nif (error) {\nconsole.log(error);\n} else {\nconsole.log(`Server started and listening on port ${PORT} ... `);\n}\n});\n</code></pre> <p>Die Verbindungsdaten zur MongoDB stehen in der <code>.env</code>-Datei unter <code>DB_CONNECTION</code> und der Name der Datenbank steht dort unter <code>DB_NAME</code> (siehe Zeile <code>15</code>). F\u00fcr die Endpunkte (Routen) haben wir einen Ordner <code>routes</code> erstellt, unter dem verschiedene <code>.js</code>-Dateien liegen k\u00f6nnen, in denen unterschiedliche Endpunkte definiert sind. Hier wird zun\u00e4chst nur die <code>users.js</code> dort erstellt:</p> routes/users.js <pre><code>const express = require('express');\nconst router = express.Router();\nconst User = require('../models/users');\n\n// get all users\nrouter.get('/', async(req, res) =&gt; {\nconst allUsers = await User.find();\nconsole.log(allUsers);\nres.send(allUsers);\n});\n\n// post one user - register\nrouter.post('/register', async(req, res) =&gt; {\nconst newUser = new User({\nusername: req.body.username,\npassword: req.body.password,\nemail: req.body.email,\nrole: req.body.role\n})\nawait newUser.save();\nres.send(newUser);\n});\n\n\nmodule.exports = router;\n</code></pre> <p>In der <code>routes/users.js</code> sind zun\u00e4chst nur die beiden Endpunkte <code>GET /users</code> und <code>POST /users</code> definiert. Wir wollen uns gleich um den Endpunkt <code>POST /users</code> nochmal gesondert k\u00fcmmern. Derzeit ist er so implementiert, wie wir es auch bereits in REST-API (MongoDB) hatten. Ehe wir diese Implementierung nochmal genauer betrachten zun\u00e4chst noch das zugeh\u00f6rige Model:</p> models/users.js <pre><code>const mongoose = require('mongoose');\n\nconst schema = new mongoose.Schema({\nusername: String,\npassword: String,\nemail: String,\nrole: String\n});\n\nmodule.exports = mongoose.model('User', schema);\n</code></pre> <p>Das Backend ist nun ausf\u00fchrbar. Es k\u00f6nnen neue <code>user</code> angelegt werden (<code>POST /users</code>) und alle <code>user</code> ausgelesen werden (<code>GET /users</code>). </p> <p></p> <p>Jedoch erkennen wir nun ein wesentliches Problem: die Passw\u00f6rter werden lesbar gespeichert. Das wollen wir nat\u00fcrlich nicht. </p>"},{"location":"guards/#passworter-verschlusseln","title":"Passw\u00f6rter verschl\u00fcsseln","text":"<p>Wir verschl\u00fcsseln die Passw\u00f6rter mithilfe von bcrypt. Dazu installieren wir uns dieses Paket zun\u00e4chst</p> <pre><code>npm i bcrypt --save\n</code></pre> <p>und verwenden es dann wie folgt in der <code>routes/users.js</code> f\u00fcr den <code>POST /users</code>-Endpunkt:</p> routes/users.js <pre><code>const express = require('express');\nconst router = express.Router();\nconst User = require('../models/users');\nconst bcrypt = require('bcrypt');\n// get all users\nrouter.get('/', async(req, res) =&gt; {\nconst allUsers = await User.find();\nconsole.log(allUsers);\nres.send(allUsers);\n});\n\n// post one user - register\nrouter.post('/register', async(req, res) =&gt; {\nbcrypt.hash(req.body.password, 10).then(\nasync (hash) =&gt; {\nconst newUser = new User({\nusername: req.body.username,\npassword: hash,\nemail: req.body.email,\nrole: req.body.role\n})\nawait newUser.save();\nres.send(newUser);\n}).catch( err =&gt; res.status(400).json({ error: 'user not created' }))\n});\n\nmodule.exports = router;\n</code></pre> <p>In Zeile <code>15</code> wird die <code>hash</code>-Funktion von <code>bcrypt</code> aufgerufen. Das <code>password</code> wird als erster Parameter \u00fcbergeben. Die <code>10</code> ist der Wert f\u00fcr die <code>saltRounds</code> und ist der empfohlene Wert. Der <code>hash</code> wird erzeugt und als Wert der <code>password</code>-Eigenschaft in <code>newUser</code> und somit in der Datenbank gespeichert. </p> <p></p> <p>Es bleibt anzumerken, dass aus dem <code>hash</code> nicht wieder das Passwort r\u00fcckerzeugt werden kann. Um sich einzuloggen, muss das einegebene Passwort mit dem <code>hash</code> verglichen werden. Dazu stellt <code>bcrypt</code> ebenfalls eine Funktion zur Verf\u00fcgung. Wir kommen darauf zur\u00fcck, wenn es um die <code>Login</code>-Funktion geht. </p> <p>Zun\u00e4chst wollen wir noch verhindern, dass sich eine Nutzerin mit einem bereits bekannten <code>username</code> bzw. mit einer bereits bekannten <code>email</code>-Adresse anmeldet. </p>"},{"location":"guards/#doppelte-username-und-email-verhindern","title":"Doppelte <code>username</code> und <code>email</code> verhindern","text":"<p>Doppelte Eintr\u00e4ge in der <code>user</code>-Datenbank f\u00fcr <code>username</code> und/oder <code>email</code> f\u00fchren zu Problemen und sollten vermieden werden. Wir passen deshalb die Funktion f\u00fcr das Eintragen eines neuen Datensatzes wie folgt an:</p> routes/users.js <pre><code>const express = require('express');\nconst router = express.Router();\nconst User = require('../models/users');\nconst bcrypt = require('bcrypt');\n\n// get all users\nrouter.get('/', async(req, res) =&gt; {\nconst allUsers = await User.find();\nconsole.log(allUsers);\nres.send(allUsers);\n});\n\n// post one user - register\nrouter.post('/register', async(req, res) =&gt; {\nconst existingUsername = await User.findOne( {username: req.body.username});\nconst existingEmail = await User.findOne( {email: req.body.email});\nif(!existingUsername &amp;&amp; !existingEmail) {\nbcrypt.hash(req.body.password, 10).then(\nasync (hash) =&gt; {\nconst newUser = new User({\nusername: req.body.username,\npassword: hash,\nemail: req.body.email,\nrole: req.body.role\n})\nawait newUser.save();\nres.send(newUser);\n}).catch( err =&gt; res.status(400).json({ error: 'user not created' }))\n} else {\nres.status(400).json({ error: 'username and/or email exist(s)' });\n}\n});\n\nmodule.exports = router;\n</code></pre> <p>Es wird mithilfe von <code>findOne()</code> nach einem Eintrag gesucht, der den neuen <code>username</code> bzw. die neue <code>email</code> enth\u00e4lt. Wenn kein solcher Eintrag gefunden wird, ist sowohl <code>existingUsername</code> als auch <code>existingEmail</code> <code>null</code> und der neue Eintrag kann erzeugt werden. Ansonsten wird der HTTP-Status <code>400</code> mit der <code>error</code>-Meldung <code>username and/or email exist(s)</code> zur\u00fcckgesendet. So wird sichergestellt, dass kein neuer <code>user</code> erstellt wird, deren <code>username</code> und/oder <code>email</code> bereits in der Datenbank existiert. </p>"},{"location":"guards/#login-funktion","title":"<code>Login</code>-Funktion","text":"<p>Eine <code>Login</code>-Funktion soll \u00fcberpr\u00fcfen, ob ein <code>username</code> existiert und ob das dazugeh\u00f6rige <code>password</code> korrekt ist. Dazu m\u00fcssen beide Informationen mit dem Request \u00fcbermittelt werden. Deshalb wird als Anfragemethode <code>POST</code> verwendet. Um diesen <code>POST</code>-Endpunkt vom vorherigen Endpunkt zu unterscheiden, wird der URL anstelle von <code>/register</code> hier <code>/login</code> angeh\u00e4ngt. </p> <p>Die Implementierung dieser Funktion in der <code>routes/users.js</code> k\u00f6nnte wie folgt aussehen:</p> routes/users.js <pre><code>// post username and password - login\nrouter.post('/login', async(req, res) =&gt; {\nconst existingUsername = await User.findOne( {username: req.body.username});\nif(existingUsername) {\nbcrypt.compare(req.body.password, existingUsername.password).then((result) =&gt; {\nif(result) {\nres.status(201).json({ message: 'logged in' });\n} else {\nres.status(204).send(); // wrong password\n}\n})\n.catch( (err) =&gt; res.status(400).json({ error: 'something went wrong' })) // never happens\n} else {\nres.status(400).json({ error: 'username does not exist' });\n}\n});\n</code></pre> <p>Es wird zun\u00e4chst gepr\u00fcft, ob es \u00fcberhaupt einen passenden <code>username</code> in der Datenbank gibt. Da <code>username</code> nicht doppelt vorkommen kann, muss auch nur <code>findOne()</code> verwendet werden. Existiert ein solcher EIntrag nicht, wird HTTP-Status <code>400</code> zur\u00fcckgesendet mit der <code>error</code>-Message <code>username does not exist</code>.</p> <p>Existiert ein solcher Eintrag jedoch, wird das <code>password</code> dieses Eintrages mit dem <code>password</code> aus dem Request unter Verwendung der <code>compare</code>-Funktion von <code>bcrypt</code> miteinander verglichen. Sind die Passw\u00e4rter gleich ist das <code>result == true</code>. Dann wird der Status-Code <code>201</code> zusammen mit der <code>message: logged in</code> gesendet. Ist jedoch <code>result == false</code>, dann war das Passwort falsch und es wird der Statuscode <code>204</code> (<code>no content</code>) zur\u00fcckgesendet. </p>"},{"location":"guards/#daten-andern","title":"Daten \u00e4ndern","text":"<p>F\u00fcr das \u00c4ndern der Daten haben wir bereits die Standardfunktion betrachtet, siehe U - update. Bei der Nutzerverwaltung kommt jedoch die Anforderung hinzu, dass das \u00c4ndern der Daten (selbst das \u00c4ndern des Passwortes) nur dann m\u00f6glich sein soll, wenn das (alte) Passwort korrekt \u00fcbermittelt wird. </p> <p>Sollte ein neues Passwort \u00fcbermittelt werden (Eigenschaft <code>newPassoword</code>), kann vorher im Frontend gepr\u00fcft werden (z.B. durch doppelte Eingabe), ob es \"korrekt\" ist.</p> <p>Es ist fraglich, ob es \u00fcberhaupt m\u00f6glich sein soll, den <code>username</code> zu \u00e4ndern. Generell ist jedoch beim \u00c4ndern des <code>username</code> und beim \u00c4ndern der <code>email</code> darauf zu achten, dass die jeweils neuen Werte nicht bereits existieren. </p> <p>Zu beachten ist auch, dass der Endpunkt die <code>_id</code> enth\u00e4lt. Das bedeutet, dass der Datensatz zuvor aus der Datenbank ausgelesen werden musste, d.h. er muss zwingend bereits existieren. Nur die Angabe von z.B. <code>username</code> w\u00fcrde die Sicherheit reduzieren. </p> <p>Die Funktion ist somit recht komplex und k\u00f6nnte z.B. wie folgt aussehen:</p> routes/users.js <pre><code>// update one user\nrouter.put('/:id', async(req, res) =&gt; {\ntry {\nconst user = await User.findOne({ _id: req.params.id })\nif(user &amp;&amp; req.body.password) {\nbcrypt.compare(req.body.password, user.password)\n.then( async(result) =&gt; {\nif(result) {\n\nif (req.body.newPassword) {\nbcrypt.hash(req.body.newPassword, 10)\n.then( async(hash) =&gt; {\nconsole.log('new hash', hash)\nawait User.updateOne({ _id: req.params.id }, { password: hash });\n}\n);\n}\n\nif (req.body.username) {\nconst nameExists = await User.findOne({ username: req.body.username })\nif(!nameExists) await User.updateOne({ _id: req.params.id }, { username: req.body.username });\nelse res.status(400).json({ error: 'username exists' });\n}\n\nif (req.body.email) {\nconst emailExists = await User.findOne({ email: req.body.email })\nif(!emailExists) await User.updateOne({ _id: req.params.id }, { email: req.body.email });\nelse res.status(400).json({ error: 'email exists' });\n}\n\nif (req.body.role) {\nawait User.updateOne({ _id: req.params.id }, { role: req.body.role });\n}\n\nres.status(200).send()\n\n} else {\nres.status(204).send(); // wrong password\n}\n\n})\n} else {\nres.status(204).send(); // wrong _id or no password\n}\n} catch {\nres.status(404)\nres.send({ error: \"User does not exist!\" })\n}\n});\n</code></pre> <ul> <li>Zun\u00e4chst wird gepr\u00fcft, ob \u00fcberhaupt ein <code>user</code> mit der aufgerufenen <code>id</code> existiert und ob das <code>password</code> mitgeschickt wird (Zeile <code>55</code>). Nur dann wird \u00fcberhaupt weitergepr\u00fcft. Ansonsten werden die Zeilen <code>94-96</code> ausgef\u00fchrt (HTTP-Status <code>204</code> gesendet).</li> <li>In Zeile <code>56</code> wird gepr\u00fcft, ob das mitgeschickte <code>password</code> dem f\u00fcr <code>user</code> gespeicherten <code>password</code> entspricht. Das geschieht mithilfe der <code>compare()</code>-Funktion von <code>bcrypt</code>. Ist das <code>password</code> nicht korrekt, werden die Zeilen <code>89-91</code> ausgef\u00fchrt (HTTP-Status <code>204</code> gesendet).</li> <li>Ist das <code>password</code> korrekt, wird gepr\u00fcft, welche der Daten ge\u00e4ndert werden sollen. Dazu wird jeweils geschaut, ob <code>newPassword</code> (Zeilen <code>61-69</code>), <code>username</code> (Zeilen <code>71-75</code>), <code>email</code> (Zeilen <code>77-81</code>) oder <code>role</code> (Zeilen <code>83-85</code>) mitgesendet werden. Falls ja, wird jeweils der Datensatz mithilfe von <code>updateOne()</code> aktualisiert. </li> </ul>"},{"location":"guards/#user-loschen-und-lesen","title":"<code>user</code> l\u00f6schen und lesen","text":"<p>Die beiden Funktionen zum L\u00f6schen und Lesen einer Nutzerin sind so, wie wir sie bereits kennen:</p> routes/users.js <pre><code>// get one user via username\nrouter.get('/:name', async(req, res) =&gt; {\nconst user = await User.findOne({ username: req.params.name });\nif(user) {\nres.send(user);\n} else {\nres.status(404);\nres.send({\nerror: \"User does not exist!\"\n});\n}\n})\n\n// delete one user via id\nrouter.delete('/:id', async(req, res) =&gt; {\ntry {\nawait User.deleteOne({ _id: req.params.id })\nres.status(204).send()\n} catch {\nres.status(404)\nres.send({ error: \"User does not exist!\" })\n}\n});\n</code></pre>"},{"location":"guards/#registrierung-und-login-frontend","title":"Registrierung und Login (Frontend)","text":"<p>Wir erstellen uns mithilfe von Angular eine kleine Webanwendung, die mindestens eine Regstrierungs- und eine Login-Komponente enth\u00e4lt. Wir wollen dieses Mal Material Design anstelle von Bootstrap als CSS-Framework verwenden. </p> <p>Im Terminal geben wir Folgendes ein:</p> Terminalbefehl Beschreibung <code>ng new frontend --routing</code> erstellt Projekt <code>frontend</code> mit Routing <code>cd frontend</code> <code>ng g c login</code> erstellt Komponente <code>login</code> <code>ng g c home</code> erstellt Komponente <code>home</code> <code>ng g s shared/auth</code> erstellt Service <code>auth</code> im Ordner <code>shared</code> <code>ng g i shared/user</code> erstellt Interface <code>user</code> im Ordner <code>shared</code> <code>ng add @angular/material</code> f\u00fcgt Material Design hinzu <p>Nach dem Hinzuf\u00fcgen von Material Design sollte im Terminal ungef\u00e4hr folgende Ausgabe erscheinen:</p> <pre><code>\u2139 Using package manager: npm\n\u2714 Found compatible package version: @angular/material@15.0.4.\n\u2714 Package information loaded.\n\nThe package @angular/material@15.0.4 will be installed and executed.\nWould you like to proceed? Yes\n\u2714 Packages successfully installed.\n? Choose a prebuilt theme name, or \"custom\" for a custom theme: Indigo/Pink        [ Preview: \nhttps://material.angular.io?theme=indigo-pink ]\n? Set up global Angular Material typography styles? Yes\n? Include the Angular animations module? Include and enable animations\nUPDATE package.json (1105 bytes)\n\u2714 Packages installed successfully.\nUPDATE src/app/app.module.ts (654 bytes)\nUPDATE angular.json (2844 bytes)\nUPDATE src/index.html (576 bytes)\nUPDATE src/styles.css (181 bytes)\n</code></pre> <p>Als <code>prebuild theme</code> wurde hier <code>Indigo/Pink</code> und sowohl f\u00fcr die <code>typography styles</code> als auch f\u00fcr die <code>animations</code> wurde <code>y</code> ausgew\u00e4hlt.</p> <p>Material Design bietet sogenannte Schematics an. Wir w\u00e4hlen das <code>navigation</code>-Schema und geben im Terminal ein:</p> <p><pre><code>ng generate @angular/material:navigation nav\n</code></pre> Es entsteht eine <code>nav</code>-Komponente. Au\u00dferdem w\u00e4hlen wir das <code>address-form</code>-Schema und erstellen damit eine Komponente <code>register</code>:</p> <pre><code>ng generate @angular/material:address-form register\n</code></pre> <p>Die <code>app.component.html</code> \u00e4ndern wir wie folgt:</p> app.component.html <pre><code>&lt;app-nav&gt;&lt;/app-nav&gt;\n</code></pre> <p>Darin wird also nur noch die <code>nav</code>-Komponente statisch eingebunden.</p> <p>Ehe wir an der <code>nav.component.html</code> umfangreichere \u00c4nderungen vornehmen, defininieren wir zun\u00e4chst noch folgende Routen:</p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nconst routes: Routes = [\n{\npath: \"\",\ntitle: \"Home\",\ncomponent: HomeComponent,\npathMatch: 'full'\n},\n{\npath: \"register\",\ntitle: \"Register\",\ncomponent: RegisterComponent\n},\n{\npath: \"login\",\ntitle: \"Login\",\ncomponent: LoginComponent\n}\n];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Nun k\u00f6nnen wir die <code>nav.component.html</code> entsprechend anpassen:</p> nav.component.html <pre><code>&lt;mat-sidenav-container class=\"sidenav-container\"&gt;\n  &lt;mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\"&gt;\n    &lt;mat-toolbar&gt;Menu&lt;/mat-toolbar&gt;\n    &lt;mat-nav-list&gt;\n&lt;a mat-list-item [routerLink]=\"''\"&gt;Home&lt;/a&gt;\n&lt;a mat-list-item [routerLink]=\"'register'\"&gt;Register&lt;/a&gt;\n&lt;a mat-list-item [routerLink]=\"'login'\"&gt;Login&lt;/a&gt;\n&lt;/mat-nav-list&gt;\n  &lt;/mat-sidenav&gt;\n  &lt;mat-sidenav-content&gt;\n    &lt;mat-toolbar color=\"primary\"&gt;\n      &lt;button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\"&gt;\n        &lt;mat-icon aria-label=\"Side nav toggle icon\"&gt;menu&lt;/mat-icon&gt;\n      &lt;/button&gt;\n&lt;span&gt;Nutzerinnenverwaltung&lt;/span&gt;\n&lt;/mat-toolbar&gt;\n    &lt;!-- Add Content Here --&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;/mat-sidenav-content&gt;\n&lt;/mat-sidenav-container&gt;\n</code></pre> <p>In den Zeilen <code>8-10</code> werden die Men\u00fceintr\u00e4ge ge\u00e4ndert und die Verweise auf <code>routerLinks</code> ge\u00e4ndert. In Zeile <code>23</code> wird die \u00dcberschrift ge\u00e4ndert und in Zeile <code>26</code> erscheint der Platzhalter f\u00fcr die per Routing eingebundenen Komponenten. </p> <p>Die Anwendung sieht nun wie folgt aus (Desktop- und Mobile-Ansicht):</p> <p></p> <p>Die Men\u00fceintr\u00e4ge funktionieren und bei der <code>register</code>-Komponente wird bereits ein recht umfangreiches Formular angezeigt (wegen des verwendeten <code>address-form</code>-Schemas).</p>"},{"location":"guards/#registrierung","title":"Registrierung","text":"<p>Wir passen die durch das <code>address-form</code>-Schema erstellte <code>register</code>-Komponente an. Die Dateien der <code>register</code>-Komponente k\u00f6nnten z.B. so aussehen:</p> register.component.tsregister.component.htmlregister.component.css <pre><code>import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from '../shared/user';\n\n@Component({\nselector: 'app-register',\ntemplateUrl: './register.component.html',\nstyleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\nregisterForm = new FormGroup({\nusername: new FormControl('', Validators.required),\npassword: new FormControl('', [Validators.required, Validators.minLength(8)]),\npassword2: new FormControl('', [Validators.required, Validators.minLength(8)]),\nemail: new FormControl('', [Validators.required, Validators.email]),\nrole: new FormControl('', Validators.required)\n});\nroles = [ \"admin\", \"user\"];\nhide = true;\nhide2 = true;\nuser!: User;\n\nconstructor() {}\n\nonSubmit(): void {\nconst values = this.registerForm.value;\nthis.user = {\nusername: values.username!,\npassword: values.password!,\nemail: values.email!,\nrole: values.role!\n};\nconsole.log(this.user)\n}\n}\n</code></pre> <pre><code>&lt;form [formGroup]=\"registerForm\" novalidate (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;mat-card class=\"shipping-card\"&gt;\n    &lt;mat-card-header&gt;\n      &lt;mat-card-title&gt;Registrierung&lt;/mat-card-title&gt;\n    &lt;/mat-card-header&gt;\n    &lt;mat-card-content&gt;\n\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field hintLabel=\"Einloggen mit Nutzername und Passwort\" class=\"full-width\"&gt;\n            &lt;input matInput placeholder=\"Nutzername\" formControlName=\"username\"&gt;\n            &lt;mat-icon matSuffix &gt;person_add&lt;/mat-icon&gt;\n            &lt;mat-error *ngIf=\"registerForm.controls['username'].hasError('required')\"&gt;\n              Nutzername &lt;strong&gt;erforderlich&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field hintLabel=\"Mind. 8 Zeichen, mind. 1 Gro\u00df- und Kleinbuchstaben, Ziffer und Sonderzeichen\" class=\"full-width\"&gt;\n            &lt;input matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Passwort\" formControlName=\"password\"&gt;\n            &lt;button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\"&gt;\n              &lt;mat-icon&gt;{{hide ? 'visibility_off' : 'visibility'}}&lt;/mat-icon&gt;\n            &lt;/button&gt;\n            &lt;mat-error *ngIf=\"registerForm.controls['password'].hasError('required')\"&gt;\n              Passwort &lt;strong&gt;erforderlich&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field hintLabel=\"Dasselbe Passwort wie oben\" class=\"full-width\"&gt;\n            &lt;input matInput  [type]=\"hide2 ? 'password' : 'text'\" placeholder=\"Passwort wiederholen\" formControlName=\"password2\"&gt;\n            &lt;button mat-icon-button matSuffix (click)=\"hide2 = !hide2\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\"&gt;\n              &lt;mat-icon&gt;{{hide2 ? 'visibility_off' : 'visibility'}}&lt;/mat-icon&gt;\n            &lt;/button&gt;\n            &lt;mat-error *ngIf=\"registerForm.controls['password2'].hasError('required')\"&gt;\n              Wiederholung Passwort &lt;strong&gt;erforderlich&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field hintLabel=\"E-Mail-Adresse zum Kontaktieren verwendet\" class=\"full-width\"&gt;\n            &lt;input matInput placeholder=\"E-Mail\" formControlName=\"email\"&gt;\n            &lt;mat-icon matSuffix&gt;email&lt;/mat-icon&gt;\n            &lt;mat-error *ngIf=\"registerForm.controls['email'].hasError('required')\"&gt;\n              E-Mail-Adresse &lt;strong&gt;erforderlich&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field hintLabel=\"W\u00e4hlen Sie eine der beiden Rollen aus\" class=\"full-width\"&gt;\n            &lt;mat-select placeholder=\"Rolle\" formControlName=\"role\"&gt;\n              &lt;mat-option *ngFor=\"let role of roles\" [value]=\"role\"&gt;\n                {{ role }}\n              &lt;/mat-option&gt;\n            &lt;/mat-select&gt;\n            &lt;mat-icon matSuffix&gt;group&lt;/mat-icon&gt;\n            &lt;mat-error *ngIf=\"registerForm.controls['role'].hasError('required')\"&gt;\n              Rolle &lt;strong&gt;erforderlich&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n    &lt;/mat-card-content&gt;\n    &lt;mat-card-actions&gt;\n      &lt;button mat-raised-button color=\"primary\" type=\"submit\"&gt;Registrieren&lt;/button&gt;\n    &lt;/mat-card-actions&gt;\n  &lt;/mat-card&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>.full-width {\nwidth: 100%;\n}\n\n.shipping-card {\nmin-width: 120px;\nmax-width: 80%;\nmargin-left: auto;\nmargin-right: auto;\nmargin: 3% auto;\n}\n\n.mat-radio-button {\ndisplay: block;\nmargin: 5px 0;\n}\n\n.row {\ndisplay: flex;\nflex-direction: row;\n}\n\n.col {\nflex: 1;\nmargin-right: 20px;\n}\n\n.col:last-child {\nmargin-right: 0;\n}\n</code></pre> <p>Das ergibt folgende Ansicht:</p> <p></p>"},{"location":"guards/#service-verwenden","title":"Service verwenden","text":"<p>In dem <code>auth</code>-Service binden wir das Backend an und nutzen bspw. die im Registrierungsformular eingegebenen Daten, um die Nutzerin zu registrieren. </p> <p>Achtung!</p> <p>Nicht vergessen, das <code>HttpClientModule</code> in der <code>app.module.ts</code> zu importieren (unter <code>imports</code> eintragen und <code>import { HttpClientModule } from '@angular/common/http';</code> einf\u00fcgen lassen)!</p> <p>Wichtig ist auch, dass das Backend l\u00e4uft!</p> <p>Der Service k\u00f6nnte z.B. so aussehen:</p> auth.service.js <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from './user';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AuthService {\nbaseUrl = 'http://localhost:3000';\n\nconstructor(private http: HttpClient) { }\n\ngetAllUsers(): Observable&lt;User[]&gt;{\nreturn this.http.get&lt;User[]&gt;(this.baseUrl + '/users');\n}\n\nregisterUser(user:User): Observable&lt;any&gt; {\nreturn this.http.post(this.baseUrl + '/users/register', user);\n}\n}\n</code></pre> <p>und die <code>submit()</code>-Funktion in der <code>register.component.ts</code> k\u00f6nnte zun\u00e4chst wie folgt erweitert werden:</p> <pre><code>  onSubmit(): void {\nconst values = this.registerForm.value;\nthis.user = {\nusername: values.username!,\npassword: values.password!,\nemail: values.email!,\nrole: values.role!\n};\nconsole.log(this.user)\nthis.auth.registerUser(this.user).subscribe({\nnext: (response) =&gt; console.log('response', response),\nerror: (err) =&gt; console.log(err),\ncomplete: () =&gt; console.log('register completed')\n});\n}\n</code></pre> <p>Wenn nun das Registrierungsformular vollst\u00e4ndig ausgef\u00fcllt wird und weder <code>username</code> noch <code>email</code> bereits in der Datenbank existieren, wird ein neuer Datensatz in der Datenbank angelegt. Die neue Nutzerin ist registriert. Wenn jedoch der <code>username</code> und/oder die <code>email</code> bereits existier(t/en), wird nicht die <code>next</code>-Eigenschaft des Observers aufgerufen, sondern die <code>error</code>-Eigenschaft. Das hei\u00dft, entweder gibt es unter <code>next</code> eine <code>response</code>, n\u00e4mlich den neu angelegten <code>user</code> oder es gibt unter <code>error</code> ein Fehlerobjekt, welches selbst eine <code>error</code>-Eigenschaft hat (mit <code>{ error: 'username and/or email exist(s)'}</code>) und dessen Status <code>400</code> ist. </p>"},{"location":"guards/#modaler-dialog-zur-bestatigung","title":"Modaler Dialog zur Best\u00e4tigung","text":"<p>Derzeit gibt es keine R\u00fcckmeldung dar\u00fcber, ob die neue Nutzerin registriert wurde oder nicht. Wir wollen dazu einen modalen Dialog \u00f6ffnen, der die entsprechenden Informationen zur Verf\u00fcgung stellt. Dieser Dialog wird eine Komponente. Da diese Komponente jedoch ausschlie\u00dflich von der Registrierungskomponente verwendet wird, erstellen wir sie als Kindkomponente der Registrierungskomponente. Wir werden dabei insbesondere lernen, wie wir Daten von Elternkomponenten an Kindkomponenten weiterleiten k\u00f6nnen. </p> <p>Zun\u00e4chst erstellen wir die (Kind-)Komponente <code>confirm</code>:</p> <pre><code>ng g c register/confirm\n</code></pre> <p>Unter dem Ordner <code>register</code> entsteht ein weiterer Ordner <code>confirm</code>, der die <code>.html</code>, <code>.ts</code> und <code>.css</code> der Kindkomponente <code>confirm</code> enth\u00e4lt. Wir verwenden Dialog von Material Design. Wir gehen vor, wie in Dialog Examples gezeigt. Beachten Sie, dass Sie in <code>app.module.ts</code> das Modul <code>MatDialogModule</code> (aus <code>@angular/material/dialog</code>) importieren m\u00fcssen!</p> register.component.tsconfirm.component.tsconfirm.component.html <pre><code>import { ConfirmComponent } from './confirm/confirm.component';\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AuthService } from '../shared/auth.service';\nimport { User } from '../shared/user';\n\nexport interface DialogData {\nheadline: string;\ninfo: string;\n}\n@Component({\nselector: 'app-register',\ntemplateUrl: './register.component.html',\nstyleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\nregisterForm = new FormGroup({\nusername: new FormControl('', Validators.required),\npassword: new FormControl('', [Validators.required, Validators.minLength(8)]),\npassword2: new FormControl('', [Validators.required, Validators.minLength(8)]),\nemail: new FormControl('', [Validators.required, Validators.email]),\nrole: new FormControl('', Validators.required)\n});\nroles = [ \"admin\", \"user\"];\nhide = true;\nhide2 = true;\nuser!: User;\n\nconstructor(private auth: AuthService, public dialog: MatDialog) {}\n\nonSubmit(): void {\nconst values = this.registerForm.value;\nthis.user = {\nusername: values.username!,\npassword: values.password!,\nemail: values.email!,\nrole: values.role!\n};\nconsole.log(this.user)\nthis.auth.registerUser(this.user).subscribe({\nnext: (response) =&gt; {\nconsole.log('response', response)\nthis.openDialog({ headline: \"Erfolg\", info: \"User \" + response.username + \" registriert!\" });\n},\nerror: (err) =&gt; {\nconsole.log('error', err.error.error)\nthis.openDialog({ headline: \"Fehler\", info: \"username und/oder E-Mail existiert bereits\" });\n},\ncomplete: () =&gt; console.log('register completed')\n});\n\n}\n\nopenDialog(data: DialogData) {\nthis.dialog.open(ConfirmComponent, { data });\n}\n}\n</code></pre> <pre><code>import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { DialogData } from '../register.component';\n\n@Component({\nselector: 'app-confirm',\ntemplateUrl: './confirm.component.html',\nstyleUrls: ['./confirm.component.css']\n})\nexport class ConfirmComponent {\nconstructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) {}\n}\n</code></pre> <pre><code>&lt;h1 mat-dialog-title&gt;{{ data.headline }}&lt;/h1&gt;\n&lt;div mat-dialog-content&gt;\n  {{ data.info }}\n&lt;/div&gt;\n&lt;div mat-dialog-actions&gt;\n  &lt;button mat-button mat-dialog-close cdkFocusInitial&gt;Ok&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <p>Wenn nun die Registrierung erfolgreich war, erscheint ein entsprechender modaler Dialog und ebenso, wenn die Registrierung nicht erfolgt ist:</p> <p></p>"},{"location":"guards/#guards","title":"Guards","text":"<p>Mithilfe von Guards k\u00f6nnen wir festlegen, dass Komponenten z.B. nur dann aufgerufen werden k\u00f6nnen, wenn man eingelogged ist (aber nicht, wenn man nicht eingelogged ist) oder wenn man z.B. als <code>admin</code> eingelogged (und nicht nur als <code>user</code>) eingelogged ist. Wir werden hier demonstrieren, wie man solche Guards implementiert und verwendet. Dazu erstellen wir uns zun\u00e4chst eine weitere Komponente. Die Komponente <code>userlist</code> soll alle <code>user</code> aus der Datenbank auflisten (als Tabelle). Diese Komponente soll nur aufgerufen werden k\u00f6nnen, wenn man als <code>admin</code> eingelogged ist. Au\u00dferdem werden wir den Aufruf der <code>HomeComponent</code> nur f\u00fcr den Fall erlauben, dass man eingelogged ist.</p>"},{"location":"guards/#userlist-komponente","title":"<code>userlist</code>-Komponente","text":"<p>Die <code>userlist</code>-Komponente erstellen wir mithilfe des Material-Design-Schemas table:</p> <pre><code>ng generate @angular/material:table userlist\n</code></pre> <p>F\u00fcr das vereinfachte Beispiel hier haben wir jedoch die z.B. die Paginierung weggelassen. Viele Beispiele zu Tabellen mit Sortierung, Filterung, Paginierung usw. finden Sie hier.</p> userlist.component.tsuserlist.component.html <pre><code>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../shared/auth.service';\nimport { User } from '../shared/user';\n\n@Component({\nselector: 'app-userlist',\ntemplateUrl: './userlist.component.html',\nstyleUrls: ['./userlist.component.css']\n})\nexport class UserlistComponent implements OnInit {\n\nusers: User[] = [];\n\n/** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\ndisplayedColumns = ['username', 'email', 'role'];\n\nconstructor(private auth: AuthService) {\n\n}\nngOnInit(): void {\nthis.auth.getAllUsers().subscribe({\nnext: (response) =&gt; {\nthis.users = response;\nconsole.log('this.users', this.users)\n}\n})\n}\n\n}\n</code></pre> <pre><code>&lt;div class=\"mat-elevation-z8\"&gt;\n  &lt;table mat-table class=\"full-width-table\" [dataSource]=\"users\" aria-label=\"Elements\"&gt;\n    &lt;!-- username Column --&gt;\n    &lt;ng-container matColumnDef=\"username\"&gt;\n      &lt;th mat-header-cell *matHeaderCellDef&gt;Nutzername&lt;/th&gt;\n      &lt;td mat-cell *matCellDef=\"let user\"&gt;{{user.username}}&lt;/td&gt;\n    &lt;/ng-container&gt;\n\n    &lt;!-- email Column --&gt;\n    &lt;ng-container matColumnDef=\"email\"&gt;\n      &lt;th mat-header-cell *matHeaderCellDef&gt;E-Mail&lt;/th&gt;\n      &lt;td mat-cell *matCellDef=\"let user\"&gt;{{user.email}}&lt;/td&gt;\n    &lt;/ng-container&gt;\n\n    &lt;!-- role Column --&gt;\n    &lt;ng-container matColumnDef=\"role\"&gt;\n      &lt;th mat-header-cell *matHeaderCellDef&gt;Rolle&lt;/th&gt;\n      &lt;td mat-cell *matCellDef=\"let user\"&gt;{{user.role}}&lt;/td&gt;\n    &lt;/ng-container&gt;\n\n    &lt;tr mat-header-row *matHeaderRowDef=\"displayedColumns\"&gt;&lt;/tr&gt;\n    &lt;tr mat-row *matRowDef=\"let user; columns: displayedColumns;\"&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n\n  &lt;mat-paginator #paginator\n      [length]=\"users.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"10\"\n      [pageSizeOptions]=\"[5, 10, 20]\"\n      aria-label=\"Select page\"&gt;\n  &lt;/mat-paginator&gt;\n&lt;/div&gt;\n</code></pre> <p>Die Tabelle sieht dann wie folgt aus:</p> <p></p>"},{"location":"guards/#guard-fur-den-komponentenzugriff-logged-in","title":"Guard f\u00fcr den Komponentenzugriff - Logged in","text":"<p>In Routen absichern mit Guards haben wir bereits die Grundidee von Guards vorgestellt. Wir wollen diese hier anwenden und beschr\u00e4nken uns dabei auf den Guard-Typ <code>CanActivate</code>. Wir wollen sicherstellen, dass die <code>HomeComponent</code> nur aktiviert werden kann, wenn man eingelogged ist und die <code>RegisterComponent</code> nur dann, wenn man als <code>admin</code> eingelogged ist, um das Prinzip zu verdeutlichen. Wir erstellen uns also einen <code>CanActivate</code>-Guard (im Ordner <code>guards</code>):</p> <pre><code>ng g guard shared/authguard --implements CanActivate\n</code></pre> <p>Diesen <code>AuthGuard</code> implementieren wir wie folgt: </p> shared/authguard.guards.ts <pre><code>import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AuthguardGuard implements CanActivate {\n\nconstructor(\nprivate as: AuthService,\nprivate router: Router\n) {}\n\ncanActivate(\nroute: ActivatedRouteSnapshot,\nstate: RouterStateSnapshot): boolean | UrlTree {\nreturn this.as.isLoggedin()\n? true\n: this.router.parseUrl('/login');\n}\n\n}\n</code></pre> <p>Dieser Guard gibt bei Aufruf der <code>canActivate()</code>-Funktion ein <code>true</code> zur\u00fcck, wenn eine Nutzerin eingelogged ist (<code>isLoggedin()</code> aus dem <code>AuthService</code>). Wenn niemand eingelogged ist, (wenn also <code>isLoggedin()</code> ein <code>false</code> zur\u00fcckgibt), dann wird die aktuelle Route nach <code>/login</code> umgeleitet. Die Funktion <code>isLoggedin()</code> sieht im <code>auth.service.ts</code> wie folgt aus (au\u00dferdem erweitern wir den Service gleich noch um einige weitere n\u00fctzliche Funktionen):</p> shared/auth.service.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from './user';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AuthService {\nbaseUrl = 'http://localhost:3000';\nuser!: User | null;\nloggedIn = false;\n\nconstructor(private http: HttpClient) { }\n\ngetAllUsers(): Observable&lt;User[]&gt;{\nreturn this.http.get&lt;User[]&gt;(this.baseUrl + '/users');\n}\n\ngetOneUser(username: string): Observable&lt;User&gt;{\nreturn this.http.get&lt;User&gt;(this.baseUrl + '/users/' + username);\n}\n\nregisterUser(user:User): Observable&lt;any&gt; {\nreturn this.http.post(this.baseUrl + '/users/register', user);\n}\n\nisLoggedin(): boolean {\nreturn this.loggedIn;\n}\n\nloginUser(username: string, password: string ): Observable&lt;any&gt;{\nreturn this.http.post(this.baseUrl + '/users/login/', { username: username, password: password }, {observe: 'response'});\n}\n\nlogout(): void {\nthis.loggedIn = false;\nthis.user = null;\n}\n\ngetUser(): User | null {\nreturn this.user;\n}\n\nisAdmin(): boolean {\nif(this.user?.role === 'admin')\n{\nreturn true;\n}\nreturn false;\n}\n\nisUser(): boolean {\nif(this.user?.role === 'user')\n{\nreturn true;\n}\nreturn false;\n}\n}\n</code></pre> <p>Beachten Sie, dass der <code>post()</code>-Funktion in <code>loginUser()</code> noch die Option <code>observe: 'response'</code> hinzugef\u00fcgt wurde, um die gesamte Response zu erhalten und nicht nur den <code>body</code> als <code>json</code>. Das gibt uns die M\u00f6glichkeit, den <code>status</code> der Response auszuwerten. Schauen Sie sich dazu auch den <code>POST /users/login</code>-Endpunkt im Backend an. Der schickt verschiedene Status zur\u00fcck, je nachdem, ob das Login erfolgreich war (<code>201</code>) oder nicht (<code>204</code> bzw. <code>400</code>). </p> <p>In der <code>RegisterComponent</code> k\u00f6nnen wir nun auch noch die <code>login()</code>-Funktion des Services aufrufen, wenn die Registrierung erfolgreich war:</p> register.component.ts <pre><code>  onSubmit(): void {\nconst values = this.registerForm.value;\nthis.user = {\nusername: values.username!,\npassword: values.password!,\nemail: values.email!,\nrole: values.role!\n};\nconsole.log(this.user)\nthis.auth.registerUser(this.user).subscribe({\nnext: (response) =&gt; {\nconsole.log('response', response)\nthis.user = response;\nthis.auth.login(this.user)\nthis.openDialog({ headline: \"Erfolg\", info: \"User \" + response.username + \" registriert!\" });\n},\nerror: (err) =&gt; {\nconsole.log('error', err.error.error)\nthis.openDialog({ headline: \"Fehler\", info: \"username und/oder E-Mail existiert bereits\" });\n},\ncomplete: () =&gt; console.log('register completed')\n});\n</code></pre> <p>Wir f\u00fcgen diesen Guard nun in die <code>app-routing.module.ts</code> ein:</p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthguardGuard } from './shared/authguard.guard';\nimport { UserlistComponent } from './userlist/userlist.component';\n\nconst routes: Routes = [\n{\npath: \"\",\ntitle: \"Home\",\ncomponent: HomeComponent,\npathMatch: 'full',\ncanActivate: [AuthguardGuard]\n},\n{\npath: \"register\",\ntitle: \"Register\",\ncomponent: RegisterComponent\n},\n{\npath: \"login\",\ntitle: \"Login\",\ncomponent: LoginComponent\n},\n{\npath: \"users\",\ntitle: \"All Users\",\ncomponent: UserlistComponent\n}\n];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Wenn wir nun die Anwendung \u00f6ffnen, dann kommen wir gar nicht auf <code>HomeComponent</code>, sondern werden stets zur <code>LoginComponent</code> geleitet. Erst wenn wir eingelogged sind, ist die <code>HomeComponent</code> erreichbar. </p>"},{"location":"guards/#login-komponente","title":"Login-Komponente","text":"<p>Ehe wir noch einen weiteren Guard zur Erkennung implementieren, ob wir als <code>admin</code> eingelogged sind oder nicht, implementieren wir der Vollst\u00e4ndigkeit halber noch die Login-Komponente.</p> login.component.tslogin.component.htmllogin.component.css <pre><code>import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../shared/auth.service';\n\n@Component({\nselector: 'app-login',\ntemplateUrl: './login.component.html',\nstyleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\nhide = true;\n\nloginForm = this.fb.group({\nusername: [null, Validators.required],\npassword: [null, Validators.required]\n});\n\nconstructor(private fb: FormBuilder, private auth: AuthService, private router: Router) {}\n\nonSubmit(): void {\nconst values = this.loginForm.value;\nconst username = values.username;\nconst password =  values.password;\nconsole.log('values username', username)\nconsole.log('values password', password)\n\nthis.auth.loginUser(username!, password!).subscribe({\nnext: (response) =&gt; {\nconsole.log('login response',response);\nif(response.status == 201)\n{\nthis.auth.getOneUser(username!).subscribe(\n(response) =&gt; {\nthis.auth.login(response);\nthis.router.navigate(['/home'])\n}\n)\n} else {\nconsole.log('kein Login - Nutzername und/oder Passwort stimmen nicht')\n}\n},\nerror: (err) =&gt; {\nconsole.log('login error',err);\n},\ncomplete: () =&gt; console.log('login completed')\n}\n)\n\n}\n}\n</code></pre> <pre><code>&lt;form [formGroup]=\"loginForm\" novalidate (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;mat-card class=\"shipping-card\"&gt;\n    &lt;mat-card-header&gt;\n      &lt;mat-card-title&gt;Login&lt;/mat-card-title&gt;\n    &lt;/mat-card-header&gt;\n    &lt;mat-card-content&gt;\n      &lt;p&gt;\n        &lt;mat-form-field class=\"full-width\"&gt;\n          &lt;mat-label&gt;Nutzername&lt;/mat-label&gt;\n          &lt;input matInput placeholder=\"Nutzername\" formControlName=\"username\"&gt;\n          &lt;mat-icon matSuffix&gt;person&lt;/mat-icon&gt;\n          &lt;mat-error *ngIf=\"loginForm.controls['username'].hasError('required')\"&gt;\n            Nutzername &lt;strong&gt;erforderlich&lt;/strong&gt;\n          &lt;/mat-error&gt;\n        &lt;/mat-form-field&gt;\n      &lt;/p&gt;\n      &lt;p&gt;\n        &lt;mat-form-field class=\"full-width\" &gt;\n          &lt;mat-label&gt;Passwort&lt;/mat-label&gt;\n          &lt;input matInput placeholder=\"Passwort\" formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\"&gt;\n          &lt;button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hide\"&gt;\n            &lt;mat-icon&gt;{{hide ? 'visibility_off' : 'visibility'}}&lt;/mat-icon&gt;\n          &lt;/button&gt;\n        &lt;/mat-form-field&gt;\n      &lt;/p&gt;\n    &lt;/mat-card-content&gt;\n    &lt;mat-card-actions&gt;\n      &lt;button mat-raised-button color=\"primary\" type=\"submit\"&gt;Login&lt;/button&gt;\n    &lt;/mat-card-actions&gt;\n  &lt;/mat-card&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>mat-card {\nmargin: 5% 20%;\n}\n\n.full-width {\nwidth: 100%;\n}\n\nmat-card-header {\nmargin-bottom: 3%;\n}\n</code></pre> <p>Das ergibt folgende Ansicht:</p> <p></p> <p>Wenn das Login erfolgreich war, wird direkt die <code>home</code>-Komponente aufgerufen. Ist das Login nicht erfolgreich, wird bei der Login-Komponente verblieben. Es erfolgt nur eine Nachricht auf der Konsole - hier k\u00f6nnte (sollte!) nat\u00fcrlich auch ein modaler Dialog erscheinen, wie bei der Registrierung.</p>"},{"location":"guards/#guard-fur-den-komponentenzugriff-admin","title":"Guard f\u00fcr den Komponentenzugriff - <code>admin</code>","text":"<p>Wir erstellen noch einen weiteren Guard, um auch abzupr\u00fcfen, ob wir als <code>admin</code> eingelogged sind und wollen mit diesem Guard die <code>UserlistComponent</code> sichern, d.h. diese Komponente soll nur aufgerufen werden d\u00fcrfen, wenn die eingeloggte Nutzerin die Rolle <code>admin</code> besitzt (nicht <code>user</code>). </p> <pre><code>ng g guard shared/adminguard --implements CanActivate\n</code></pre> shared/adminguard.guards.ts <pre><code>import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AdminguardGuard implements CanActivate {\n\nconstructor(\nprivate auth: AuthService,\nprivate router: Router\n) {}\n\ncanActivate(\nroute: ActivatedRouteSnapshot,\nstate: RouterStateSnapshot): boolean | UrlTree {\nreturn this.auth.isAdmin()\n? true\n: this.router.parseUrl('');\n}\n\n}\n</code></pre> <p>Dieses Mal wird gepr\u00fcft, ob die Nutzerin eingelogged und in der <code>admin</code>-Rolle ist. Diesen Guard f\u00fcgen wir der <code>/users</code>-Route hinzu (also f\u00fcr die <code>UserlistComponent)</code>. Nur ein <code>admin</code> darf alle Nutzerinnen sehen (wird hier exemplarisch angenommen).</p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AdminguardGuard } from './shared/adminguard.guard';\nimport { AuthguardGuard } from './shared/authguard.guard';\nimport { UserlistComponent } from './userlist/userlist.component';\n\nconst routes: Routes = [\n{\npath: \"\",\ntitle: \"Home\",\ncomponent: HomeComponent,\npathMatch: 'full',\ncanActivate: [AuthguardGuard]\n},\n{ path: 'home',   redirectTo: ''},\n{\npath: \"register\",\ntitle: \"Register\",\ncomponent: RegisterComponent\n},\n{\npath: \"login\",\ntitle: \"Login\",\ncomponent: LoginComponent\n},\n{\npath: \"users\",\ntitle: \"All Users\",\ncomponent: UserlistComponent,\ncanActivate: [AdminguardGuard]\n},\n{ path: '**',   redirectTo: '/home'}\n];\n\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nexports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Wenn nun eine <code>admin</code>-Userin eingelogged ist, kann sie alle Komponenten \u00f6ffnen. Ist eine <code>user</code>-Userin eingelogged, hat sie keinen Zugriff auf die <code>UserlistComponent</code>, aber auf alle anderen Komponenten. Ist niemand eingelogged, kann nur die <code>Login</code>- und die <code>RegisterComponent</code> verwendet werden. </p>"},{"location":"guards/#subjects-fur-loginlogout","title":"Subjects f\u00fcr Login/Logout","text":"<p>Wir wollen in der <code>nav</code>-Komponente ein Login-Icon eintegrieren, wenn keine Nutzerin eingelogged ist bzw. den Nutzernamen der eingeloggten Nutzerin. Die <code>nav</code>-Komponente muss also dar\u00fcber informiert werden, wenn sich eine Nutzerin einlogged bzw. auslogged. Dazu verwenden wir Subjects.</p> <p>Wir erweitern dazu den <code>AuthService</code>:</p> auth.service.ts <pre><code>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { User } from './user';\n\n@Injectable({\nprovidedIn: 'root'\n})\n\nexport class AuthService {\nbaseUrl = 'http://localhost:3000';\nuser: User = {username: '', password: '', email: '', role: ''};\nuserChange: Subject&lt;User&gt; = new Subject&lt;User&gt;();\nloggedIn = false;\nloggedInChange: Subject&lt;boolean&gt; = new Subject&lt;boolean&gt;();\nconstructor(private http: HttpClient) {\nthis.loggedInChange.subscribe((value) =&gt; {\nthis.loggedIn = value\n});\nthis.userChange.subscribe((value) =&gt; {\nthis.user = value\n});\n}\n\ngetAllUsers(): Observable&lt;User[]&gt;{\nreturn this.http.get&lt;User[]&gt;(this.baseUrl + '/users');\n}\n\ngetOneUser(username: string): Observable&lt;User&gt;{\nreturn this.http.get&lt;User&gt;(this.baseUrl + '/users/' + username);\n}\n\nregisterUser(user:User): Observable&lt;any&gt; {\nreturn this.http.post(this.baseUrl + '/users/register', user);\n}\n\nloginUser(username: string, password: string ): Observable&lt;any&gt;{\nreturn this.http.post(this.baseUrl + '/users/login/', { username: username, password: password }, {observe: 'response'});\n}\n\nisLoggedin(): boolean {\nreturn this.loggedIn;\n}\n\nlogin(user: User): void {\nthis.loggedIn = true\nthis.loggedInChange.next(this.loggedIn);\nthis.user = user;\nthis.userChange.next(this.user);\nconsole.log('login() : ', this.user);\n}\n\nlogout(): void {\nthis.loggedIn = false;\nthis.loggedInChange.next(this.loggedIn);\nthis.user = {username: '', password: '', email: '', role: ''};\nthis.userChange.next(this.user);\n}\n\nisAdmin(): boolean {\nif(this.user?.role === 'admin')\n{\nreturn true;\n}\nreturn false;\n}\n\nisUser(): boolean {\nif(this.user?.role === 'user')\n{\nreturn true;\n}\nreturn false;\n}\n}\n</code></pre> <p>Wir haben nun Subjects, die dar\u00fcber informieren (<code>next()</code>), wenn sich ein bestimmter Wert \u00e4ndert. In der <code>NavComponent</code> melden wir uns an diese Subjects an (<code>subscribe</code>):</p> nav.component.tsnav.component.htmlnav.component.css <pre><code>import { Router } from '@angular/router';\nimport { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { AuthService } from '../shared/auth.service';\nimport { User } from '../shared/user';\n\n@Component({\nselector: 'app-nav',\ntemplateUrl: './nav.component.html',\nstyleUrls: ['./nav.component.css']\n})\nexport class NavComponent {\nisLoggedIn = false;\nusername: string = '';\n\nisHandset$: Observable&lt;boolean&gt; = this.breakpointObserver.observe(Breakpoints.Handset)\n.pipe(\nmap(result =&gt; result.matches),\nshareReplay()\n);\n\nconstructor(private breakpointObserver: BreakpointObserver, private auth: AuthService, private router: Router) {\nthis.auth.loggedInChange.subscribe( value =&gt; {\nthis.isLoggedIn = value\nif(this.isLoggedIn) {\nthis.auth.userChange.subscribe( val =&gt; {\nconsole.log('nav user', val)\nthis.username = val?.username;\nconsole.log('nav username', this.username)\n})\n\n}\n})\n}\n\ncallLogin() {\nthis.router.navigate(['/login'])\n}\n\ncallLogout() {\nthis.isLoggedIn = false;\nthis.auth.logout();\nthis.router.navigate(['/login'])\n}\n\n}\n</code></pre> <pre><code>&lt;mat-sidenav-container class=\"sidenav-container\"&gt;\n  &lt;mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\"&gt;\n    &lt;mat-toolbar&gt;Menu&lt;/mat-toolbar&gt;\n    &lt;mat-nav-list&gt;\n        &lt;a mat-list-item [routerLink]=\"''\"&gt;Home&lt;/a&gt;\n        &lt;a mat-list-item [routerLink]=\"'register'\"&gt;Register&lt;/a&gt;\n        &lt;a mat-list-item [routerLink]=\"'login'\"&gt;Login&lt;/a&gt;\n        &lt;a mat-list-item [routerLink]=\"'users'\"&gt;All users&lt;/a&gt;\n    &lt;/mat-nav-list&gt;\n  &lt;/mat-sidenav&gt;\n  &lt;mat-sidenav-content&gt;\n    &lt;mat-toolbar color=\"primary\" class=\"flex\"&gt;\n      &lt;button class=\"left\"\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\"&gt;\n        &lt;mat-icon aria-label=\"Side nav toggle icon\"&gt;menu&lt;/mat-icon&gt;\n      &lt;/button&gt;\n      &lt;span class=\"left\"&gt;Nutzerinnenverwaltung&lt;/span&gt;\n&lt;button *ngIf=\"!isLoggedIn\" mat-icon-button class=\"right\" (click)=\"callLogin()\"&gt;\n&lt;mat-icon&gt;login&lt;/mat-icon&gt;\n&lt;/button&gt;\n&lt;div *ngIf=\"isLoggedIn\" class=\"right\"&gt;\n&lt;span&gt;{{username}} &lt;/span&gt;\n&lt;button mat-icon-button (click)=\"callLogout()\"&gt;\n&lt;mat-icon&gt;logout&lt;/mat-icon&gt;\n&lt;/button&gt;\n&lt;/div&gt;\n&lt;/mat-toolbar&gt;\n    &lt;!-- Add Content Here --&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  &lt;/mat-sidenav-content&gt;\n&lt;/mat-sidenav-container&gt;\n</code></pre> <pre><code>.sidenav-container {\nheight: 100%;\n}\n\n.sidenav {\nwidth: 200px;\n}\n\n.sidenav .mat-toolbar {\nbackground: inherit;\n}\n\n.mat-toolbar.mat-primary {\nposition: sticky;\ntop: 0;\nz-index: 1;\n}\n\n\n.flex {\ndisplay: flex;\njustify-content: space-between;\nflex-direction: row;\nwidth: 100%;\n}\n\n.left,\n.right {\ndisplay:block;\n}\n\n.left {\nfloat: left;\n}\n\n.right {\ntext-align: right;\nfloat: right;\n}\n</code></pre> <p>Die <code>nav</code>-Komponente hat nun oben rechts ein Login-Icon (Button), wenn niemand eingelogged ist bzw. den <code>username</code> und einen Logout-Icon (Button) der Nutzerin, die eingelogged ist. Mithilfe von Subject wird sofort darauf reagiert, wenn sich jemand ein- bzw. ausloggt.</p> <p>Success</p> <p>Wir haben eine (sehr einfache) Nutzerverwaltung implementiert. Eine Nutzerin kann sich registrieren und einloggen. Die Registrierungsdaten werden in der Datenbank gespeichert. Das Passwort wird verschl\u00fcsselt abgelegt. Jeder Nutzerin kann eine Rolle zugewiesen werden. Abh\u00e4ngig davon, ob jemand eingelogged ist bzw. in welcher Rolle, sind die Komponenten unterschiedlich erreichbar. Dies wurde mit Guards realisiert. F\u00fcr das Layout wurde Angular Material verwendet. Die Nutzerverwaltung ist noch sehr rudiment\u00e4r. Es fehlt z.B. noch das Ausloggen. Es w\u00e4re auch gut, wenn die Nutzerin nach misslungenem Einloggen eine entsprechende Nachricht bek\u00e4me. Die Konzepte f\u00fcr eine Dialoggestaltung, f\u00fcr die Erweitereung und Anbindung des Backends sowie f\u00fcr eine Weitereleitung auf eine andere Komponente wurden jedoch alle exemplarisch gezeigt.  </p>"},{"location":"html/","title":"HTML","text":""},{"location":"html/#einleitung","title":"Einleitung","text":"<p>HTML steht f\u00fcr HyperText Markup Language. HTML ist eine sogenannte Auszeichnungssprache. Das bedeutet, dass Textelementen sogenannte Tags (HTML-Elemente) zugeordnet werden, um dem Text, der von einem solchen Tag umschlossen wird, eine Bedeutung zuzuweisen - der Text wird ausgezeichnet.</p> <p>Beispiel:</p> <pre><code>&lt;h1&gt;Gro\u00dfe \u00dcberschrift&lt;/h1&gt;\n</code></pre> <p>Im obigen Beispiel wurde der Text Gro\u00dfe \u00dcberschrift durch das HTML-Element <code>h1</code> ausgezeichnet. Die Bedeutung dieses Elementes ist, dass es sich bei dem ausgezeichneten Text um eine \u00dcberschrift handelt. Es gibt 6 HTML-Elemente, die \u00dcberschriften charakterisieren: <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>. Die Nummern geben die Gr\u00f6\u00dfe der \u00dcberschrift an: <code>h1</code> ist die gr\u00f6\u00dfte \u00dcberschrift, <code>h6</code> die kleinste. Klicken Sie im folgenden Fenster auf den Reiter \"Result\", um die Unterschiede zu sehen:</p>"},{"location":"html/#hierarchische-anordnung-der-html-elemente","title":"Hierarchische Anordnung der HTML-Elemente","text":"<p>HTML-Elemente bestehen - bis auf wenige Ausnahmen - aus einem Start-Tag <code>&lt;tag&gt;</code> und einem Ende-Tag <code>&lt;/tag&gt;</code> (tag steht hier f\u00fcr den Namen eines beliebigen Elementes). Wird ein neues HTML-Element <code>el2</code> innerhalb eines anderen HTML-Elementes <code>el1</code> ge\u00f6ffnet, so muss <code>el2</code> auch geschlossen werden, bevor <code>el1</code> geschlossen wird.  </p> <p>Success</p> <pre><code>&lt;el1&gt; diese Anordnung der\n    &lt;el2&gt;\n          Elemente ist korrekt\n    &lt;/el2&gt;\n&lt;/el1&gt;\n</code></pre> <p>Failure</p> <pre><code>&lt;el1&gt; diese Anordnung der\n    &lt;el2&gt;\n           Elemente ist falsch\n&lt;/el1&gt;\n   &lt;/el2&gt;\n</code></pre> <p>Es gibt nur wenige HTML-Elemente, die nicht aus einem Start- und einem Ende-Tag bestehen, sondern sogenannte stand alone Tags sind. Ein typisches Beispiel ist der Zeilenumbruch <code>&lt;br&gt;</code>. Um einerseits zu symbolisieren, dass es sich um Start- und Ende-Tag in einem handelt, insbesondere aber, um XHTML-konform zu sein, geben wir f\u00fcr solche stand-alone Tags den Slash vor der schlie\u00dfenden spitzen Klammer an, d.h. wir schreiben <code>&lt;br /&gt;</code>.</p>"},{"location":"html/#grundgerust-einer-html-seite","title":"Grundger\u00fcst einer HTML-Seite","text":"<p>Prinzipiell besteht eine HTML-Seite aus einem <code>&lt;head&gt;</code>- und einem <code>&lt;body&gt;</code>-Bereich. Im <code>&lt;head&gt;</code>-Bereich k\u00f6nnen Metadaten \u00fcber die Seite definiert werden. Der <code>&lt;body&gt;</code>-Bereich definiert den sichtbaren Bereich der Seite, also das, was im Browser dargestellt wird. Eingeschlossen werden der <code>&lt;head&gt;</code>- und der <code>&lt;body&gt;</code>-Bereich von einem <code>&lt;html&gt;</code>-Element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Seitentitel&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Das ist eine gro\u00dfe \u00dcberschrift&lt;/h1&gt;\n    &lt;p&gt;Das ist ein Absatz.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Das obige Beispiel zeigt ein Grundger\u00fcst einer HTML-Seite. <code>&lt;!DOCTYPE html&gt;</code> gibt dem Browser an, dass es sich um eine HTML-Datei handelt, die vom Browser \"gerendert\", d.h. dargestellt wird.</p> <p>Der <code>&lt;head&gt;</code>-Bereich enth\u00e4lt in diesem Beispiel nur ein <code>&lt;title&gt;</code>-Element. Dieser Titel wird im Browser im Reiter (Tab) gezeigt. Au\u00dferdem wird der Titel in der Ergebnisliste einer Suchmaschine verwendet.</p> <p>Das <code>&lt;body&gt;</code>-Element, also der im Browser dargestellte Bereich, enth\u00e4lt eine \u00dcberschrift (<code>&lt;h1&gt;</code>) und einen Absatz (<code>&lt;p&gt;</code>).</p> <p>Aufgabe:</p> <p>Erstellen Sie eine Datei <code>index.html</code> und f\u00fcgen Sie obigen HTML-Code ein. Rufen Sie die Datei im Browser auf.</p>"},{"location":"html/#metadaten-im-head","title":"Metadaten im Head","text":"<p>Das <code>&lt;head&gt;</code>-Element ist der Container f\u00fcr (Meta-)Daten \u00fcber das Webdokument. Das <code>&lt;head&gt;</code>-Element kommt in das <code>&lt;html&gt;</code>-Element und vor das <code>&lt;body&gt;</code>-Element. Die Metadaten werden nicht dargestellt.  Typische HTML-Elemente f\u00fcr Metadaten sind: </p> <ul> <li><code>&lt;title&gt;</code> : Titel des Dokumentes (im Tab und in der Such-Ergebnisliste,\u00a0</li> <li><code>&lt;style&gt;</code> : f\u00fcr Format-Angaben (CSS),\u00a0</li> <li><code>&lt;meta&gt;</code> : f\u00fcr die Festlegung von Zeichenkodierungen, Schl\u00fcsselw\u00f6rter, Autor usw.,\u00a0</li> <li><code>&lt;link&gt;</code> : zum Einbinden externer CSS-Dateien,\u00a0</li> <li><code>&lt;script&gt;</code> : zum Definieren von Client-seitigen JavaScript-Funktionen, </li> <li><code>&lt;base&gt;</code> : zum Festlegen, der URL, von der aus alle Pfadangaben relativ sind. </li> </ul> Beispiel Metadaten <pre><code> &lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"description\" content=\"meta data\"&gt;\n  &lt;meta name=\"keywords\" content=\"HTML, head, title, meta, link, style\"&gt;\n  &lt;meta name=\"author\" content=\"J\u00f6rn Freiheit\"&gt;\n  &lt;meta http-equiv=\"refresh\" content=\"30\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"mystyle.css\"&gt;\n  &lt;style&gt;\nbody {background-color: #29e0e6;}        h1 {color: #ff6a3b;}        ul {color: #0000ff;}\n&lt;/style&gt;\n  &lt;script&gt;\nfunction myFunction() { document.getElementById(\"demo\").innerHTML = \"Hallo FIW!\";        }\n&lt;/script&gt;\n  &lt;base href=\"localhost/Webtech20\" target=\"_blank\"&gt;\n  &lt;title&gt;Metadaten&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"html/#block-und-inline-elemente","title":"Block- und Inline-Elemente","text":"<p>Generell wird zwischen zwei Arten von HTML-Elementen unterschieden:</p> <ul> <li>Blockelemente</li> <li>Inline-Elemente</li> </ul> <p>Blockelemente verwenden die gesamte Breite der Browseransicht (des sogenannten Viewports). Das bedeutet, dass ein Blockelement stets in einer neuen Zeile beginnt und neben einem Blockelement kein weiteres Element ist (sondern in einer neuen Zeile beginnt).</p> <p>Inline-Elemente nehmen genau so viel Breite ein, wie n\u00f6tig (Breite des Inhalts) und beginnen nicht in einer neuen Zeile und enden auch nicht mit einem Zeilenumbruch.</p> <p>Beispiele f\u00fcr Inline- und Blockelemente (Reiter \"Result\" w\u00e4hlen, um Ergebnis zu sehen):</p> <p>Eine \u00dcbersicht \u00fcber alle HTML-Elemente mit Erl\u00e4uterungen findet sich hier.</p> <p>kleine \u00dcbungsaufgabe:</p> <p>Erweitern Sie Ihre Datei <code>index.html</code> und f\u00fcgen Sie mindestens folgende Elemente ein:</p> <ul> <li>2 verschiedene \u00dcberschriften (<code>h1</code>, ..., <code>h6</code>)</li> <li>eine nummerierte Liste (ordered list - <code>ol</code>) mit 3 Eintr\u00e4gen (list items - <code>li</code>)</li> <li>eine Strichpunktliste (unordered list - <code>ul</code>) mit 3 Eintr\u00e4gen (<code>li</code>)</li> <li>eine Tabelle (<code>table</code>); diese besteht aus einem Tabellenkopf (table head - <code>thead</code>) und einem Tabellenk\u00f6rper (table body - <code>tbody</code>)</li> <li>der thead enth\u00e4lt eine Zeile (table row - <code>tr</code>) als Tabellen\u00fcberschrift, wobei jede einzelne \u00dcberschrift (eine Spalte) als <code>th</code> definiert wird</li> <li>der tbody enth\u00e4lt mehrere Zeilen (<code>tr</code>); jede Zeile enth\u00e4lt so viele Dateneintr\u00e4ge (table data - <code>td</code>) wie es Spalten gibt</li> <li>einen Hyperlink (anchor - <code>a</code>), der ein Verweis auf die HTW-Seite enth\u00e4lt</li> <li>ein Bild (image - <code>img</code>)</li> </ul> <p>Rufen Sie die Datei im Browser auf.</p>"},{"location":"html/#einige-ausgewahlte-elemente","title":"Einige ausgew\u00e4hlte Elemente","text":""},{"location":"html/#hyperlinks-anchorelement","title":"Hyperlinks (Anchorelement)","text":"<p>Das HTML-Element f\u00fcr Hyperlinks ist <code>&lt;a&gt;</code>. Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist</p> <pre><code>&lt;a href=\"http://www.htw-berlin.de\" target=\"_blank\"&gt;HTW Berlin&lt;/a&gt;\n</code></pre> <p>Das Beispiel erstellt einen Hyperlink. Auf der Webseite sichtbar ist der Inhalt des Elementes, n\u00e4mlich <code>HTW Berlin</code>. Wird auf den Link geklickt, so \u00f6ffnet sich die Webseite der HTW (<code>www.htw-berlin.de</code>) in einem neuen Browser-Reiter (<code>target=\"_blank\"</code>).</p> <p>Weitere Beispiele:</p> <pre><code>&lt;a href=\"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\"&gt;Studienordnung FIW&lt;/a&gt;\n&lt;a href=\"mailto:freiheit@htw-berlin.de\"&gt;E-Mail an J\u00f6rn Freiheit&lt;/a&gt;\n</code></pre> <p>Das Anchorelement ist ein Inline-Element.</p>"},{"location":"html/#bilder-image","title":"Bilder (Image)","text":"<p>Das HTML-Element f\u00fcr Bilder ist <code>&lt;img&gt;</code>. Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist</p> <pre><code>&lt;img src=\"../Logos/fiw.jpg\" alt=\"FIW-Logo\"/&gt;\n</code></pre> <p>Das Beispiel zeigt das FIW-Logo auf der Webseite an. Es ist in der Datei <code>fiw.jpg</code> gespeichert, welche im Ordner <code>Logos</code> liegt. Der Ordner <code>Logos</code> befindet sich auf der gleichen Ordnerebene wie der Ordner, der die HTML-Datei enth\u00e4lt. Diesen Ordner muss man deshalb zun\u00e4chst mithilfe von <code>..</code> verlassen. Das Attribut <code>alt</code> wird verwendet, um einen alternatioven Text anzugeben, der angezeigt wird, falls das Bild nicht geladen werden kann. Wichtig ist das <code>alt</code>-Attribut aber insbesondere f\u00fcr die Barrierefreiheit. Ein Screenreader liest diesen Alternativtext vor. Sollte es sich bei dem Bild nur um ein dekoratives Element handeln (also nicht wirklich einen sinnvollen Inhalt haben), sollte man aus Gr\u00fcnden der Barrierfreiheit daf\u00fcr <code>alt=\"\"</code> angeben, dann \u00fcberspringt der Screenreader dieses Bild. </p> <p>Es sei erw\u00e4hnt, dass es auch sowohl das <code>height</code>- als auch das <code>width</code>-Attribut f\u00fcr <code>&lt;img&gt;</code> gibt, um die H\u00f6he bzw. die Breite des Bildes zu setzen. Dies sollte aber besser CSS \u00fcberlassen werden. </p> <p>Beachten Sie auch, dass es sich bei dem <code>&lt;img&gt;</code>-Element um ein stand alone Element handelt. Wir beenden das Element deshalb mit <code>/&gt;</code>, um XML-konform zu sein. Das <code>&lt;img&gt;</code>-Element ist ein Inline-Element.</p>"},{"location":"html/#tabellen","title":"Tabellen","text":"<p>Tabellen (<code>&lt;table&gt;</code>) bestehen aus einen Tabellenkopf (<code>&lt;thead&gt;</code>) und einem Tabellenk\u00f6rper (<code>&lt;tbody&gt;</code>). Der Tabellenkopf enth\u00e4lt eine Tabellenzeile (<code>&lt;tr&gt;</code>) mit beliebig vielen Eintr\u00e4gen, den jeweiligen Spalten\u00fcberschriften (<code>&lt;th&gt;</code>). Der Tabellenk\u00f6rper enth\u00e4lt beliebig viele Zeilen (<code>&lt;tr&gt;</code>), die in jeder Spalten Dateneintr\u00e4ge (<code>&lt;td&gt;</code>) enthalten. Ein Beispiel f\u00fcr eine Tabelle:</p> <pre><code>&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Spalte 1&lt;/th&gt;\n            &lt;th&gt;Spalte 2&lt;/th&gt;\n            &lt;th&gt;Spalte 3&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td&gt;1_1&lt;/td&gt;\n        &lt;td&gt;1_2&lt;/td&gt;\n        &lt;td&gt;1_3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;2_1&lt;/td&gt;\n        &lt;td&gt;2_2&lt;/td&gt;\n        &lt;td&gt;2_3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;3_1&lt;/td&gt;\n        &lt;td&gt;3_2&lt;/td&gt;\n        &lt;td&gt;3_3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>Das Formatieren der Tabellen (Rahmen, rechtsb\u00fcndig usw.) sollte stets CSS \u00fcberlassen werden.</p>"},{"location":"html/#listen","title":"Listen","text":"<p>Es gibt nummerierte Listen (ordered list <code>&lt;ol&gt;</code>) und nicht-nummerierte Listen (unordered list <code>&lt;ul&gt;</code>). Die Eintr\u00e4ge in einer Liste sind die list items <code>&lt;li&gt;</code>. Listen k\u00f6nnen auch ineinander verschachtelt werden. Dabei ist nur zu beachten, dass Listen immer nur list items enthalten sollen und die list items dann selbst wieder eine neue Liste enthalten k\u00f6nnen.</p> ordered listunordered listverschachtelte Liste <pre><code>&lt;ol&gt;\n  &lt;li&gt;eins&lt;/li&gt;\n  &lt;li&gt;zwei&lt;/li&gt;\n  &lt;li&gt;drei&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <pre><code>&lt;ul&gt;\n  &lt;li&gt;eins&lt;/li&gt;\n  &lt;li&gt;zwei&lt;/li&gt;\n  &lt;li&gt;drei&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>&lt;ol&gt;\n  &lt;li&gt;\n      &lt;ol&gt;\n          &lt;li&gt;eins_eins&lt;/li&gt;\n          &lt;li&gt;eins_zwei&lt;/li&gt;\n          &lt;li&gt;eins_drei&lt;/li&gt;\n      &lt;/ol&gt;\n  &lt;/li&gt;\n  &lt;li&gt;zwei&lt;/li&gt;\n  &lt;li&gt;\n      &lt;ul&gt;\n          &lt;li&gt;drei_eins&lt;/li&gt;\n          &lt;li&gt;drei_zwei&lt;/li&gt;\n          &lt;li&gt;drei_drei&lt;/li&gt;\n      &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"html/#container-elemente","title":"Container-Elemente","text":"<p>Einige Elemente dienen nur der besseren Strukturierung des HTML-Codes und der besseren \"Ansprechbarkeit\" im CSS (d.h. f\u00fcr diese Elemente k\u00f6nnen dann eigene CSS-Eigenschaften zugewisen werden). Vor HTML 5 wurde daf\u00fcr das Element <code>&lt;div&gt;</code> verwendet. Es existiert noch immer. Mit HTML 5 wurden aber weitere Container-Elemente hinzugef\u00fcgt:</p> <ul> <li><code>&lt;main&gt;</code> - f\u00fcr den Hauptinhalt, sollte genau einmal im Dokument vorkommen</li> <li><code>&lt;section&gt;</code> - f\u00fcr gr\u00f6\u00dfere Abschnitte (Teile); kann z.B. article enthalten</li> <li><code>&lt;article&gt;</code> - f\u00fcr Abschnitte (z.B. Blog-Eintr\u00e4ge) in main </li> <li><code>&lt;aside&gt;</code> - f\u00fcr z.B. News an der Seite</li> <li><code>&lt;footer&gt;</code> - f\u00fcr die Fu\u00dfzeile (mit Impressum, Copyright, usw.)</li> <li><code>&lt;header&gt;</code> - f\u00fcr die Kopfzeile (mit Logo, Navigation usw.)</li> <li><code>&lt;nav&gt;</code> - f\u00fcr das Navigationsmen\u00fc</li> </ul> <p>Container-Elemente sind nicht \"sichtbar\", jedoch Block-Elemente. Es ist empfehlenswert, die eigene Webseite mit solchen Container-Elementen zu strukturieren, um erstens einen besseren \u00dcberblick \u00fcber die Seite zu bewahren und insbesondere gezielter die Formatierungseigenschaften von CSS verwenden zu k\u00f6nnen. Dies schlie\u00dft das Layout ein. Die folgende Abbildung zeigt, wof\u00fcr solche Container-Elemente gedacht sind.</p> <p></p> <p>Die Elemente ordnen sich aber z.B. nicht von alleine nebeneinander an. Daf\u00fcr verwenden wir sp\u00e4ter CSS. Mithilfe von Container strukturieren wir jedoch den HTML-Code (vergleichbar mit <code>JPanel</code> in Java). Beispiel (aus W3School):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;CSS Template&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;CSS Layout Float&lt;/h2&gt;\n&lt;p&gt;In this example, we have created a header, two columns/boxes and a footer. On smaller screens, the columns will stack on top of each other.&lt;/p&gt;\n&lt;p&gt;Resize the browser window to see the responsive effect (you will learn more about this in our next chapter - HTML Responsive.)&lt;/p&gt;\n\n&lt;header&gt;\n  &lt;h2&gt;Cities&lt;/h2&gt;\n&lt;/header&gt;\n\n&lt;section&gt;\n  &lt;nav&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"#\"&gt;London&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#\"&gt;Paris&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#\"&gt;Tokyo&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n\n  &lt;article&gt;\n    &lt;h1&gt;London&lt;/h1&gt;\n    &lt;p&gt;London is the capital city of England. It is the most populous city in the  United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;\n    &lt;p&gt;Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.&lt;/p&gt;\n  &lt;/article&gt;\n&lt;/section&gt;\n\n&lt;footer&gt;\n  &lt;p&gt;Footer&lt;/p&gt;\n&lt;/footer&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In dem Beispiel dienen die Container nur der Strukturierung. Alles, was in den Header geh\u00f6rt, ist im <code>&lt;header&gt;</code>-Element (nicht zu verwechseln mit <code>&lt;head&gt;</code>!) und alles, was zum Footer geh\u00f6rt, kommt in das <code>&lt;footer&gt;</code>-Element. Der Hauptteil ist im <code>&lt;section&gt;</code>-Element, welches noch in <code>&lt;nav&gt;</code> und <code>&lt;article&gt;</code> unterteilt ist. </p>"},{"location":"html/#eingabe-bzw-steuerelemente","title":"Eingabe- bzw. Steuerelemente","text":"<p>Es gibt viele Steuerelemente in HTML und die Auswahl wird kontinuierlich gr\u00f6\u00dfer. Steuerelemente werden mit dem HTML-Element <code>&lt;input&gt;</code> definiert. Der Typ des Steuerelementes wird mit Attribut <code>type</code> definiert. Beispiele:</p> <pre><code>&lt;input type=\"button\" value=\"Click\" /&gt;\n&lt;input type=\"reset\" /&gt;\n&lt;input type=\"submit\" /&gt;\n&lt;input type=\"checkbox\" /&gt;\n&lt;input type=\"color\" /&gt;\n&lt;input type=\"date\" /&gt;\n&lt;input type=\"file\" /&gt;\n&lt;input type=\"number\" /&gt;\n&lt;input type=\"radio\" /&gt;\n&lt;input type=\"image\" src=\"../Logos/fiw.jpg\" width=\"40\" alt=\"FIW-Logo\"/&gt;\n&lt;input type=\"range\" min=\"10\" max=\"100\"/&gt;\n&lt;input type=\"text\" placeholder=\"Name\"/&gt;\n&lt;input type=\"email\" placeholder=\"E-Mail\"/&gt;\n&lt;input type=\"password\" /&gt;\n</code></pre> <p>Probieren Sie am besten diese Beispiele aus und schauen Sie sich die Darstellung an. Beachten Sie auch, dass die Elemente in den unterschiedlichen Browsern unterschiedlich dargestellt werden.</p>"},{"location":"html/#attribute","title":"Attribute","text":"<p>Wir haben in den obigen Beispielen bereits Attribute gesehen. In <code>&lt;a&gt;</code> wurden z.B. die Attribute <code>href</code> und <code>target</code> verwendet und in <code>&lt;img&gt;</code> die Attribute <code>src</code> und <code>alt</code>. Attribute werden innerhalb der spitzen Klammern des Begin-Tags angegeben und haben die Form:</p> <pre><code>attribut = \"wert\"\n</code></pre> <p>Das hei\u00dft, auf der linken Seite steht das Attribut und auf der rechten Seite der Wert des Attributs in doppelten Hochkommata. Es gibt Attribute, die ohne Wert verwendet werden k\u00f6nnen, z.B. <code>checked</code> f\u00fcr ein Eingabeelement <code>&lt;input&gt;</code>, z.B.</p> <pre><code>&lt;input type=\"checkbox\" name=\"SG\" value=\"FIW\" checked /&gt; FIW&lt;br&gt;\n</code></pre> <p>Um XML-konform zu sein, sollte man eigentlich besser <code>&lt;input type=\"checkbox\" name=\"SG\" value=\"FIW\" checked=\"checked\" /&gt;</code> verwenden, macht aber niemand. Das Attribut <code>checked</code>ist ein Beispiel f\u00fcr ein Attribut, das speziell f\u00fcr ein HTML-Element zur Verf\u00fcgung steht (hier f\u00fcr <code>&lt;input&gt;</code>). Die meisten Attribute existieren speziell f\u00fcr HTML-Elemente. </p> <p>Dar\u00fcber hinaus gibt es noch sogenannte globale Attribute, die f\u00fcr alle HTML-Elemente verwendet werden k\u00f6nnen. Beispiele solcher Attribute sind </p> globales Attribut Erl\u00e4uterung <code>id</code> weist dem Element eine id zu; eine id sollte innerhalb eines HTML-Dokumentes eindeutig sein <code>class</code> \u00a0weist dem Element eine oder mehrere Klassen zu, deren Eigenschaften in CSS definiert werden k\u00f6nnen <code>hidden</code> \u00a0setzt das Element auf unsichtbar, es wird nicht angezeigt <code>title</code> \u00a0weist einem Element textuelle Informationen zu, die bei l\u00e4ngerem Mouseover angezeigt werden (tooltip)"},{"location":"html/#besondere-zeichen","title":"Besondere Zeichen","text":"<p>F\u00fcr einige Sonderzeichen gibt es vordefinierte Entit\u00e4ten. Die folgende Tabelle zeigt ein paar Sonderzeichen. Sie k\u00f6nnen Sie beispielsweise per <code>&lt;span&gt;&amp;euro;&lt;/span&gt;</code> ergibt <code>\u20ac</code> aufrufen. Es beginnt also immer mit einem <code>&amp;</code> und endet mit einem <code>;</code>.</p> Entit\u00e4t Zeichen &amp;euro; \u20ac &amp;amp; &amp; &amp;lt; &lt; &amp;gt; &gt; &amp;quot; \" &amp;forall; \u2200 &amp;exist; \u2203 &amp;empty; \u2205 &amp;isin; \u2208 &amp;notin; \u2209 &amp;ni; \u220b &amp;prod; \u220f &amp;sum; \u2211 &amp;copy; \u00a9 &amp;reg; \u00ae &amp;trade; \u2122 &amp;larr; \u2190 &amp;uarr; \u2191 &amp;rarr; \u2192 &amp;darr; \u2193 &amp;harr; \u2194 &amp;crarr; \u21b5 &amp;spades; \u2660 &amp;clubs; \u2663 &amp;hearts; \u2665 &amp;diams; \u2666 <p>\u00dcbung</p> <p>Erstellen Sie die obige Tabelle in HTML (die ersten paar Zeilen gen\u00fcgen). Die Herausforderung besteht darin, einerseits den Code darzustellen und andererseits das Zeichen. </p> <p>In der UTF-8-Tabelle sind nicht nur Sonderzeichen enthalten, sondern auch Emojis. Diese werden \u00fcber den Hexadezimalcode eingebunden, z.B. <code>&amp;#x1F600;</code> ergibt \ud83d\ude00. Das Vorgehen ist das Folgende: Sie schauen z.B. hier nach und suchen sich das passende Emoji in der Spalte <code>Browser</code>. Von dem links daneben stehenden Unicode (z.B. <code>U+1F600</code>) ben\u00f6tigen Sie nur den Hexadezimalwert (<code>1F600</code>). Diesen f\u00fcgen Sie nach <code>&amp;#x</code> ein und h\u00e4ngen ein <code>;</code> an. Also bspw. <code>&amp;#x1F44D;</code> ergibt \ud83d\udc4d.</p>"},{"location":"html/#relative-pfade","title":"Relative Pfade","text":"<p>Wenn Sie z.B. Bilder in den HTML-Code einbinden oder Hyperlinks auf andere HTML-Dokumente angeben, dann m\u00fcssen Sie angeben, wo diese jeweilige Ressource verf\u00fcgbar ist. Beispiel:</p> <pre><code>&lt;img src=\"fiw.jpg\" alt=\"FIW-Logo\" /&gt;\n&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;\n</code></pre> <p>Beachten Sie, dass sowohl in dem <code>src</code>-Attribut als auch in dem <code>href</code>-Attribut Pfade zur Ressource angegeben werden. Das hei\u00dft, dass z.B. <code>fiw.jpg</code> entspricht <code>./fiw.jpg</code> bzw. <code>index.html</code> entspricht <code>./index.html</code>. Das wiederum bedeutet, dass beide Ressourcen in demselben Ordner leigen m\u00fcssen, in dem auch das aufrufende Dokument liegt. Das ist nat\u00fcrlich nur (sehr) selten der Fall.</p> <p>Angenommen, wir haben eine Verzeichnisstruktur wie in der folgenden Abbildung gezeigt:</p> <p></p> <ul> <li>Angenommen, wir wollen aus der <code>index.html</code> heraus auf die <code>uebung1.html</code> verlinken, dann ist der Pfad <code>Uebung1/uebung1.html</code>, denn der Ordner <code>Uebung1</code> befindet sich direkt neben der <code>index.html</code>. </li> <li>Angenommen, wir wollen aus der <code>uebung1.html</code> heraus auf die <code>uebung2.html</code> verlinken, dann ist der Pfad <code>../Uebung2/uebung2.html</code>, denn der Ordner <code>Uebung2</code> befindet sich direkt neben dem Ordner <code>Uebung1</code> (aus dem wir zun\u00e4chst heraus m\u00fcssen) und darin die <code>uebung2.html</code>. </li> <li>Angenommen, wir wollen in der <code>uebung3.html</code> das Bild <code>fiw.jpg</code> einbinden, dann ist der Pfad <code>../Uebung1/images/fiw.jpg</code>, denn der Ordner <code>Uebung1</code> befindet sich direkt neben dem Ordner <code>Uebung3</code> (aus dem wir zun\u00e4chst heraus m\u00fcssen) und darin der Ordner <code>images</code> und darin das <code>fiw.jpg</code>. </li> </ul> <p>Geben Sie innerhalb Ihrer Webanwendung alle Pfade stets relativ und nie absolut an! Solche Pfade, wie z.B. <code>C:\\Documents\\xampp\\htdocs\\WT\\Uebung1\\uebung1.html</code> d\u00fcrfen keinesfalls verwendet werden, denn sobald Sie Ihre Anwendung auf einen anderen Server \u00fcberf\u00fchren, w\u00fcrden solche absoluten Pfade nicht mehr stimmen.</p>"},{"location":"html/#clean-code-html","title":"Clean Code HTML","text":"<p>Es ist noch nicht so lange her, da gab es zwei unterschiedliche Str\u00f6mungen in der Weiterentwicklung von HTML: einerseits sollte HTML als Standard weiterentwickelt werden und andererseits gab es Bestrebungen, HTML dichter an XML zu koppeln. So entstand zun\u00e4chst XHTML. Zum Gl\u00fcck wurden diese beiden Entwicklungen jedoch wieder zusammengef\u00fchrt. \u00dcbrig blieben Konventionen, die eingehalten werden sollten, damit HTML auch XHTML-konform ist. Wir wollen diese Konventionen unbedingt beachten:</p> <ul> <li>alle HTML-Dokumente beginnen mit <code>&lt;!DOCTYPE html&gt;</code></li> <li>die Elemente <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;title&gt;</code> und <code>&lt;body&gt;</code> sind Pflicht, </li> <li>alle Elemente m\u00fcssen korrekt verschachtelt sein (also innere Elemente erst schlie\u00dfen bevor das \u00e4u\u00dfere Element geschlossen wird),</li> <li>alle Elemente m\u00fcssen geschlossen werden (Stand-alone-Elemente sollten dann z.B. so geschrieben werden: <code>&lt;br/&gt;</code>),</li> <li>alle Elementnamen sollen vollst\u00e4ndig kleingeschrieben werden,</li> <li>jedes Attribut sollte einen Wert haben und die Werte sollten in Anf\u00fchrungsstrichen stehen.</li> </ul> <p>\u00dcbung</p> <p>Was ist hier jeweils falsch?</p> <ul> <li><code>&lt;b&gt;&lt;i&gt;Some text&lt;/b&gt;&lt;/i&gt;</code></li> <li><code>&lt;p&gt;This is a paragraph     &lt;p&gt;This is another paragraph</code></li> <li><code>A break: &lt;br&gt;     A horizontal rule: &lt;hr&gt;     An image: &lt;img src=\"happy.gif\" alt=\"Happy face\"&gt;</code></li> <li><code>&lt;P&gt;This is a paragraph&lt;/P&gt;</code></li> <li><code>&lt;input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked /&gt;     &lt;input type=\"text\" name=\"lastname\" disabled /&gt;</code></li> </ul> <p>Sie k\u00f6nnen Ihre HTML-Seite validieren lassen. Dazu gibt es Online-Validatoren, z.B. hier. </p>"},{"location":"html/#weitere-informationen-uber-html","title":"Weitere Informationen \u00fcber HTML","text":"<ul> <li>Folien HTML</li> <li>um das untenstehende Beispiel auszuf\u00fchren, ben\u00f6tigen Sie die Datei fiw.jpg, die Sie in einem <code>Logos</code>-Ordner ablegen sollten, um wenig \u00c4nderungsaufwand bei der folgenden HTML-Datei zu haben</li> </ul> alle Beispiele in einem <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;HTML Einf\u00fchrung&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h3&gt;Hyperlinks&lt;/h3&gt;\n&lt;a href=\"http://www.htw-berlin.de\" target=\"_blank\"&gt;HTW Berlin&lt;/a&gt;\n&lt;a href=\"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\"&gt;Studienordnung FIW&lt;/a&gt;\n&lt;a href=\"mailto:freiheit@htw-berlin.de\"&gt;E-Mail an J\u00f6rn Freiheit&lt;/a&gt;\n\n&lt;h3&gt;Bilder&lt;/h3&gt;\n&lt;img src=\"../Logos/fiw.jpg\" alt=\"FIW-Logo\"/&gt;\n\n&lt;h3&gt;Tabelle&lt;/h3&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Spalte 1&lt;/th&gt;\n            &lt;th&gt;Spalte 2&lt;/th&gt;\n            &lt;th&gt;Spalte 3&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td&gt;1_1&lt;/td&gt;\n        &lt;td&gt;1_2&lt;/td&gt;\n        &lt;td&gt;1_3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;2_1&lt;/td&gt;\n        &lt;td&gt;2_2&lt;/td&gt;\n        &lt;td&gt;2_3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;3_1&lt;/td&gt;\n        &lt;td&gt;3_2&lt;/td&gt;\n        &lt;td&gt;3_3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;h3&gt;Listen&lt;/h3&gt;\n&lt;ol&gt;\n    &lt;li&gt;eins&lt;/li&gt;\n    &lt;li&gt;zwei&lt;/li&gt;\n    &lt;li&gt;drei&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;eins&lt;/li&gt;\n    &lt;li&gt;zwei&lt;/li&gt;\n    &lt;li&gt;drei&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n    &lt;li&gt;\n        &lt;ol&gt;\n            &lt;li&gt;eins_eins&lt;/li&gt;\n            &lt;li&gt;eins_zwei&lt;/li&gt;\n            &lt;li&gt;eins_drei&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/li&gt;\n    &lt;li&gt;zwei&lt;/li&gt;\n    &lt;li&gt;\n        &lt;ul&gt;\n            &lt;li&gt;drei_eins&lt;/li&gt;\n            &lt;li&gt;drei_zwei&lt;/li&gt;\n            &lt;li&gt;drei_drei&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h3&gt;Eingabeelemente&lt;/h3&gt;\n&lt;input type=\"checkbox\" name=\"SG\" value=\"AI\"/&gt; AI&lt;br&gt;\n&lt;input type=\"checkbox\" name=\"SG\" value=\"FIW\" checked/&gt; FIW&lt;br&gt;\n\n&lt;input type=\"button\" value=\"Click\" /&gt;\n&lt;input type=\"reset\" /&gt;\n&lt;input type=\"submit\" /&gt;\n&lt;input type=\"checkbox\" /&gt;\n&lt;input type=\"color\" /&gt;\n&lt;input type=\"date\" /&gt;\n&lt;input type=\"file\" /&gt;\n&lt;input type=\"number\" /&gt;\n&lt;input type=\"radio\" /&gt;\n&lt;input type=\"image\" src=\"../Logos/fiw.jpg\" width=\"40\" alt=\"FIW-Logo\"/&gt;\n&lt;input type=\"range\" min=\"10\" max=\"100\"/&gt;\n&lt;input type=\"text\" placeholder=\"Name\"/&gt;\n&lt;input type=\"email\" placeholder=\"E-Mail\"/&gt;\n&lt;input type=\"password\" /&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/#http-vertiefung","title":"HTTP (Vertiefung)","text":"<p>HTTP steht f\u00fcr Hypertext Transfer Protocol. Es wurde von Tim Berners Lee zusammen mit HTML, dem ersten Webserver und dem ersten Browser Anfang der 1990er Jahre am CERN entwickelt. Die Idee von HTTP ist einfach: der Nutzer stellt unter Eingabe einer URL (die Adresse des Webservers) eine Anfrage (request) an den Webserver. Der Webserver antwortet darauf mit einer response. Diese enth\u00e4lt einige Metadaten und die angefragte Webseite (im HTML-Format), wenn die Anfrage ordnungsgem\u00e4\u00df beantwortet werden kann. </p>"},{"location":"html/#http-anfragemethoden","title":"HTTP-Anfragemethoden","text":"<p>F\u00fcr die Anfrage des Browsers an den Webserver stellt HTTP verschiedene Anfragemethoden zur Verf\u00fcgung. Diese unterscheiden sich in ihrer Bedeutung dahingehend, was mit der angefragten Ressource (den Daten oder der Webseite) geschehen soll. </p>  Anfragemethode   Erl\u00e4uterung  <code>GET</code>  ist die einfachste und meistverwendete Anfragemethode; dient dazu, eine Ressource (typischerweise eine HTML-Datei) vom Webserver anzufordern; z.B. `GET /index.html` fordert die `index.html` vom Webserver an.  <code>POST</code>  fordert ebenfalls eine Ressource vom Webserver an; der Unterschied zwischen <code>GET</code> und <code>POST</code> besteht beim Mitsenden von Daten, z.B. Suchanfragen oder Login-Daten. W\u00e4hrend beim <code>GET</code> die \u00fcbermittelten Daten in die URL geschrieben werden, werden diese bei einem <code>POST</code> in den HTTP-Header eingef\u00fcgt. Das hei\u00dft, dass beim `GET` die an den Webserver \u00fcbergebenen Daten sichtbar sind, beim <code>POST</code> nicht. F\u00fcr die \u00dcbertragung sensibler Daten sollte also <code>POST</code> verwendet werden.  <code>HEAD</code>  fragt nur den Response-Header ab, nicht die Daten selbst. So kann z.B. bei einem Download zun\u00e4chst die Gr\u00f6\u00dfe der Datei abgefragt werden, bevor man die Datei selbst (mit <code>GET</code> oder <code>POST</code>) herunterl\u00e4dt.  <p>Neben diesen \"HTTP-Standardmethoden\" gibt es noch spezielle Anfragemethoden, die beim einfachen Surfen keine Rolle spielen, f\u00fcr uns in der Webprogrammierung jedoch von Bedeutung sind. Wir werden diese im Zusammenhang mit dem Programmierparadigma <code>REST</code> (Representational State Transfer) verwenden. Sie unterscheiden sich dahingehend, wie mit den angeforderten Ressourcen umgegangen wird, also ob sie unver\u00e4ndert bleiben, angelegt oder ge\u00e4ndert werden.</p>  Anfragemethode   Erl\u00e4uterung  <code>GET</code>  l\u00e4sst die angefragte Ressource unver\u00e4ndert und ruft sie nur ab   <code>POST</code>  erstellt eine neue Ressource oder ver\u00e4ndert sie; wir werden <code>POST</code> zum Erstellen verwenden     <code>PUT</code>  sehr \u00e4hnlich zu <code>POST</code>, aber <code>POST</code> ist ein wenig genereller. Wird mit <code>PUT</code> eine neue Ressource angelegt, so wird der Name in der URL angegeben, w\u00e4hrend bei <code>POST</code> der Name durch den Server vergeben kann; wir werden <code>PUT</code> zum \u00c4ndern verwenden  <code>DELETE</code>  l\u00f6scht die angegebene Ressource vom Server    <p>Wichtig ist zu beachten, dass HTTP ein zustandsloses Protokoll ist. Das bedeutet, dass die Anfragen prinzipiell unabh\u00e4ngig voneinander sind und dass es keine Anfragehostorie gibt. Wird soetwas ben\u00f6tigt, wie z.B. beim Online-Einkauf, dann muss dies \u00fcber andere Mechanismen (z.B. Anmelden/Registrieren) realisiert werden. </p>"},{"location":"html/#http-statusmeldungen","title":"HTTP-Statusmeldungen","text":"<p>HTTP sieht verschiedene Meldungen des Servers an den Client vor. Diese werden im Response-Header versendet. Hier ein paar Beispiele:</p>  HTTP Statusmeldung   Erl\u00e4uterung  <code>200 OK</code>  Request wurde vollst\u00e4ndig und erfolgreich bearbeitet  <code>201 Created</code>  Request wurde bearbeitet und die neue Ressource wurde erstellt  <code>301 Moved Permanently</code>  die angeforderte Ressource wurde an eine andere URL bewegt  <code>400 Bad Request</code>  Der Request kann nicht bearbeitet werden, da er (syntaktische) Fehler enth\u00e4lt.  <code>401 Unauthorized</code>  Request ist ok, aber der Zugriff auf die Ressource ist nicht autorisiert  <code>404 Not Found</code>  die angegebene Ressource existiert nicht  <code>500 Internal Server Error</code>  der Webserver ist down bzw. hat einen Fehler"},{"location":"html/#urls","title":"URLs","text":"<p>URL steht f\u00fcr Uniform Resource Locator und ist eine Adresse, die auf eine Ressource auf einem Server zeigt sowie das Protokoll, mit dem auf diese Adresse zugegriffen wird. Der allgemeine Aufbau einer URL sieht so aus: </p> <pre><code>&lt;schema&gt;:&lt;ressourcen-adresse&gt;\n</code></pre> <p><code>&lt;schema&gt;</code> k\u00f6nnen verschiedene Protokolle sein, z.B. <code>http</code>, <code>https</code>, <code>ftp</code>, <code>mailto</code>, <code>news</code>, <code>file</code> usw. F\u00fcr die Zugriffe auf Webservern wierden  <code>http</code> bzw. <code>https</code> verwendet. </p> <p>Die <code>&lt;ressourcen-adresse&gt;</code> kann unterschiedlich komplex sein. Der allgemeine Fall f\u00fcr den Zugriff auf eine Ressource auf einem Webserver kann so aussehen:</p> <pre><code>//user:password@www.example.org:80/index.html?key1=value1&amp;key2=value2\n</code></pre> <p>Darin m\u00f6chte ein Nutzer <code>user</code> mit dem Passwort <code>password</code> auf den Server (host) <code>www.example.org</code> \u00fcber den Port <code>80</code> auf die Ressource <code>index.html</code> zugreifen (mit GET) und \u00fcbergibt dabei 2 Werte, n\u00e4mlich <code>value1</code> f\u00fcr den Schl\u00fcssel (die Variable) <code>key1</code> und <code>value2</code> f\u00fcr den Schl\u00fcssel <code>key2</code>. In den meisten F\u00e4llen wird weder <code>user</code> noch <code>password</code> angegeben, oft auch nicht der Port und viele Anfragen auch ohne angeh\u00e4ngte Schl\u00fcssel-Werte-Paare.</p> <p>Die URL darf bestimmte Zeichen nicht enthalten, z.B. Leerzeichen, Klammern usw. Diese werden maskiert, d.h. in sogenante Prozentdarstellung umgewandelt. Ein Leerzeichen wird in <code>%20</code> umgewandelt, ein Punkt in <code>%2E</code> usw. Daraus ergeben sich manchmal etwas \"kryptische\" URLs (siehe z.B. https://www.w3schools.com/tags/ref_urlencode.ASP ).</p>"},{"location":"html/#domain-name-service-dns","title":"Domain Name Service (DNS)","text":"<p>Prinzipiell sind die Rechner im Internet durch IP-Adressen adressiert. <code>IPv4</code>-Adressen bestehen aus vier Zahlenbl\u00f6cken (jeweils im Bereich von 0 bis 255), die durch einen Punkt getrennt sind. <code>IPv4</code>-Adressen werden in 32 Bit gespeichert. Es gibt somit theoretisch 2^32 = 4.294.967.296 verschiedene Adressen, d.h. gut 4 Mrd adressierbare Rechner im Internet. Da dies nicht ausreicht, wurde in Version 6 des IP-Protokolls eine neue Dressierbarkeit eingef\u00fchrt, in dem nun 128 Bit f\u00fcr die Speicherung einer Adresse zur Verf\u00fcgung stehen. Eine <code>IPv6</code>-Adresse besteht aus acht Bl\u00f6cken, welche durch Doppelpunkte getrennt sind. Jeder Block besteht aus 4 Hexadezimalstellen. </p> <p>Damit man sich zum Surfen im World Wide Web nicht IP-Adressen merken muss, wurden Webservern Namen zugeordnet. Somit muss man nicht die IP-Adressen in das Adressfeld als URL eingeben, sondern kann sprechende Namen verwenden, wie z.B. <code>htw-berlin.de</code>. <code>de</code>ist dabei eine sogenannte Top-Level-Domain und <code>htw-berlin</code>eine Subdomain. Den DNS kann man sich wie ein Telefonbuch vorstellen, in dem f\u00fcr eine sprechende Adresse die zuegh\u00f6rige IP-Adresse steht. Die Anfrage wird dann per TCP/IP an die IP-Adresse geschickt. </p> <p>Abfrage nach dem Root-DNS-Server f\u00fcr die Domain <code>htw-berlin.de</code>:</p> <pre><code>% dig htw-berlin.de @a.root-servers.net\n\n; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; htw-berlin.de @a.root-servers.net\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 38694\n;; flags: qr rd; QUERY: 1, ANSWER: 0, AUTHORITY: 6, ADDITIONAL: 13\n;; WARNING: recursion requested but not available\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;htw-berlin.de.     IN  A\n\n;; AUTHORITY SECTION:\nde.     172800  IN  NS  s.de.net.\nde.     172800  IN  NS  n.de.net.\nde.     172800  IN  NS  a.nic.de.\nde.     172800  IN  NS  f.nic.de.\nde.     172800  IN  NS  l.de.net.\nde.     172800  IN  NS  z.nic.de.\n\n;; ADDITIONAL SECTION:\ns.de.net.   172800  IN  A 195.243.137.26\ns.de.net.   172800  IN  AAAA  2003:8:14::53\nn.de.net.   172800  IN  A 194.146.107.6\nn.de.net.   172800  IN  AAAA  2001:67c:1011:1::53\na.nic.de.   172800  IN  A 194.0.0.53\na.nic.de.   172800  IN  AAAA  2001:678:2::53\nf.nic.de.   172800  IN  A 81.91.164.5\nf.nic.de.   172800  IN  AAAA  2a02:568:0:2::53\nl.de.net.   172800  IN  A 77.67.63.105\nl.de.net.   172800  IN  AAAA  2001:668:1f:11::105\nz.nic.de.   172800  IN  A 194.246.96.1\nz.nic.de.   172800  IN  AAAA  2a02:568:fe02::de\n\n;; Query time: 140 msec\n;; SERVER: 198.41.0.4#53(198.41.0.4)\n;; WHEN: Tue Sep 29 08:44:58 CEST 2020\n;; MSG SIZE  rcvd: 412\n</code></pre> <p>Die Domain <code>htw-berlin.de</code> wird von mehreren DNS verwaltet: <code>s.de.net</code>, <code>n.de.net</code>, <code>a.nic.de</code>, ... (siehe AUTHORITY SECTION). Beispielsweise leitet der Root-DNS-Server <code>a.nic.de</code> die Aufl\u00f6sung der Domain an die beiden DNS <code>infobloxv.htw-berlin.de</code> (IP-Adresse <code>141.45.65.100</code>) und <code>dns-2.dfn.de</code> weiter:</p> <pre><code>% dig htw-berlin.de @a.nic.de\n\n; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; htw-berlin.de @a.nic.de\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 1455\n;; flags: qr rd; QUERY: 1, ANSWER: 0, AUTHORITY: 2, ADDITIONAL: 2\n;; WARNING: recursion requested but not available\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;htw-berlin.de.     IN  A\n\n;; AUTHORITY SECTION:\nhtw-berlin.de.    86400 IN  NS  infobloxv.htw-berlin.de.\nhtw-berlin.de.    86400 IN  NS  dns-2.dfn.de.\n\n;; ADDITIONAL SECTION:\ninfobloxv.htw-berlin.de. 86400  IN  A 141.45.65.100\n\n;; Query time: 2 msec\n;; SERVER: 194.0.0.53#53(194.0.0.53)\n;; WHEN: Tue Sep 29 08:45:47 CEST 2020\n;; MSG SIZE  rcvd: 106\n</code></pre> <p>Die aktuelle IP-Adresse des Servers <code>htw-berlin.de</code> ist <code>141.45.66.214</code>:</p> <pre><code>% dig htw-berlin.de @dns-2.dfn.de\n\n; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; htw-berlin.de @dns-2.dfn.de\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 21529\n;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n;; WARNING: recursion requested but not available\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;htw-berlin.de.     IN  A\n\n;; ANSWER SECTION:\nhtw-berlin.de.    28800 IN  A 141.45.66.214\n\n;; Query time: 11 msec\n;; SERVER: 193.174.75.54#53(193.174.75.54)\n;; WHEN: Tue Sep 29 08:46:53 CEST 2020\n;; MSG SIZE  rcvd: 58\n</code></pre> <p>Die IP-Adresse der Domain (und die verantwortlichen DNS) h\u00e4tte man auch mit <code>nslookup</code> herausbekommen:</p> <pre><code>% nslookup -q=any htw-berlin.de\n\nServer:   141.45.2.100\nAddress:  141.45.2.100#53\n\nhtw-berlin.de\n  origin = infoblox1.htw-berlin.de\n  mail addr = net-rz.htw-berlin.de\n  serial = 2009121336\nrefresh = 10800\nretry = 3600\nexpire = 2419200\nminimum = 900\nName: htw-berlin.de\nAddress: 141.45.66.214\nhtw-berlin.de mail exchanger = 50 mail1.rz.htw-berlin.de.\nhtw-berlin.de text = \"ZOOM_verify_stchLGrGQgO-9ACdBPKPRw\"\nhtw-berlin.de text = \"v=spf1 ip4:141.45.10.64/26 ip4:141.45.70.64/26 ~all\"\nhtw-berlin.de nameserver = dns-2.dfn.de.\nhtw-berlin.de nameserver = infobloxv.htw-berlin.de.\n</code></pre>"},{"location":"javascript/","title":"JavaScript","text":"<p>JavaScript wurde 1995 von Brendan Eich entwickelt. Er arbeitete damals bei Netscape und entwickelte mit dem damals sogenannten LiveScript eine Skriptsprache f\u00fcr den damaligen Netscape-Browser. Ein damaliger Browser \"verstand\" HTML und CSS. HTML sah f\u00fcr Nutzerinteraktionen nur das Klicken auf Hyperlinks vor. Andere Nutzerinteraktionen waren nicht vorgesehen. Mithilfe von JavaScript wurde eine Schnittstelle geschaffen, um durch Nutzerinteraktionen den HTML-Code zu manipulieren, ohne dass ein weiteres Nachladen vom Webserver notwendig wurde. Mit der Einf\u00fchrung von JavaScript wurden die F\u00e4higkeiten von Browsern erweiteret, indem nun nicht mehr nur HTML und CSS interpretiert wurde, sondern auch JavaScript - alles Client-seitig, also durch den Browser selbst. </p> <p>JavaScript ist eine sogenannte Skriptsprache, d.h. der Quellcode wird nicht compiliert und dann der \u00fcbersetzte Byte- oder Maschinencode ausgef\u00fchrt, sondern der Quellcode wird durch einen Interpreter interpretiert. Allerdings wird f\u00fcr Optimierungen JavaScript - insbesondere serverseitig in Node.js - durch sogenannte Engines doch in Maschinencode \u00fcbersetzt, welcher ausgef\u00fchrt wird. Die bekannteste dieser Engines ist die Google-Engine V8. Die Technologie der Compilierung wird als Just-in-time-Kompilierung (JIT) bezeichnet. </p> <p>JavaScript kennt (im Gegensatz zu TypeScript) keine Klassen. Das Objektmodell von JavaScript basiert auf Prototypen. Eigenschaften und Methoden k\u00f6nnen zur Laufzeit den Objekten hinzugef\u00fcgt werden. Neben diesem dynamischen Objektmodell ist auch die Typisierung in JavaScript dynamisch. Der Typ einer Variable h\u00e4ngt vom Wert ab. Mit dem Wert kann sich auch der Typ der Variable \u00e4ndern. </p> <p>Client-seitig haben HTML, CSS und JavaScript folgende Bedeutung (und wir sollten auch auf eine solche strikte Trennung achten):</p> <ul> <li>HTML f\u00fcr die Inhalte,</li> <li>CSS f\u00fcr das Layout, </li> <li>JavaScript f\u00fcr das interaktive Verhalten</li> </ul> <p>unserer Webseite.</p>"},{"location":"javascript/#javascript-in-unseren-webseiten","title":"JavaScript in unseren Webseiten","text":"<p>Zun\u00e4chst \u00fcberlegen wir uns, wie wir das auch schon f\u00fcr CSS getan hatten, wo wir den JavaScript-Code in unseren Webseiten einf\u00fcgen k\u00f6nnen. Prinzipiell wird JavaScript-Code in einem HTML-Dokument innerhalb eines <code>&lt;script&gt;&lt;/script&gt;</code>-Elementes eingef\u00fcgt. Im Gegensatz zu CSS (wo wir die Definitionen innerhalb des <code>&lt;style&gt;&lt;/style&gt;</code>-Elementes angegeben haben, welches immer im <code>&lt;head&gt;</code> positioniert wird), ist es egal, ob das <code>&lt;script&gt;</code>-Element im <code>&lt;head&gt;</code>oder <code>&lt;body&gt;</code> angelegt wird. Sie k\u00f6nnen innerhalb eines HTML-Dokumentes auch mehrere <code>&lt;script&gt;</code>-Elemente haben und Sie k\u00f6nnen dann auch sowohl im <code>&lt;head&gt;</code> als auch im <code>&lt;body&gt;</code> positioniert sein. Wie bei CSS, ist es auch f\u00fcr JavaScript \u00fcblich, den Code in externe (.<code>js</code>)-Dateien auszulagern und diese dann in das HTML-Dokument einzubinden. Dies geschieht aber nicht \u00fcber ein <code>&lt;link&gt;</code>-Element, sondern ebenfalls \u00fcber das <code>&lt;script&gt;</code>-Element. Das folgende Beispiel zeigt die Verwendung des <code>&lt;script&gt;</code>-Eelementes zum Einbinden von JavaScript:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;DOM&lt;/title&gt;\n    &lt;script&gt;\nfunction myFunction1() {\ndocument.getElementById(\"demo1\").innerHTML = \"Hallo FIW!\";\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"myScript.js\"&gt;&lt;/script&gt;\n    &lt;h1&gt;\u00dcberschrift&lt;/h1&gt;\n    &lt;button type=\"button\" onclick=\"myFunction1()\"&gt;Klick mich&lt;/button&gt;\n    &lt;div id=\"demo1\"&gt;&lt;/div&gt;\n    &lt;input id=\"input1\" type=\"text\" placeholder=\"Gibt etwas ein\" onkeyup=\"myFunction2()\"/&gt;\n    &lt;div id=\"demo2\"&gt;&lt;/div&gt;\n    &lt;script&gt;\nfunction myFunction2() {\ndocument.getElementById(\"demo2\").innerHTML = document.getElementById(\"input1\").value;\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ein gutes Vorgehen ist es, JavaScript am Ende des <code>&lt;body&gt;</code>-Elementes einzubinden, damit die Seite zun\u00e4chst dargestellt wird und erst dann der JavaScript-Code geladen wird. Das laden des JavaScript-Codes w\u00fcrde ansonsten die Darstellung der Webseite verz\u00f6gern. </p>"},{"location":"javascript/#document-object-model-dom","title":"Document Object Model (DOM)","text":"<p>Wir betrachten JavaScript zun\u00e4chst nur aus client-seitiger Sicht, d.h. f\u00fcr die Verwendung im Browser. Der Browser stellt HTML dar, welches durch CSS in ein ansprechendes Layout gestzt wurde. Es stellt sich die Frage, inwieweit JavaScript \u00fcberhaupt noch eine Erweiterung dieses Konzeptes darstellen kann. Die Antwort liegt darin, dass ohne JavaScript eine Webseite im Browser v\u00f6llig statisch ist, d.h. es gibt nur eine M\u00f6glichkeit, neue Inhalte zu laden oder \u00fcberhaupt etwas an der Webseite zu \u00e4ndern und das ist, diese neuen Inhalte oder \u00c4nderungen von einem Webserver zu laden. Jede Nutzerinteraktion f\u00fchrt so immer zu einem Request-Response-Prozess mit einem Webserver. Das wird durch JavaScript ge\u00e4ndert. Auf Nutzerinteraktionen kann durch JavaScript lokal, d.h. auf dem Client bleibend, reagiert werden. Die Schnittstelle zwischen JavaScript und HTML/CSS ist das sogenannte Document Objekct Model (DOM). Das DOM stellt ein Interface (eine Schnittstelle) dar, um HTML-Dokumente \"manipulieren\" zu k\u00f6nnen. Damit ist haupts\u00e4chlich gemeint, dass HTML-Elemente eines HTML-Dokumentes </p> <ul> <li>ge\u00e4ndert, </li> <li>hinzugef\u00fcgt und </li> <li>gel\u00f6scht </li> </ul> <p>werden k\u00f6nnen. Zum \u00c4ndern der HTML-Elemente z\u00e4hlen </p> <ul> <li>das \u00c4ndern des Inhalts der Elemente und </li> <li>das \u00c4ndern von Attributen und deren Werten. </li> </ul> <p>Die Idee ist, dass ein HTML-Dokument als ein Baum aufgefasst wird, dessen hierarchische Beziehungen durch das HTML-Dokument (und dessen hierarchischer Struktur) vorgegeben werden und in dem alle HTML-Elemente, alle Attribute und alle Inhalte als Objekte angesehen werden. </p> <p>Wir schauen uns dazu ein einfaches Beispiel an:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;DOM&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;\u00dcberschrift&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;li&gt;\n                &lt;a href=\"http://www.htw-berlin.de\"&gt;HTW Berlin&lt;/a&gt;\n                &lt;a href=\"http://fiw.htw-berlin.de\"&gt;FIW&lt;/a&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ein HTML-Dokument besteht aus HTML-Elementen, welche Attribute haben k\u00f6nnen und Inhalte. Im obigen Beispiel hat z.B. das <code>&lt;meta&gt;</code>-Element im <code>&lt;head&gt;</code> ein Attribut, n\u00e4mlich <code>charset</code>. Der Wert dieses Attributes ist ein Text, n\u00e4mlich <code>UTF-8</code>. Der Inhalt eines <code>&lt;a&gt;</code>-Elementes ist auch ein Text. Im obigen Beispiel haben wir zwei <code>&lt;a&gt;</code>-Elemente. Das eine hat den Inhalt (Text) <code>HTW Berlin</code> und das andere <code>FIW</code>. Wir k\u00f6nnen somit zwischen drei Arten von \"Objekten\" in einem HTML-Dokument unterscheiden:</p> <ul> <li>Elemente</li> <li>Attribute</li> <li>Texte</li> </ul> <p>Wenn wir diese Artefakte tats\u00e4chlich als Objekte auffassen und au\u00dferdem die hierarchische Beziehung zwischen diesen Objekten ber\u00fccksichtigen, dann l\u00e4sst sich ein Baum aufspannen, der aus solchen Objekten besteht. F\u00fcr obiges Beispiel sieht der Baum dann so aus: </p> <p></p> <p>Wir interpretieren die Objekte also als Knoten (Node) eines Baumes. Einen solchen Baum, der ein HTML-Dokument eindeutig repr\u00e4sentiert, nennen wir Document Object Model (DOM) (auch HTML-DOM). Ein solcher DOM ist der Ausgangspunkt f\u00fcr die Manipulation des HTML-Dokumentes, denn JavaScript ist in der Lage, jeden beliebigen Knoten innerhalb dieses Baumes anzusprechen und bspw. zu \u00e4ndern oder zu l\u00f6schen. Au\u00dferdem kann auch jede beliebige Position eindeutig bestimmt werden, um z.B. ein Element hinzuzuf\u00fcgen. Wir schauen uns im Folgenden an, welche Funktionen JavaScript zur Verf\u00fcgung stehen, um Positionen in diesem Baum eindeutig zu lokalisieren. </p>"},{"location":"javascript/#dom-funktionen-lokalisation-von-elementen","title":"DOM-Funktionen (Lokalisation von Elementen)","text":"<p>Ausgangspunkt (die Wurzel) eines jeden HTML-DOM ist <code>document</code> (siehe obige Abbildung). Von <code>document</code> aus k\u00f6nnen wir uns beliebig durch den Baum bewegen. Die wohl meist verwendete Funktion zur Lokalisation eines Elementes im DOM ist <code>getElementById()</code>. In unserem obigen Beispiel haben wir nur ein Element mit einer <code>id</code> (einem <code>id</code>-Attribut) und das ist <code>&lt;ul&gt;</code>. Wir k\u00f6nnten gezielt nach diesem Element fragen:</p> <pre><code>document.getElementById('ul1')\n</code></pre> <p>und erhalten als R\u00fcckgabe das Element mit der <code>id=\"ul1\"</code>, also das <code>&lt;ul&gt;</code>-Element (welches wir z.B. in einer Variable speichern k\u00f6nnten). Weitere Funktionen zur Lokalisation von Elementen sind </p> <pre><code>document.getElementsByTagName(name)\ndocument.getElementsByClassName(name)\n</code></pre> <p>Beide Funktionen liefern uns jeweils ein Array von Elementen zur\u00fcck. Die Funktion <code>document.getElementsByTagName(name)</code> gibt ein Array von Elementen aus dem <code>document</code> zur\u00fcck, die den Tag name haben, also z.B. alle <code>&lt;p&gt;</code>-Elemente, wenn <code>document.getElementsByTagName('p')</code> aufgerufen wird. Die Funktion <code>document.getElementsByClassName(name)</code> gibt ein Array von Elementen aus dem <code>document</code> zur\u00fcck, die der Klasse name zugeordnet sind, also z.B. alle Elemente mit der Klasse <code>form-group</code>, wenn <code>document.getElementsByClassName('form-group')</code> aufgerufen wird. Mit diesen Funktionen kann man Elemente mitten im DOM lokalisieren. Daneben gibt es noch weitere Funktionen, die jeweils von einem solchen Element ausgehend \"benachbarte\" Knoten lokalisieren. Betrachten wir z.B. diesen Ausschnitt aus einem HTML-Code:</p> <pre><code>    &lt;main id=\"main\"&gt;\n        &lt;h3 id=\"headline\"&gt;DOM&lt;/h3&gt;\n        &lt;img id=\"ball1\" src=\"ball.png\" /&gt;\n        &lt;img id=\"ball2\" src=\"ball.png\" /&gt;\n        &lt;img id=\"ball3\" src=\"ball.png\" /&gt;\n        &lt;img id=\"ball4\" src=\"ball.png\" /&gt;\n    &lt;/main&gt;\n</code></pre> <p>Der dazugeh\u00f6rige DOM (vereinfacht) ist in der folgenden Abbildung dargestellt sowie die Funktionen, mit denen die umgebenden Elemente lokalisiert werden k\u00f6nnen:</p> <p></p> <p>F\u00fcr die Funktionen <code>getElementById()</code> und <code>getElementsByTagName()</code> betrachten wir ein erstes einfaches Beispiel:</p> <p>In dem obigen JSFiddle k\u00f6nnen Sie die Wirkungsweise ausprobieren. Wir zeigen hier aber nochmal den vollst\u00e4ndigen Code, damit Sie ihn sich kopieren und wir ihn besser erl\u00e4utern k\u00f6nnen:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;DOM&lt;/title&gt;\n    &lt;style&gt;\n* {\npadding: 5px;\nmargin: 5px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 onmouseover=\"changeColor()\"&gt;\u00dcberschrift&lt;/h1&gt;\n    &lt;button type=\"button\" onclick=\"myFunction1()\"&gt;Klick mich&lt;/button&gt;\n    &lt;div id=\"demo1\"&gt;&lt;/div&gt;\n    &lt;input id=\"input1\" type=\"text\" placeholder=\"Gibt etwas ein\" onkeyup=\"myFunction2()\"/&gt;\n    &lt;div id=\"demo2\"&gt;&lt;/div&gt;\n    &lt;script&gt;\nfunction myFunction1() {\ndocument.getElementById(\"demo1\").innerHTML = \"Hallo FIW!\";\n}\n\nfunction myFunction2() {\ndocument.getElementById(\"demo2\").innerHTML = document.getElementById(\"input1\").value;\n}\n\nfunction changeColor() {\nvar h1arr = document.getElementsByTagName('h1');\nh1arr[0].style.color = \"red\";\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Den <code>&lt;head&gt;</code> k\u00f6nnen wir ignorieren, auch das <code>&lt;style&gt;</code>-Element darin. Wichtig sind:</p> <ul> <li>wir haben 2 leere <code>&lt;div&gt;</code>-Elemente mit den Ids <code>id=\"demo1\"</code> und <code>id=\"demo2\"</code> (Zeilen <code>16</code> und <code>18</code>)</li> <li>wir haben einen <code>&lt;button&gt;</code> mit dem Attribut <code>onclick</code>. Dieses Attribut bindet einen Ereignis-Listener an den Button. Wird das <code>Click</code>-Ereignis ausgel\u00f6st, wird die JavaScript-Funktion <code>myFunction1()</code> aufgerufen (Zeile <code>15</code>)</li> <li>die JavaScript-Funktion <code>myFunction1()</code> ist im <code>&lt;script&gt;</code>-Element definiert (Zeilen <code>20-22</code>). Diese Funktion lokalisiert das Element mit der <code>id</code> <code>\"demo1\"</code> und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich <code>\"Hallo FIW!\"</code> </li> <li>wir haben au\u00dferdem ein einzeiliges Eingabefeld mit der Id <code>id=\"input1\"</code> (Zeile <code>17</code>). Diesem Eingabefeld ist au\u00dferdem das Attribut <code>onkeyup</code> zugeordnet. Dieses Attribut meldet sich bei einem Ereignis an, das ausgel\u00f6st wird, wenn innerhalb des Eingabefeldes eine Taste wieder losgelassen wird - es wird dann das <code>KeyUp</code>-Ereignis ausgel\u00f6st. Durch das Ausl\u00f6sen dieses Ereignisses wird die JavaScript-Funktion <code>myFunction2()</code> aufgerufen. </li> <li>die JavaScript-Funktion <code>myFunction2()</code> ist im <code>&lt;script&gt;</code>-Element definiert (Zeilen <code>20-22</code>). Diese Funktion lokalisiert das Element mit der <code>id</code> <code>\"demo2\"</code> und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich den Wert (<code>value</code>), der in das Eingabefeld mit der <code>id=\"input1\"</code> eingegeben wurde (Zeilen <code>24-26</code>) </li> <li>der \u00dcberschrift <code>&lt;h1&gt;</code> (Zeile <code>14</code>) wurde das Attribut <code>onmouseover</code> zugeordnet. Damit wird das <code>MouseOver</code>-Ereignis abgefragt. Wird die Maus \u00fcber die \u00dcberschrift bewegt, wird dieses Ereignis ausgel\u00f6st und die Funktion <code>changeColor()</code> aufgerufen</li> <li>diese Funktion lokalisiert zun\u00e4chst alle Elemente mit dem Tag <code>h1</code> und speichert sie in das Array <code>h1arr</code> (Zeile <code>29</code>). Unsere \u00dcberschrift ist die erste (und einzige) \u00dcberschrift <code>&lt;h1&gt;</code> im Dokument. Wir greifen deshalb mit dem Index <code>0</code> auf dieses Element im <code>h1arr</code>-Array zu und \u00e4ndern die Schriftfarbe auf <code>\"red\"</code> (Zeile <code>30</code>)</li> </ul> <p>Dieses erste Beispiel zeigt mehrere interssante Punkte:</p> <ul> <li>neben den Funktionen zur Lokalisation von Elemeneten gibt es auch </li> <li>Ereignisse, an die man sich anmelden und auf die reagiert werden kann und</li> <li>es gibt Funktionen, die den Inhalt und den Style von Elementen \u00e4ndern</li> </ul> <p>Wir schauen uns zun\u00e4chst Ereignisse an, auf die reagiert werden kann.</p>"},{"location":"javascript/#html-ereignisse","title":"HTML-Ereignisse","text":"<p>HTML-Ereignisse \"passieren\" f\u00fcr HTML-Elemente in den allermeisten F\u00e4llen durch Nutzerinteraktionen (Maustaste dr\u00fccken, Fenster vergr\u00f6\u00dfern, Tatstatureingabe etc.). Mit JavaScript k\u00f6nnen wir auf diese Ereignisse reagieren. Eine einfache Form, ein HTML-Element an ein solches Ereignis anzumelden (so dass darauf reagiert werden kann), ist \u00fcber Attribute. Angenommen ein solches Ereignis hei\u00dft Event, dann hei\u00dft das Attribut onEvent (es kann auch alles klein geschrieben werden). Die generelle Syntax ist wie folgt:</p> <pre><code>&lt;element onEvent=\"JavaScript-Code\" /&gt;\n</code></pre> <p>Der JavaScript-Code muss nicht zwingend der Aufruf einer JavaScript-Funktion, sondern kann auch eine direkte JavaScript-Anweisung sein. </p> <p>Hier eine Liste der \u00fcblichsten HTML-Ereignisse. Die Bedeutung ist aus den Namen selbsterkl\u00e4rend, deshalb werden die meisten Ereignisse hier nicht weiter beschrieben:</p> <ul> <li>Mausereignisse (MouseEvent): <code>mousedown</code>, <code>mouseup</code>, <code>click</code>, <code>dblclick</code>, <code>mousemove</code>, <code>mouseover</code>, <code>mousewheel</code>, <code>mouseout</code>, <code>contextmenu</code></li> <li>Tastaturereignisse (KeyboardEvent): <code>keydown</code>, <code>keypress</code>, <code>keyup</code></li> <li>Formularereignisse: <code>focus</code>, <code>blur</code>, <code>change</code>, <code>input</code>, <code>submit</code></li> <li>Fensterereignisse: <code>scroll</code>, <code>resize</code>, <code>hashchange</code>, <code>load</code>, <code>unload</code></li> </ul> <p>Wir zeigen einige Beispiele:</p> <p>In diesem Beispiel werden die Ereignisse <code>focus</code>, <code>blur</code> und <code>input</code> behandelt. Um das <code>blur</code>-Ereignis auszul\u00f6sen, muss das <code>&lt;input&gt;</code>-Element den Focus verlieren. </p> <p>In diesem Beispiel wird das <code>change</code>-Ereignis behandelt. Der Inhalt des Absatzes <code>&lt;p&gt;</code> mit der <code>id=\"radio\"</code> wird bei jedem <code>change</code>-Event erweitert. Es wird also nicht <code>innerHTML</code> v\u00f6llig neu gesetzt, sondern mithilfe von <code>+=</code> wird der entsprechende String angeh\u00e4ngt. Das soll insbesondere zeigen, dass das <code>change</code>-Ereignisses wirklich nur ausgel\u00f6st wird, wenn der Wert wechselt. Beachten Sie auch, dass <code>getElementsByName()</code> verwendet wird. Den Radiobuttons wurde jeweils <code>name=\"colors\"</code> zugewiesen. Sie bilden damit auch eine Radiobutton-Group (es kann immer nur ein Radiobutton daraus ausgew\u00e4hlt werden).</p> <p>In diesem Beispiel werden das <code>mouseover</code>- und das <code>mouseout</code>-Event behandelt. Beachten Sie auch die \u00dcbergabe von <code>this</code> an die JavaScript-Funktionen. Damit wird das <code>&lt;div&gt;</code>-Element \u00fcbergeben. Wir m\u00fcssen es innerhalb der Funktionen deshalb nicht mehr explizit mit <code>getElementById()</code> oder \u00e4hnliches holen. </p> <p>In diesem Beispiel wird JavaScript nicht als Funktion, sondern direkt in den Ereignis-Attributen aufgerufen. </p> <p>Noch ein einfaches Beispiel mit den Ereignissen <code>mousedown</code>, <code>mouseup</code>, <code>mouseenter</code> und <code>mouseleave</code>. </p> <p>Noch ein letztes Beispiel, das wir nicht in JSFiddle zeigen, da es daraum geht, die Gr\u00f6\u00dfe des Browsers zu \u00e4ndern (Ereignis <code>resize</code> - die JavaScript-Funktion hei\u00dft auch <code>resize()</code>, aber dieser Name ist frei gew\u00e4hlt):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Arrays&lt;/title&gt;\n&lt;/head&gt;\n&lt;body onresize=\"resize()\"&gt;\n&lt;h2&gt;Gr\u00f6\u00dfe des Browserfensters \u00e4ndern!&lt;/h2&gt;\n&lt;p id=\"demo\"&gt;&lt;/p&gt;\n&lt;script&gt;\nfunction resize() {\nvar w = window.outerWidth;\nvar h = window.outerHeight;\nvar txt = \"Fenstergr\u00f6\u00dfe: Breite=\" + w + \", H\u00f6he=\" + h;\ndocument.getElementById(\"demo\").innerHTML = txt;\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Wir haben uns nun einige Beispiele angesehen, wie wir HTML-Elemente \u00e4ndern k\u00f6nnen. Prinzipiell geht es mit den Eigenschaften:</p> <ul> <li><code>node.innerHTML =</code>            - Inhalt eines Elements \u00e4ndern</li> <li><code>node.attribute =</code>            - Attribut eines Elements \u00e4ndern</li> <li><code>node.style.</code>property<code>=</code>   - Style/Formatierung \u00e4ndern</li> <li><code>node.classList.add()</code>        - CSS-Klassen zum Element hinzuf\u00fcgen</li> <li><code>node.classList.remove()</code>     - CSS-Klassen vom Element entfernen</li> </ul>"},{"location":"javascript/#auslesen-der-werte-in-formularen","title":"Auslesen der Werte in Formularen","text":"<p>Wir zeigen noch ein einfaches Beispiel, in dem das Auslesen von Werten in Formularen gezeigt wird. In Formularen (<code>&lt;form&gt;</code>) gibt es die Besonderheit, dass das Absenden eines Formulares (<code>submit</code>) ein Neuladen der Seite zur Folge hat. Das liegt daran, dass die Formularwerte an den Webserver gesendet werden und der Browser die aktuelle Adresse neu l\u00e4dt (teilweise mit den eingegeben Werten in der URL, manchmal wird auch nur ein <code>?</code> an die URL angeh\u00e4ngt - das diskutieren wir sp\u00e4ter nochmal genauer). Dieses <code>default</code>-Verhalten wollen wir zun\u00e4chst verhindern. Wir zeigen im Folgenden, wie das geht.</p> <p>Angenommen, wir haben folgenden HTML-Code (unter Verwendung von Bootstrap):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n        integrity=\"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;\u00dcbung 4&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Teilnehmerin Registrierung&lt;/h1&gt;\n    &lt;form class=\"row g-3\"&gt;\n\n        &lt;div class=\"col-md-6\"&gt;  \n            &lt;input type=\"text\" class=\"form-control\" id=\"firstname\"\n                placeholder=\"First name\" required&gt;\n            &lt;div id=\"firstnameFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte Vornamen eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" id=\"lastname\" placeholder=\"Last name\" required&gt;\n            &lt;div id=\"lastnameFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte Nachnamen eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"E-Mail\" required&gt;\n            &lt;div id=\"emailFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte E-Mail eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" id=\"ipaddress\" placeholder=\"IP-Address\" required&gt;\n            &lt;div id=\"ipaddressFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte IP-Adresse eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"col-3\"&gt;\n            &lt;button class=\"btn btn-secondary\" type=\"reset\" onclick=\"reset()\"&gt;Abbrechen&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-3\"&gt;\n            &lt;button class=\"btn btn-success\" onclick=\"register()\" type=\"submit\"&gt;Registrieren&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Es entsteht folgende Ansicht:</p> <p></p> <p>Wenn Sie die Breite des Viewports (Browsers) weiter verringern, erscheinen alle Eingabefelder untereinander (<code>md</code>-Option der <code>col</code>-Klassen).</p> <p>Die <code>register()</code>-Funktion k\u00f6nnte nun wie folgt aussehen:</p> <pre><code>&lt;script&gt;\nfunction register() {\n\nlet fname = document.querySelector('#firstname').value;\nlet lname = document.querySelector('#lastname').value;\nlet email = document.querySelector('#email').value;\nlet ipadr = document.querySelector('#ipaddress').value;\n\nconsole.log(fname);\nconsole.log(lname);\nconsole.log(email);\nconsole.log(ipadr);\n\n}\n&lt;/script&gt;\n</code></pre> <p>Wir greifen also mithilfe von <code>querySelector()</code> auf die Input-Elemente zu (h\u00e4tten wir auch mit <code>getElementById()</code> machen k\u00f6nnen), um den jeweiligen <code>value</code> auszulesen. Wir geben diesen Wert hier zun\u00e4chst jeweils nur auf die Konsole aus. Diese Ausgaben sehen wir aber gar nicht, weil die Konsole durch das Neuladen der Seite wieder gel\u00f6scht wird. Dieses Neuladen ensteht durch das Standardverhalten beim <code>Submit</code> eines Formulars (siehe oben). Wir wollen zun\u00e4chst nochmal zeigen, dass durch das <code>Click</code>-Ereignis des Buttons auch das <code>Submit</code>-Ereignis des Formulars ausgel\u00f6st wird, da es sich bei dem Button <code>Registrieren</code> um einen <code>submit</code>-Button des Formulars handelt. Dazu f\u00fchren wir folgende \u00c4nderungen um HTML-Code durch:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n        integrity=\"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;\u00dcbung 4&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Teilnehmerin Registrierung&lt;/h1&gt;\n&lt;form class=\"row g-3\" onsubmit=\"alert('submit form')\"&gt;\n&lt;div class=\"col-md-6\"&gt;  \n            &lt;input type=\"text\" class=\"form-control\" id=\"firstname\"\n                placeholder=\"First name\" required&gt;\n            &lt;div id=\"firstnameFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte Vornamen eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" id=\"lastname\" placeholder=\"Last name\" required&gt;\n            &lt;div id=\"lastnameFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte Nachnamen eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"E-Mail\" required&gt;\n            &lt;div id=\"emailFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte E-Mail eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" id=\"ipaddress\" placeholder=\"IP-Address\" required&gt;\n            &lt;div id=\"ipaddressFeedback\" class=\"invalid-feedback\"&gt;\n                Bitte IP-Adresse eingeben!\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"col-3\"&gt;\n            &lt;button class=\"btn btn-secondary\" type=\"reset\" onclick=\"reset()\"&gt;Abbrechen&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-3\"&gt;\n&lt;button class=\"btn btn-success\" onclick=\"alert('click button')\" type=\"submit\"&gt;Registrieren&lt;/button&gt;\n&lt;/div&gt;\n    &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Wir reagieren also auf das <code>Click</code>-Ereignis mit einem <code>alert()</code> und ebenso auf das <code>Submit</code>-Ereignis des Formulars. Wenn wir nun den <code>Registrieren</code>-Button klicken, dann erscheint zun\u00e4chst die Nachricht <code>click button</code> und wenn wir dieses Nachrichtenfenster schlie\u00dfen auch gleich die Nachricht <code>submit form</code>. Es werden also beide Ereignisse ausgel\u00f6st, wovon das <code>Submit</code>-Ereignis das neuladen der Seite nach sich zieht. </p> <p>Wenn Sie nun f\u00fcr den Button wieder <code>onclick=\"register()\"</code> vereinbaren, dann sehen Sie, dass die Werte auf die Konsole ausgegeben werden und das <code>alert</code>-Fenster f\u00fcr das Formular erscheint. Nachdem Sie das Fenster schlie\u00dfen, wird die Seite neu geladen und die Konsole wird gel\u00f6scht. Wir verhindern dieses neuladen, indem wir f\u00fcr das Formular <code>onsubmit=\"return false;\"</code> definieren. Dann wird das Neuladen der Seite verhindert. </p> <pre><code>&lt;script&gt;\nfunction register() {\n\nlet fname = document.querySelector('#firstname').value;\nlet lname = document.querySelector('#lastname').value;\nlet email = document.querySelector('#email').value;\nlet ipadr = document.querySelector('#ipaddress').value;\n\nconsole.log(fname);\nconsole.log(lname);\nconsole.log(email);\nconsole.log(ipadr);\n\n}\n&lt;/script&gt;\n</code></pre> <p>Eine andere M\u00f6glichkeit w\u00e4re gewesen, der <code>register()</code>-Funktion das ausl\u00f6sende <code>Event</code> als Objekt zu \u00fcbergeben (wird dann automatisch \u00fcbergeben) und f\u00fcr dieses <code>Event</code> die <code>preventDefault()</code>-Funktion aufzurufen:</p> <pre><code>&lt;button class=\"btn btn-success\" type=\"submit\" onclick=\"register(event)\"&gt;Registrieren&lt;/button&gt;\n</code></pre> <pre><code>    function register(event) {\nlet fname = document.querySelector('#firstname').value;\nlet lname = document.querySelector('#lastname').value;\nlet email = document.querySelector('#email').value;\nlet ipadr = document.querySelector('#ipaddress').value;\n\nconsole.log(fname);\nconsole.log(lname);\nconsole.log(email);\nconsole.log(ipadr);\n\nevent.preventDefault();\n}\n</code></pre> <p>Zur Funktion <code>preventDefault()</code> siehe hier.</p>"},{"location":"javascript/#elemente-hinzufugen-und-loschen","title":"Elemente hinzuf\u00fcgen und l\u00f6schen","text":"<p>Nun wollen wir den DOM insofern manipulieren, als dass wir zun\u00e4chst Objekte hinzuf\u00fcgen. Die wichtigsten Funktionen daf\u00fcr sind:</p> <ul> <li><code>document.createElement('tag')</code>    - Element erzeugen</li> <li><code>document.createTextNode(\"text\")</code>  - Textelement erzeugen</li> <li><code>node.appendChild(childNode)</code>      - Element <code>childNode</code> dem Knoten <code>node</code> als direktes (letztes) Kind hinzuf\u00fcgen</li> <li><code>node.removeChild(childNode)</code>      - Kind <code>childNode</code> des Elementes <code>node</code> l\u00f6schen</li> <li><code>node.replaceChild(newNode, oldNode)</code>   - Kind <code>oldNode</code> des Knotens <code>node</code> durch <code>newNode</code> ersetzen</li> <li><code>node.insertBefore(newNode, oldNode)</code>   - Kind <code>newNode</code> des Knotens <code>node</code> vor das Kind <code>oldNode</code> des Knotens <code>node</code> einf\u00fcgen</li> </ul>"},{"location":"javascript/#create","title":"Create","text":"<p>Wir betrachten wieder ein einfaches Beispiel:</p> <p>Im HTML-Code sehen wir ein <code>&lt;input&gt;</code>-Element und eine Liste <code>&lt;ul&gt;</code>, die bereits 2 Listitems <code>&lt;li&gt;</code> enth\u00e4lt. Dem <code>&lt;input&gt;</code>-Element wurde ein <code>change</code>-Listener hinzugef\u00fcgt. Sobald sich der Wert in dem <code>&lt;input&gt;</code>-Element ge\u00e4ndert hat, wird dieses Ereignis ausgel\u00f6st und die Funktion <code>addItem()</code> aufgerufen. Dieser Funktion wird das <code>&lt;input&gt;</code>-Element als Parameter \u00fcbergeben. In dieser Funktion wird zuerst ein Textknoten erzeugt (<code>let textNode = document.createTextNode(text);</code>) Der <code>text</code> ist der Wert <code>value</code> des <code>&lt;input&gt;</code>-Elementes. Au\u00dferdem wird ein <code>&lt;li&gt;</code>-Knoten (Objekt) erzeugt (<code>let liNode = document.createElement('li');</code>). An diesen <code>&lt;li&gt;</code>-Knoten wird der Textknoten angeh\u00e4ngt (<code>liNode.appendChild(textNode);</code>). Danach wird an die <code>&lt;ul&gt;</code>-Liste der <code>&lt;li&gt;</code>-Knoten (mit dem Textknoten) angeh\u00e4ngt (<code>ulNode.appendChild(liNode);</code>). Das neue List-item erscheint sofort als letztes Kind in der Liste. </p> <p>Im folgenden Beispiel passiert das gleiche, nur wird das neu erzeugte List-Item nicht hinten an die Liste angeh\u00e4ngt, sondern vorne eingef\u00fcgt:</p> <p>Tats\u00e4chlich \u00e4ndert sich daf\u00fcr nur die letzte Anweisung in der Funktion. Aus <code>ulNode.appendChild(liNode);</code> wird <code>ulNode.insertBefore(liNode, ulNode.childNodes[0]);</code>. Mit <code>ulNode.childNodes[0]</code> greifen wir auf das erste Kind des <code>ulNode</code> zu. Das h\u00e4tten wir auch durch <code>ulNode.firstChild</code> haben k\u00f6nnen. </p>"},{"location":"javascript/#clone","title":"Clone","text":"<p>Eine weitere M\u00f6glichkeit, ein Element zu erzeugen, ist durch clonen eines anderen Knotens (Elementes). Der Vorteil des Clonens besteht darin, dass ein gesamter Unterbaum eines Elementes mitkopiert werden kann. Die Syntax f\u00fcr das Clonen eines Knotens node ist <code>nod.cloneNode(deep)</code>. Wenn <code>deep</code> <code>true</code> ist, werden auch alle Kindelemente geklont, wenn <code>false</code>, dann nur das Element selbst. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;Clone&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;img src=\"./images/fiw.jpg\" ondblclick=\"cloneFunc(this)\" class=\"rounded mx-auto d-block\" style=\"width: 150px;\" alt=\"fiw\" /&gt;\n&lt;div id=\"div1\"&gt;&lt;/div&gt;\n&lt;script&gt;\nfunction cloneFunc(obj)\n{\nlet imgClone = obj.cloneNode(true);\nlet divNode = obj.nextElementSibling;\nconsole.log(divNode);       // inspizieren Sie die Konsole in den DevTools\ndivNode.appendChild(imgClone);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Im obigen Beispiel verwenden wir Bootstrap und f\u00fcr das <code>&lt;img&gt;</code>-Element einige Bootstrap-Klassen (haupts\u00e4chlich, damit es in der Mitte ist). Wenn wir auf das Bild Doppelklicken (<code>dblclick</code>), wird die Funktion <code>cloneFunc()</code> aufgerufen, der wir das <code>img</code>-Objekt \u00fcbergeben. In der Funktion clonen wir das Bild (hier ist es egal, ob <code>deep</code> clone oder nicht, da das <code>img</code>-Element keine Kindknoten hat). Der Clone wird dem <code>div</code>-Element als Kind hinzugef\u00fcgt. Durch jeden Doppelklick auf das Bild wird ein weiterer Clone dem <code>&lt;div&gt;</code>-Element hinzugef\u00fcgt. </p>"},{"location":"javascript/#addeventlistener","title":"addEventListener","text":"<p>Eigentlich ist die Verwendung der Attribute <code>onEvent</code> nicht optimal, da die Trennung zwischen HTML und JavaScript nicht gro\u00df genug ist. Wir erinnern uns, wir wollen eine Trennung in die Zust\u00e4ndigkeiten: </p> <ul> <li>HTML f\u00fcr den Inhalt,</li> <li>CSS f\u00fcr das Layout und </li> <li>JavaScript f\u00fcr das Verhalten.</li> </ul> <p>Besser ist es, die Event-Listener ebenfalls durch JavaScript hinzuzuf\u00fcgen und nicht durch HTML-Attribute. Wir erweitern unser obiges Clone-Beispiel zun\u00e4chst wie folgt (hinzugekommener Code hervorgehoben):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;Clone&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;img src=\"./images/fiw.jpg\" ondblclick=\"cloneFunc(this)\" class=\"rounded mx-auto d-block\" style=\"width: 150px;\" alt=\"fiw\" /&gt;\n&lt;div id=\"div1\"&gt;&lt;/div&gt;\n&lt;script&gt;\nfunction cloneFunc(obj)\n{\nlet imgClone = obj.cloneNode(true);\nlet divNode = obj.nextElementSibling;\ndivNode.addEventListener(\"click\", removeFunc);\nconsole.log(divNode);       // inspizieren Sie die Konsole in den DevTools\ndivNode.appendChild(imgClone);\n}\n\nfunction removeFunc(event)\n{\nlet obj = event.target;\nconsole.log(obj);\nlet parent = obj.parentElement;\nconsole.log(parent);\nparent.removeChild(obj);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In Zeile <code>17</code> melden wir unseren geklonten Knoten an den Event-Listener f\u00fcr das <code>click</code>-Ereignis an. Wird auf das Bild geklickt, dann wird die Funktion <code>removeFunc()</code> aufgerufen. Beachten Sie, dass der erste Parameter der <code>addEventListener()</code>-Funktion das Ereignis <code>click</code> ist (und nicht das HTML-Attribut <code>onClick</code>) und dass der zweite Parameter die Referenz auf die Funktion <code>removeFunc</code> ist, nicht der Aufruf der Funktion. W\u00fcrden wir dort anstelle von <code>removeFunc</code> <code>removeFunc()</code> schreiben, entspr\u00e4che das dem Aufruf der Funktion und diese w\u00fcrde bei Aufruf der Funktion <code>addEventListener()</code> sofort ausgef\u00fchrt. </p> <p>Beachten Sie au\u00dferdem, dass bei der Funktionsdefinition von <code>removeFunc()</code> das ausgel\u00f6ste Event <code>event</code> als Parameter \u00fcbergeben wird. Dies passiert automatisch (also immer). Wenn wir den Parameter benennen, dann k\u00f6nnen wir auf dieses Ereignis zugreifen. Das machen wir auch, n\u00e4mlich in Zeile <code>24</code>, wo wir das <code>target</code> des Events abfragen, also das das Ereignis ausl\u00f6sende Element (unser jeweiliges <code>&lt;img&gt;</code>). </p> <p>Die <code>console.log()</code>-Aufrufe sind jeweils nur zum Debuggen bzw. Inspizieren. Es gibt zwei JavaScript-Funktionen zum L\u00f6schen eines Elementes:</p> <ul> <li><code>parent.removeChild(child)</code> - das Elternelement <code>parent</code> ruft die Funktion auf und l\u00f6scht das \u00fcbergebene Kind <code>child</code> </li> <li><code>node.remove()</code> - ein Knoten (Element) ruft f\u00fcr sich selbst die <code>remove()</code>-Funktion auf und l\u00f6scht sich also selbst</li> </ul> <p>Wir haben im obigen Abschnitt die erste Variante gew\u00e4hlt, um zu zeigen, wie der Elternknoten ermittelt werden kann. Man h\u00e4tte aber auch auf Zeile <code>26</code> verzeichten und in Zeile <code>28</code> einfach <code>obj.remove()</code> schreiben k\u00f6nnen.</p>"},{"location":"javascript/#beispiel-vollstandig-mit-javascript-erzeugt","title":"Beispiel vollst\u00e4ndig mit JavaScript erzeugt","text":"<p>Das soeben gezeigte Beispiel soll nun exemplarisch vollst\u00e4ndig durch JavaScript erzeugt werden. Wir verwenden genau ein Event-Attribut, n\u00e4mlich <code>onload</code>, das wir dem <code>body</code> zuweisen. Das <code>load</code>-Event wird aufgerufen, sobald die Seite vollst\u00e4ndig geladen ist. Ist die (leere) Seite vollst\u00e4ndig geladen, wird die Funktion <code>createAllElements()</code> aufgerufen: </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;Clone&lt;/title&gt;\n&lt;/head&gt;\n&lt;body onload=\"createAllElements()\"&gt;\n&lt;script&gt;\nfunction cloneFunc(event)\n{\nlet obj = event.target;\nlet imgClone = obj.cloneNode(true);\nlet divNode = obj.nextElementSibling;\ndivNode.addEventListener(\"click\", removeFunc);\nconsole.log(divNode);       // inspizieren Sie die Konsole in den DevTools\ndivNode.appendChild(imgClone);\n}\n\nfunction removeFunc(event)\n{\nlet obj = event.target;\nconsole.log(obj);\nlet parent = obj.parentElement;\nconsole.log(parent);\nparent.removeChild(obj);\n}\n\nfunction createAllElements()\n{\nlet imgNode = document.createElement('img');\nimgNode.src = \"./images/fiw.jpg\";\nimgNode.classList.add(\"rounded\", \"mx-auto\",  \"d-block\");\nimgNode.style.width = \"150px\";\nimgNode.alt = \"fiw\";\nimgNode.addEventListener(\"dblclick\", cloneFunc);\nlet divNode = document.createElement('div');\ndivNode.id = \"div1\";\nlet scriptNode = document.getElementsByTagName('script')[0];\ndocument.body.insertBefore(imgNode, scriptNode);\ndocument.body.insertBefore(divNode, scriptNode);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Hervorgehoben sind wieder die Zeilen, in dennen sich etwas ge\u00e4ndert hat.</p> <ul> <li>Zeile <code>10</code>: Der <code>&lt;body&gt;</code> enth\u00e4lt nun nur noch ein <code>&lt;script&gt;</code>-Element. Ansonsten keine weiteren HTML-Elemente. </li> <li>Zeile <code>12</code>: Der Funktion <code>cloneFunc()</code> kann nun nicht mehr das <code>img</code>-Objekt selbst \u00fcbergeben werden (da wir in <code>addEventListener()</code> nur die Referenz auf die Funktion \u00fcbergeben). Deswegen verwenden wir auch hier wieder das automatisch \u00fcbergebene <code>event</code> und ermitteln das <code>target</code> des ausgel\u00f6sten Ereignisses (Zeile <code>14</code>).</li> <li>Zeilen <code>31-46</code>: Die Funktion <code>createAllElements()</code> erzeugt zun\u00e4chst ein <code>img</code>-Knoten mit allen erforderlichen Attributen. Au\u00dferdem wird dieser Knoten auch noch an das <code>dblclick</code>-Ereignis angemeldet und die Referenz auf die Funktion <code>cloneFunc</code> als Event-Handler \u00fcbergeben. In Zeile <code>44</code> wird dieser <code>img</code>-Knoten dem <code>&lt;body&gt;</code> hinzugef\u00fcgt, und zwar vor dem <code>&lt;script&gt;</code>-Element. Au\u00dferdem wird noch unser <code>&lt;div&gt;</code> mit der <code>id=\"div1\"</code> erzeugt und ebenfalls vor dem <code>&lt;script&gt;</code>-Element (und hinter das <code>&lt;img&gt;</code>-Element) eingef\u00fcgt. </li> </ul> <p>Es entsteht die exakt gleiche Webseite wie in dem Beispiel davor (siehe Beispiel aus addEventListener).</p>"},{"location":"javascript/#ein-beispielformular-mit-elementerzeugung","title":"Ein Beispielformular mit Elementerzeugung","text":"<p>Wir betrachten noch ein einfaches Beispiel, in dem durch Eingaben neue Eingabefelder erzeugt werden. Betrachten wir zun\u00e4chst den HTML-Code:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n        integrity=\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;Javascript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body class=\"container\"&gt;\n    &lt;h1&gt;Formular auslesen&lt;/h1&gt;\n    &lt;h4&gt;Kommentare&lt;/h4&gt;\n\n    &lt;form id=\"form\" onsubmit=\"return false;\"&gt; \n        &lt;div class=\"form-floating mb-3\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" id=\"input1\" placeholder=\"Kommentar 1\" onchange=\"fixeInput()\"&gt;\n            &lt;label for=\"input1\"&gt;Kommentar 1&lt;/label&gt;\n        &lt;/div&gt;\n    &lt;/form&gt; \n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Folgende Ansicht wird erzeugt:</p> <p></p> <p>Nach erfolgter Eingabe wird durch die <code>Enter</code>-Taste die <code>fixeInput()</code>-Funktion aufgerufen. Wir implementieren diese Funktion wie folgt:</p> <pre><code>    let nr = 1;\n\nfunction fixeInput() {\nlet inputId = \"input\" + nr;\nlet ul = document.querySelector('#ul');\nlet input = document.getElementById(inputId);\ninput.disabled = \"true\";\n\nlet newDiv = document.createElement('div');\nnewDiv.classList.add(\"form-floating\", \"mb-3\");\nlet newInput = document.createElement('input');\nnewInput.classList.add(\"form-control\");\nnr++;\nlet newInputId = \"input\" + nr;\nnewInput.id = newInputId;\nnewInput.placeholder = \"Kommentar \" + nr;\nnewInput.addEventListener(\"change\", fixeInput);\nnewDiv.appendChild(newInput);\n\nlet newLabel = document.createElement('label');\nnewLabel.for = newInputId;\nnewLabel.innerText = \"Kommentar \" + nr;\nnewDiv.appendChild(newLabel);\n\nlet form = document.querySelector('#form');\nlet button = document.querySelector('#submitBtn');\nform.insertBefore(newDiv, button);\nnewInput.focus({ focusVisible: true });\n}\n</code></pre> <p>Wir definieren eine globale Variable <code>nr</code> (Zeile <code>1</code>). In der Funktion wird diese Variable verwendet, um z.B. die <code>id</code> f\u00fcr das aktuelle <code>input</code>-Element zu bestimmen (Zeile <code>4</code>) und eine neue <code>id</code> f\u00fcr das neu zu erzeugende <code>input</code>-Element zu definieren (Zeile <code>14</code>). In den Zeilen <code>9</code> und <code>10</code> wird ein neues <code>div</code>-Element erzeugt, so dass es in HTML wie folgt aussieht:</p> <pre><code>&lt;div class=\"form-floating mb-3\"&gt;\n\n&lt;/div&gt;\n</code></pre> <p>In den Zeilen <code>11-17</code> wird ein neues <code>input</code>-Element erzeugt und diesem <code>input</code>-Element die Ereignisbehandlung des <code>change</code>-Events zugewiesen (Zeile <code>17</code>) - ebenfalls Aufruf der <code>fixeInput()</code>-Funktion. In Zeile <code>18</code> wird dieses neue <code>input</code>-Element dem erzeugten <code>div</code>-Element hinzugef\u00fcgt, so dass f\u00fcr z.B. <code>nr==2</code> folgendes HTML entsteht:</p> <pre><code>&lt;div class=\"form-floating mb-3\"&gt;\n    &lt;input type=\"text\" class=\"form-control\" id=\"input2\" placeholder=\"Kommentar 2\" onchange=\"fixeInput()\"&gt;\n&lt;/div&gt;\n</code></pre> <p>In Zeilen <code>20-23</code> wird das entsprechende <code>label</code> erzeugt und ebenfalls dem <code>div</code> hinzugef\u00fcgt:</p> <pre><code>&lt;div class=\"form-floating mb-3\"&gt;\n    &lt;input type=\"text\" class=\"form-control\" id=\"input2\" placeholder=\"Kommentar 2\" onchange=\"fixeInput()\"&gt;\n    &lt;label for=\"input2\"&gt;Kommentar 2&lt;/label&gt;\n&lt;/div&gt;\n</code></pre> <p>So entsteht bei jedem Eintrag ein neues <code>div</code> inklusive <code>input</code>- und <code>label</code>-Element, wobai <code>nr</code> jeweils hochgez\u00e4hlt wird und so die <code>id</code>s <code>input2</code>, <code>input3</code>, <code>input4</code> ... bzw. die <code>placeholder</code> und <code>label</code>-Inhalte <code>Kommentar 1</code>, <code>Kommentar 2</code>, <code>Kommentar 3</code>... entstehen:</p> <p></p> <p>Die bereits ausgef\u00fcllten <code>input</code>-Elemente werden auf <code>disabled</code> gesetzt (<code>readonly</code> geht auch), so dass sie nicht mehr bearbeitet werden k\u00f6nnen. </p>"},{"location":"javascript/#javascript-sprachelemente","title":"JavaScript - Sprachelemente","text":""},{"location":"javascript/#var-let-und-const","title":"<code>var</code>, <code>let</code> und <code>const</code>","text":"<p>Mithilfe der Schl\u00fcsselw\u00f6rter <code>var</code>, <code>let</code> und <code>const</code> k\u00f6nnen in JavaScript Variablen deklariert werden. Wenn Sie eine Variable mit <code>var</code> deklarieren, dann ist diese Variable innerhalb der gesamten Funktion, in der Sie die Variable deklarieren, g\u00fcltig. Dagegen hat <code>let</code> nur eine Blockg\u00fcltigkeit, d.h. eine mit <code>let</code> deklarierte Variable ist nur in dem Anweisungsblock g\u00fcltig, in dem sie deklariert wurde. Eine mit <code>let</code> deklarierte Variable verh\u00e4lt sich also wie eine in Java deklarierte Variable. <code>const</code> wird zur Deklaration von Konstanten verwendet. Es ist zu bachten: Falls es sich bei der mit <code>const</code> deklarierten Konstante um eine Referenzvariable handelt (also auf ein Objekt oder Array zeigt), dann kann diese Variable ihre Referenz zwar nicht mehr \u00e4ndern, das jeweilige Objekt, auf das die Variable (konstant) zeigt, kann sich aber schon \u00e4ndern.</p> <p>Globale Variablen, also Variablen, die von allen Funktionen geteilt werden (in allen Funktionen genutzt werden k\u00f6nnen), werden au\u00dferhalb der Funktionen deklariert. Man sollte nur sehr selten globale Variablen einsetzen, da sie in allen anderen Funktionen (auch externen) \u00fcberschrieben werden k\u00f6nnen. Bl\u00f6derweise ist eine Variable auch dann global, wenn sie ohne eines der genannten Schl\u00fcsselw\u00f6rter (<code>var</code>, <code>let</code> und <code>const</code> ) innerhalb einer Funktion \"deklariert\" wurde. Das geschieht meistens durch eine Wertzuweisung in der Annahme, dass die Variable bereits deklariert wurde. Eine solche unbeabsichtigte Erstellung einer globalen Variable sollte vermieden werden - die absichtliche erst recht. Wenn globale Variable, dann die Deklaration au\u00dferhalb aller Funktionen.</p>"},{"location":"javascript/#objekte","title":"Objekte","text":"<p>Objekte in JavaScript werden in JavaScript Object Notation beschrieben. Wir werden darauf noch genauer eingehen, zeigen hier aber schonmal ein einfaches Beispiel zur Einf\u00fchrung:</p> <pre><code>let person={vorname:\"Maria\", nachname: \"Musterfrau\"};\n</code></pre> <p>Es wurde eine <code>person</code> definiert mit 2 Feldern <code>vorname</code> und <code>nachname</code> und diesen Feldern wurden Werte zugewiesen. Der Zugriff auf die Felder erfolgt mittels Punkt-Notation, also <code>person.vorname</code> und <code>person.nachname</code>. </p> <ul> <li>Sie k\u00f6nnen die Werte auch einfach \u00fcberschreiben, z.B. <code>person.nachname = \"Schmidt\"</code>. </li> <li>Sie k\u00f6nnen das Objekt auch um weitere Eigenschaften erweitern, z.B. <code>person.alter = 42</code>.</li> </ul> <p>Neben der \u00fcblichen Punktnotation ist auch zu erw\u00e4hnen, dass die Eigenschaften auch Schl\u00fcssel eines assoziativen Arrays sind, d.h. Sie k\u00f6nnen auf die Werte auch wie folgt zugreifen:</p> <pre><code>person[\"vorname\"]       // Maria\nperson[\"nachname\"]      // Schmidt\nperson[\"alter\"]         // 42\n</code></pre> <p>Mithilfe von <code>delete</code> k\u00f6nnen Eigenschaften gel\u00f6scht werden, z.B. <code>delete person.alter;</code>. Ab dann ist <code>person.alter</code> <code>undefined</code>. </p> <p>Objekteigenschaften k\u00f6nnen auch Funktionen sein, z.B. </p> <pre><code>person.name=function(){ return this.vorname + \" \" + this.nachname };\n</code></pre> <p>Der Aufruf erfolgt dann \u00fcber <code>person.name();</code></p>"},{"location":"javascript/#ein-beispiel-mit-einem-javascript-objekt","title":"Ein Beispiel mit einem JavaScript-Objekt","text":"<p>Wir betrachten fplgendes JavaScript-Objekt, mit dem wir eine Farbe im HSL-Format repr\u00e4sentieren:</p> <pre><code>colorHSL = {\nhue:  50,\nsaturation: 50,\nlightness: 50,\nname: () =&gt; `hsl(${colorHSL.hue} , ${colorHSL.saturation}%, ${colorHSL.lightness}%)`\n}\n</code></pre> <p>Beachten Sie, dass ein JavaScript-Objekt (im Gegensatz zu einem Objekt im JSON-Format) auch Funktionen als Eigenschaften besitzen kann, siehe Eigenschaft <code>name</code> im Objekt <code>colorHSL</code>. Zur Verwendung dieses Objektes erstellen wir uns zun\u00e4chst folgendes HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n        integrity=\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;Javascript&lt;/title&gt;\n    &lt;style&gt;\ndiv#output {\nheight: 300px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body class=\"container\" onload=\"setBackgroundColorDiv()\"&gt;\n\n    &lt;h1&gt;JavaScript-Objekte&lt;/h1&gt;\n    &lt;div id=\"output\"&gt;\n\n    &lt;/div&gt;\n    &lt;div class=\"my-3\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-2\"&gt;\n                &lt;label for=\"hueIP\" class=\"form-label\"&gt;Hue (Farbton)&lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-2\"&gt;\n                &lt;input type=\"text\" class=\"form-range\" id=\"hueOP\" value=\"50\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-8\"&gt;\n                &lt;input type=\"range\" class=\"form-range\" min=\"0\" max=\"360\" id=\"hueIP\" oninput=\"newHue()\" value=\"50\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-2\"&gt;\n                &lt;label for=\"satIP\" class=\"form-label\"&gt;Saturation (S\u00e4ttigung)&lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-2\"&gt;\n                &lt;input type=\"text\" class=\"form-range\" id=\"satOP\" value=\"50\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-8\"&gt;\n                &lt;input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" id=\"satIP\" oninput=\"newSat()\" value=\"50\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-2\"&gt;\n                &lt;label for=\"lightIP\" class=\"form-label\"&gt;Lightness (Helligkeit)&lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-2\"&gt;\n                &lt;input type=\"text\" class=\"form-range\" id=\"lightOP\" value=\"50\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-8\"&gt;\n                &lt;input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" id=\"lightIP\" oninput=\"newLight()\" value=\"50\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Das ergibt folgendes Aussehen:</p> <p></p> <p>F\u00fcr die <code>&lt;input type=\"range\"</code>-Felder wird das <code>input</code>-Event behandelt. F\u00fcr jeden Slider wird eine eigene Funktion aufgerufen, das h\u00e4tte man aber auch alles in einer Funktion erledigen k\u00f6nnen. Hier der JavaScript-Code, der per <code>&lt;script&gt;</code>-Element eingebunden wird:</p> <pre><code>    let colorHSL = {};\n\nfunction setBackgroundColorDiv() {\ncolorHSL = {\nhue:  50,\nsaturation: 50,\nlightness: 50,\nname: () =&gt; `hsl(${colorHSL.hue} , ${colorHSL.saturation}%, ${colorHSL.lightness}%)`\n}\nlet outputDiv = document.querySelector('#output');\noutputDiv.style.backgroundColor = colorHSL.name();\nconsole.log(colorHSL.name());\n}\n\nfunction newHue() {\nlet sliderValue = document.querySelector('#hueIP').value;\ncolorHSL.hue = sliderValue;\ndocument.querySelector('#hueOP').value = sliderValue;\ndocument.querySelector('#output').style.backgroundColor = colorHSL.name();\nconsole.log(colorHSL.name())\n}\n\nfunction newSat() {\nlet sliderValue = document.querySelector('#satIP').value;\ncolorHSL.saturation = sliderValue;\ndocument.querySelector('#satOP').value = sliderValue;\ndocument.querySelector('#output').style.backgroundColor = colorHSL.name();\nconsole.log(colorHSL.name())\n}\n\nfunction newLight() {\nlet sliderValue = document.querySelector('#lightIP').value;\ncolorHSL.lightness = sliderValue;\ndocument.querySelector('#lightOP').value = sliderValue;\ndocument.querySelector('#output').style.backgroundColor = colorHSL.name();\nconsole.log(colorHSL.name())\n}\n</code></pre> <p>Die Funktion <code>setBackgroundColorDiv()</code> definiert zun\u00e4chst die Eigenschaften des JavaScript-Objektes <code>colorHSL</code>. Die Variable ist global definiert, damit alle Funktionen auf diese Variable Zugriff haben. Die Funktion <code>setBackgroundColorDiv()</code> wird durch das <code>load</code>-Event aufgerufen (siehe Zeile <code>15</code> im HTML-Code). Die Funktion <code>name</code> im <code>colorHSL</code>-Objekt gibt den CSS-Wert der Farbe als String zur\u00fcck. Beachten Sie die Verwendung der <code>back ticks</code> f\u00fcr den String. Diese Erlauben die Interpolation unter Verwendung des <code>${}</code>-Operators.</p> <p>Die drei Funktionen <code>newXXX</code> h\u00e4tten auch durch eine ersetzt werden k\u00f6nnen:</p> <pre><code>    function newValues() {\nlet sliderValueH = document.querySelector('#hueIP').value;\nlet sliderValueS = document.querySelector('#satIP').value;\nlet sliderValueL = document.querySelector('#lightIP').value;\n\ncolorHSL.hue = sliderValueH;\ncolorHSL.saturation = sliderValueS;\ncolorHSL.lightness = sliderValueL;\n\ndocument.querySelector('#hueOP').value = sliderValueH;\ndocument.querySelector('#satOP').value = sliderValueS;\ndocument.querySelector('#lightOP').value = sliderValueL;\n\ndocument.querySelector('#output').style.backgroundColor = colorHSL.name();\nconsole.log(colorHSL.name())\n}\n</code></pre> <p>Objektausgabe auf Konsole</p> <p>Angenommen, Sie wollen ein Objekt auf die Konsole ausgeben und zuvor noch eine eigene Ausgabe. Verwenden Sie dann nicht den Zeichenkettenverbindungsoperator <code>+</code>, also nicht z.B. <code>console.log('colorHSL' + colorHSL);</code>. Das f\u00fchrt nur dazu, dass f\u00fcr das Objekt <code>toString()</code> aufgerufen wird und das ergibt dann <code>colorHSL[object Object]</code>. Verwenden Sie stattdessen ein Komma, z.B. <code>console.log('colorHSL', colorHSL);</code>. Das ergibt dann das Gew\u00fcnschte: <code>colorHSL {hue: 50, saturation: 50, lightness: 50, name: \u0192}</code>. </p>"},{"location":"javascript/#jsonparse-und-jsonstringify","title":"JSON.parse() und JSON.stringify()","text":"<p>Mithilfe von JSON.stringify() k\u00f6nnen Sie ein JavaScript-Objekt in das JSON-Format \u00fcberf\u00fchren. Beachten Sie, dass Funktionen im JSON-Format nicht erlaubt sind. Aus obigem <code>colorHSL</code>-Objekt w\u00fcrde mithilfe von <code>JSON.stringify(colorHSL)</code> folgendes JSON erzeugt werden:</p> <pre><code>{\n\"hue\":50,\n\"saturation\":50,\n\"lightness\":50\n}\n</code></pre> <p>Mithilfe von <code>JSON.parse()</code> erzeugen Sie aus einem JSON ein JavaScript-Objekt. Beachten Sie, dass <code>let newColorHSL = JSON.parse(JSON.stringify(colorHSL))</code> ein JavaScript-Objekt ohne die Funktion <code>name</code> erzeugt:</p> <pre><code>{\nhue: 50, saturation: 50, lightness: 50\n}\n</code></pre>"},{"location":"javascript/#optionale-verkettung","title":"Optionale Verkettung","text":"<p>Der <code>?</code>-Operator wird verwendet, wenn nicht sicher ist, ob eine Eigenschaft existiert bzw. ob ein Wert f\u00fcr die Eigenschaft gesetzt ist. Betrachten wir folgendes Beispiel:</p> <pre><code>let person = {\nvorname : \"Maria\",\nnachname: \"Musterfrau\",\nadresse : {\nstrasse : \"Wilhelminenhofstr.\",\nnummer: 75,\nort: \"Berlin\",\nplz: 12459\n}\n}\n</code></pre> <p>Dann kann der <code>?</code>-Operator z.B. so verwendet werden:</p> <pre><code>person.adresse?.ort\n</code></pre> <p>Die Idee dahinter ist, dass auf die Eigenschaft zugegriffen werden kann, wenn sie existiert und wenn sie einen Wert besitzt. Dieser Operator vermeidet Laufzeitfehler bzw. eine Abfrage auf Existenz.  </p>"},{"location":"javascript/#arrays","title":"Arrays","text":"<p>Arrays in JavaScript werden fast genauso behandelt wie in Java. Hier ein Beispiel:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Arrays&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;JavaScript Arrays&lt;/h2&gt;\n&lt;p id=\"demo\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\nlet sgs = [\"FIW\", \"AI\", \"IMI\", \"WI\"];\nlet lange = sgs.length;\n\ntext = \"&lt;ul&gt;\";\nfor (let i = 0; i &lt; sgs.length; i++) {\ntext += \"&lt;li&gt;\" + sgs[i] + \"&lt;/li&gt;\";\n}\ntext += \"&lt;/ul&gt;\";\n\ndocument.getElementById(\"demo\").innerHTML = text;\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In Zeile <code>12</code> wird das Array <code>sgs</code> (soll Studieng\u00e4nge hei\u00dfen - immer sprechende Namen verwenden ;-) definiert. Es enth\u00e4lt lauter Strings. In JavaScript k\u00f6nnen die Elemente eines Arrays von verschiedenen Typen sein. In Zeile <code>16</code> definieren wir die <code>for</code>-Schleife, mit der wir durch das Array laufen (ist genau so numerisch indiziert, wie wir das von Java kennen). Wir greifen \u00fcber die Index-Schreibweise <code>sgs[i]</code> auf alle Elemente des Arrays zu (Zeile <code>17</code>). </p> <p>Das Array kann auch aus Objekten bestehen. Angenommen, das Array sieht so aus:</p> <pre><code>var staedte = [\n{ \"jahr\" : 1237, \"stadt\" : \"Berlin\", \"link\" : \"http://de.wikipedia.org/wiki/Berlin\", \"bild\" : \"images/berlin.png\"},\n{ \"jahr\" : 1624, \"stadt\" : \"New York\", \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\", \"bild\" : \"images/newyork.png\"},\n{ \"jahr\" : 1252, \"stadt\" : \"Stockholm\", \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\", \"bild\" : \"images/stockholm.png\"},\n{ \"jahr\" : 852, \"stadt\" : \"Madrid\", \"link\" : \"http://de.wikipedia.org/wiki/Madrid\", \"bild\" : \"images/madrid.png\"},\n{ \"jahr\" : 1827, \"stadt\" : \"Bremerhaven\", \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\", \"bild\" : \"images/bremerhaven.png\"},\n{ \"jahr\" : 150, \"stadt\" : \"Bremen\", \"link\" : \"http://de.wikipedia.org/wiki/Bremen\", \"bild\" : \"images/bremen.png\"},\n{ \"jahr\" : 1202, \"stadt\" : \"Bernau\", \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\", \"bild\" : \"images/bernau.png\"},\n{ \"jahr\" : 929, \"stadt\" : \"Brandenburg\", \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\", \"bild\" : \"images/brandenburg.png\"},\n{ \"jahr\" : 805, \"stadt\" : \"Magdeburg\", \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\", \"bild\" : \"images/magdeburg.png\"},\n{ \"jahr\" : 1222, \"stadt\" : \"Marburg\", \"link\" : \"http://de.wikipedia.org/wiki/Marburg\", \"bild\" : \"images/marburg.png\"},\n{ \"jahr\" : 766, \"stadt\" : \"Mannheim\", \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\", \"bild\" : \"images/mannheim.png\"},\n{ \"jahr\" : 782, \"stadt\" : \"Mainz\", \"link\" : \"http://de.wikipedia.org/wiki/Mainz\", \"bild\" : \"images/mainz.png\"}\n];\n</code></pre> <p>Dann sind die Elemente des Arrays numerisch indiziert. </p>"},{"location":"javascript/#javascript-ist-dynamisch-typisiert","title":"JavaScript ist dynamisch typisiert","text":"<p>Im Gegensatz zu z.B. Java ist JavaScript nicht statisch, sondern dynamisch typisiert. Der Wert einer Variablen bestimmt deren Typ. Beispiel:</p> <pre><code>let number = 16;                                // number  \nlet name = \"Johnson\";                           // string\nlet cars = [\"Saab\", \"Volvo\", \"BMW\"];            // object (Array)\nlet obj = {firstName:\"John\", lastName:\"Doe\"};   // object\nlet func = new Function();                      // function\nlet correct = true;                             // boolean\nlet x;                                          // now x is undefined\nlet x = 5;                                      // now x is a Number\nlet x = \"John\";                                 // now x is a String\n</code></pre> <p><code>typeof</code> kann verwendet werden, ob zu \u00fcberpr\u00fcfen, ob eine Variable \u00fcberhaupt definiert ist und/oder von welchem Typ sie ist. Es liefert folgende Resultate:</p> <ul> <li><code>undefined</code></li> <li><code>boolean</code></li> <li><code>function</code></li> <li><code>number</code></li> <li><code>object</code></li> <li><code>string</code></li> <li><code>symbol</code></li> </ul> <p>Beispiel: <pre><code>&lt;div id=\"myDiv\"&gt;&lt;/div&gt;\n&lt;script&gt;\nlet x;\ndocument.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // undefined\nx=\"12\";\ndocument.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // string\nx=12;\ndocument.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // number\nx=12.12;\ndocument.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // number\nx=true;\ndocument.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // boolean\nx=function(){alert(\"Funktion\");};\ndocument.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // function\nx=new Function(\"alert('Funktion')\");\ndocument.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // function\nx=new Object(); document.getElementById(\"myDiv\").innerHTML+=typeof(x)+\"&lt;br/&gt;\";  // object\n&lt;/script&gt;\n</code></pre></p>"},{"location":"javascript/#funktionen","title":"Funktionen","text":"<p>Die Definition von Funktionen in JavaScript erfolgt \u00fcber das Schl\u00fcsselwort <code>function</code>. Wir haben oben bereits mehrere Beispiele f\u00fcr Funktionen gezeigt. Hier ein weiteres:</p> <pre><code>&lt;p id=\"demo\"&gt;&lt;/p&gt;\n&lt;script&gt;\nfunction myFunction(a, b) {\nreturn a * b;\n}\ndocument.getElementById(\"demo\").innerHTML = myFunction(4, 3);\n&lt;/script&gt;\n</code></pre> <p>Es wird eine Funktion <code>myFunction()</code> definiert, der 2 Parameter <code>a</code> und <code>b</code> \u00fcbergeben werden. Die Funktion berechnet das Produkt aus <code>a</code> und <code>b</code> und gibt dieses mithilfe von <code>return</code> zur\u00fcck. Der zur\u00fcckgegebene Wert wird als Inhalt des Absatzes <code>&lt;p&gt;</code> mit der <code>id=\"demo\"</code> verwendet. <code>myFunction(4, 3);</code> ist der Aufruf der Funktion. </p> <p>Au\u00dferdem k\u00f6nnen Funktionen als anonyme Funktionen deklariert werden. Es ist m\u00f6glich, dass eine Variable auf eine (anonyme) Funktion zeigt. Diese Variable kann dann wie die Funktion selbst verwendet werden. Beispiel:</p> <p><pre><code>let x = function (a, b) {return a * b};\n</code></pre> Die Funktion kann nun \u00fcber z.B. <code>x(4,3);</code> aufgerufen werden. </p> <p>Eine weitere (aber selten verwendete) M\u00f6glichkeit, eine Funktion zu definieren, ist die Verwendung des <code>Function()</code>-Konstruktors. Beispiel:</p> <p><pre><code>let myFunction = new Function(\"a\", \"b\", \"return a * b\");\n</code></pre> Diese Funktion kann dann (wie oben mit <code>x</code>) mit <code>myFunction(4,3);</code> aufgerufen werden. Aber, wie gesagt, das ist eher un\u00fcblich, denn es ist \u00e4quivalent zu:</p> <p><pre><code>let myFunction = function (a, b) {return a * b};\n</code></pre> mit dem Aufruf <code>myFunction(4,3);</code>. Die Verwendung des <code>Function()</code>-Konstruktors zeigt aber, dass jede Funktion vom Typ <code>function</code> ist. In JavaScript gibt es also einen Typ <code>function</code>.  W\u00fcrde man f\u00fcr das Beispiel mit <code>x</code> z.B. <code>typeof(x)</code> aufrufen, ist das Resultat <code>function</code>.</p>"},{"location":"javascript/#variable-anzahl-von-parametern","title":"Variable Anzahl von Parametern","text":"<p>Die Anzahl der Parameter kann, muss aber nicht in der Funktionsdefinition angegeben werden. Es geht immer (auch wenn eine feste Anzahl von Parametern angegeben wurde):</p> <pre><code>function summe() {\nlet i, sum = 0;\nfor(i = 0; i &lt; arguments.length; i++) {\nsum += arguments[i];\n}\nreturn sum;\n}\n</code></pre> <p>Diese Funktion kann jetzt mit beliebig vielen Parametern aufgerufen werden:</p> <pre><code>summe(1, 2, 3, 4, 5, 6);\nsumme(1, 2, 3);\n</code></pre>"},{"location":"javascript/#arrow-funktionen","title":"Arrow-Funktionen","text":"<p>Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von <code>function()</code> schreibt man nur noch einen  Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar <code>return</code> weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent:</p> <pre><code>function(foo) = {return foo+1;}\n(foo) =&gt; {return foo+1;}\nfoo =&gt; {return foo+1;}\nfoo =&gt; foo+1;\n</code></pre>"},{"location":"javascript/#callback-funktionen","title":"Callback-Funktionen","text":"<p>Eine Callback-Funktion ist eine Funktion, die einer anderen Funktion als Parameter \u00fcbergeben wird. Callback-Funktionen sind z.B. hier erl\u00e4utert. Darin finden Sie auch das folgende einfache Beispiel einer Callback-Funktion:</p> <pre><code>function greeting(name) {\nalert('Hello ' + name);\n}\n\nfunction processUserInput(callback) {\nvar name = prompt('Please enter your name.');\ncallback(name);\n}\n\nprocessUserInput(greeting);\n</code></pre> <p>In den Zeilen 1-3 wird eine Funktion <code>greeting()</code> definiert, welche einen <code>name</code> erwartet. Diese Funktion gibt <code>Hello</code> zusammen mit dem Namen in einem Alarmfenster aus. Die Funktion <code>greeting()</code> wird als Callback-Funktion in der Funktion <code>processUserInput()</code> (Zeilen 5-8) verwendet. Das hei\u00dft, die Funktion <code>greeting()</code> wird der Funktion <code>processUserInput()</code> als Parameter \u00fcbergeben. Innerhalb der Funktion <code>processUserInput()</code> hei\u00dft die Referenz auf die Funktion <code>greeting()</code> <code>callback</code>. Der Parametername kann beliebig gew\u00e4hlt werden. Wir die Funktion <code>processUserInput()</code> aufgerufen (Zeile 10) und die Funktion <code>greeting()</code> als Parameter \u00fcbergeben, dann erscheint zun\u00e4chst ein Eingabefenster, in dem der Name eingeben wird und dieser Name wird der <code>greeting()</code>-Funktion als Parameter \u00fcbergeben. Es erscheint das Alarmfenster mit der Ausgabe <code>Hello</code> plus dem Namen. Der Funktion <code>processUserInput()</code> k\u00f6nnte auch jede andere Funktion als Callback-Funktion \u00fcbergeben werden. </p>"},{"location":"javascript/#promises","title":"Promises","text":"<p>Eine Promise ist das Ergebnis einer asynchronen Operation. Es gibt vier Status einer Promise (uns interessiert in der Regel nur <code>resolved</code> oder <code>rejected</code>):</p> Status Erkl\u00e4rung <code>pending</code> die Promise wartet noch auf die Beendigung der asynchronen Operation <code>settled</code> die asynchrone Operation wurde beendet <code>resolved</code> die asynchrone Operation wurde erfolgreich beendet <code>rejected</code> die asynchrone Operation ist fehlgeschlagen <p>Um das Prinzip einer Promise zu erl\u00e4utern, schauen wir uns ein Beispiel aus Node.js \u2192 Eine Movie-Datenbank an:</p> <pre><code>function getAll() {\nreturn new Promise((resolve, reject) =&gt; {\nconst query = 'SELECT * FROM Movies';\nconnection.query(query, (error, results) =&gt; {\nif(error) reject(error);\nelse      resolve(results);\n})\n});\n}\n</code></pre> <p>Die Funktion <code>getAll()</code> gibt eine Promise zur\u00fcck. Diese wird mit dem Konstruktor erzeugt. Dem Konstruktor wird eine Callback-Funktion \u00fcbergeben. Hier ist diese Funktion die Anfrage an die Datenbank <code>connection.query()</code>. Diese Funktion ist asynchron, d.h. sie wird ausgef\u00fchrt, ohne dass andere Funktionsaufrufe stoppen m\u00fcssen. Man kann auch sagen, dass die Promise die asynchrone Funktion kapselt. </p> <p>Die asynchrone Funktion enth\u00e4lt ebenfalls eine Callback-Funktion. Hier wurden als Parameternamen der Callback-Funktion <code>error</code> und <code>results</code> gew\u00e4hlt. Der erste Parameter wirft einen Fehler, wenn die asynchrone Funktion fehlschl\u00e4gt, der zweite Parameter enth\u00e4lt die Daten bei Erfolg. Mit <code>reject</code> gibt man den Fehler zur\u00fcck (im Fehlerfall) und mit <code>resolve</code> die Daten (im Erfolgsfall). </p> <p>return new Promise()</p> <p>Wir merken uns also: die <code>getAll()</code>-Funktion gibt ein <code>Promise</code>-Objekt zur\u00fcck.</p> <p>Wie kann eine solche Promise nun verwendet werden? Dazu schauen wir uns erneut das Beispiel aus Node.js \u2192 Eine Movie-Datenbank an:</p> <pre><code>function listAction(request, response) {\nmodel.getAll().then(\nmovies =&gt; response.send(view(movies)),\nerror =&gt; response.send(error),\n);\n}\n</code></pre> <p>Der entscheidende Punkt ist, dass ein Promise-Objekt eine <code>then</code>-Methode besitzt. Dieser <code>then</code>-Methode k\u00f6nnen wiederum zwei Callback-Funktionen \u00fcbergeben werden. Die erste Funktion wird durch die <code>resolve</code>-Funktion der Promise aufgerufen, die zweite Funktion, falls die Promise die <code>reject</code>-Funktion aufruft. Werden der <code>resolve</code>- und der <code>reject</code>-Funktion Argumente \u00fcbergeben (so wie oben <code>resolve(results)</code> und <code>reject(error)</code>), dann k\u00f6nnen diese Argumente in der jeweiligen Callback-Funktion ausgewertet werden (<code>results</code>\u2192<code>movies</code> bzw. <code>error</code>\u2192<code>error</code>). </p> <p>Die <code>then</code>-Funktion selbst gibt \u00fcbrigens wieder ein <code>Promise</code>-Objekt zur\u00fcck. Somit k\u00f6nnen mehrere Promises verkettet werden.</p>"},{"location":"javascript/#asyncawait-vs-then","title":"async/await vs. then","text":"<p>Wir schauen uns noch ein weiteres Beispiel an. Gegeben seien die beiden folgenden Funktionen:</p> <pre><code>function makeRequest(file) {\nreturn new Promise( (resolve, reject) =&gt; {\nconsole.log('making request for ' + file)\nif(file == 'index') {\nresolve('index exists')\n} else {\nreject(file + \" does not exist\")\n}\n})\n}\n\nfunction processRequest(response) {\nreturn new Promise((resolve, reject) =&gt; {\nconsole.log('processing response ')\nresolve('processing done for ' + response)      })\n}\n</code></pre> <p>Beide Funktionen geben ein Promise-Objekt zur\u00fcck. Wir verwenden zun\u00e4chst <code>then()</code>, um diese Funktionen zu verwenden:</p> <pre><code>makeRequest('index')\n.then( response =&gt; {\nconsole.log('response received')\nreturn processRequest(response)\n})\n.then( processedResponse =&gt; {\nconsole.log(processedResponse)\n})\n.catch( err =&gt; console.log(err))\n</code></pre> <p>Wir \u00fcbergeben der Funktion <code>makeRequest()</code> den String <code>\"index\"</code>. Dadurch wird die Promise in dieser Funktion erf\u00fcllt (<code>resolve</code>). Die Ausgabe f\u00fcr diesen Fall sieht so aus:</p> <pre><code>making request for index\nresponse received\nprocessing response\nprocessing done for index exists\n</code></pre> <p>In der <code>.then()</code>-Folge von <code>makeRequest()</code> wird die Funktion <code>processRequest()</code> aufgerufen und dieser Funktion die <code>response</code> der <code>makeRequest()</code>-Promise \u00fcbergeben (<code>'index exists'</code>). Diese Promise wird zur\u00fcckgegeben (<code>return processRequest(response)</code>) und dann ebenfalls mit <code>.then()</code> aufgefangen. Die Promise von <code>processRequest</code> besitzt nur ein <code>resolve</code> und kein <code>reject</code>. </p> <p>Falls wir nicht <code>'index'</code> \u00fcbergeben, sondern etwas anderes, l\u00f6st die Promise von <code>makeRequest()</code> ein <code>reject</code> aus:</p> <pre><code>makeRequest('object')\n.then( response =&gt; {\nconsole.log('response received')\nreturn processRequest(response)\n})\n.then( processedResponse =&gt; {\nconsole.log(processedResponse)\n})\n.catch( err =&gt; console.log(err))\n</code></pre> <p>Die Ausgabe ist dann wie folgt:</p> <pre><code>making request for object\nobject does not exist\n</code></pre> <p>Die zweite Zeile der Ausgabe wird durch den <code>reject</code>-Fall der <code>makeRequest</code>-Promise ausgel\u00f6st und durch den Abfangen des Fehlers <code>.catch( err =&gt; console.log(err))</code> ausgegeben. </p> <p>Eine solche Folge von <code>.then()</code>-Ketten wird schnell un\u00fcbersichtlich. Deshalb wurden die Schl\u00fcsselw\u00f6rter <code>async</code> und <code>await</code> eingef\u00fchrt. Prinzipiell w\u00fcrde die obige Abfrage mithilfe von <code>await</code> so aussehen:</p> <pre><code>const response = await makeRequest('index');\nconsole.log('response received')\nconst processedResponse = await processRequest(response)\nconsole.log(processedResponse)\n</code></pre> <p>Das ist sicherlich deutlich \u00fcbersichtlicher. Dabei gibt es jedoch zwei Dinge zu beachten. Erstens haben wir den Fehlerfall noch nicht abgefangen. Das erledigen wir mithilfe von <code>try{} catch(err){}</code>:</p> <pre><code>try {\nconst response = await makeRequest('index');\nconsole.log('response received')\nconst processedResponse = await processRequest(response)\nconsole.log(processedResponse)\n} catch(err) {\nconsole.log(err)\n}\n</code></pre> <p>Das macht die Sache schon gleich nicht mehr ganz so \u00fcbersichtlich. Zum anderen darf <code>await</code> nur in Funktionen verwendet werden, die als <code>async</code> deklariert sind. Das hei\u00dft, wir packen obigen Anweisungsblock in eine Funktion:</p> <pre><code>async function asyncFunction() {\ntry {\nconst response = await makeRequest('index');\nconsole.log('response received')\nconst processedResponse = await processRequest(response)\nconsole.log(processedResponse)\n} catch(err) {\nconsole.log(err)\n}\n}\n</code></pre> <p>Diese Funktion muss dann aufgerufen werden. Je nachdem, ob Sie <code>'index'</code> der <code>makeRequest()</code>-Funktion \u00fcbergeben oder etwas anderes, erfolgt eine der beiden oben gezeigten Ausgaben. </p> <p>Sie k\u00f6nnen selbst entscheiden, ob Sie <code>.then()</code>-Verkettungen verwenden wollen oder <code>async/ await</code>. Letzteres ist etwas moderner. </p>"},{"location":"promises/","title":"Callbacks und Promises","text":"<p>Manche Konzepte sind in JavaScript bzw. TypeScript f\u00fcr Java-Programmiererinnen zun\u00e4chst ungew\u00f6hnlich. Dazu geh\u00f6ren Callbacks und Promises. Diese Konzepte werden hier etwas n\u00e4her beleuchtet. </p>"},{"location":"promises/#callbacks","title":"Callbacks","text":"<p>Zun\u00e4chst einmal sind Callbacks Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden. Wir betrachten folgendes Beispiel:</p> <pre><code>let x = function () {\nconsole.log (\"Ausgabe der Funktion x\");\n}\n\nlet y = function () {\nconsole.log (\"Ausgabe der Funktion y\");\n}\n\nlet z = function (callback) {\nconsole.log(\"Ausgabe der Funktion z - vor Aufruf von callback\");\ncallback();\nconsole.log(\"Ausgabe der Funktion z - vor Aufruf von callback\");\n}\n</code></pre> <p>Wir haben drei Funktionen. Diese werden als anonyme Funktionen definiert, aber die Funktionsdefinitionen werden sofort einer Variablen zugewiesen. Das bedeutet, dass z.B. der Wert der Variablen <code>x</code> die Funktionsdefinition  <pre><code>function () {\nconsole.log (\"Ausgabe der Funktion x\");\n}\n</code></pre> ist. Wenn wir nun z.B. <code>console.log(x)</code> aufrufen, dann erhalten wir folgende Ausgabe auf der Konsole: <pre><code>\u0192 () {\nconsole.log (\"Ausgabe der Funktion x\");\n}\n</code></pre> Wenn wir aber <code>x();</code>, also sozusagen, die Variable als Funktion aufrufen, dann wird die Funktion ausgef\u00fchrt und wir erhalten auf der Konsole die Ausgabe <pre><code>Ausgabe der Funktion x\n</code></pre></p> <p>Wenn wir nun <code>z(x);</code> aufrufen, dann wird die in den Zeilen <code>9-12</code> definierte Funktion aufgerufen, wobei der Parameter <code>callback</code> als Wert die Funktionsdefinition von <code>x</code> \u00fcbergeben wird. In Zeile <code>11</code> erfolgt dann mithilfe von <code>callback();</code> eigentlich der Aufruf <code>x();</code>. </p> <p>Wir k\u00f6nnen aber auch z.B. <code>z(y);</code> aufrufen. Dann wird <code>z</code> nicht die Funktion <code>x</code>, sondern die Funktion <code>y</code> \u00fcbergeben und der Aufruf <code>callback();</code> in Zeile <code>11</code> entspricht somit dem Aufruf <code>y();</code>. </p> <p>Ein gro\u00dfer Vorteil dieser Callbacks  bestehen darin, dass der Aufruf asynchron erfolgt. Schauen wir uns z.B. einmal an, wie die m\u00f6gliche Ausgabe der Aufrufe  <pre><code>z(x);\nz(y);\n</code></pre> aussehen k\u00f6nnte: <pre><code>Ausgabe der Funktion z - vor Aufruf von callback\nAusgabe der Funktion x\nAusgabe der Funktion z - vor Aufruf von callback\nAusgabe der Funktion z - vor Aufruf von callback\nAusgabe der Funktion y\nAusgabe der Funktion z - vor Aufruf von callback\n</code></pre></p> <p>Wichtig ist, dass Callbacks die aufrufende Funktion nicht blockieren, sondern asynchron ausgef\u00fchrt werden. Dieses einfache Beispiel soll das demonstrieren: <pre><code>setTimeout( function() {\nconsole.log('Ausgabe A');\n}, 3000);\n\nconsole.log('Ausgabe B');\n</code></pre> Wir haben zwei Anweisungen: eine <code>setTimeout()</code>-Anweisung und eine <code>console.log('Ausgabe B');</code>-Anweisung, die nacheinander aufgerufen werden (<code>setTimeout()</code> vor <code>console.log()</code>). Innerhalb der <code>setTimeout()</code>-Anweisung wird eine Funktion als Callback \u00fcbergeben. Innerhalb dieser Funktion erfolgt der Aufruf von <code>console.log('Ausgabe A');</code>.</p> <p>Das Ausf\u00fchren des Programms ergibt folgende Ausgabe: <pre><code>Ausgabe B\nAusgabe A\n</code></pre></p> <p>Die Ausgabe von <code>Ausgabe A</code> erfolgt ca. 3 Sekunden nach <code>Ausgabe B</code>. Das liegt daran, dass die Callback-Funktion asynchron ausgef\u00fchrt wird und alle weiteren Ausf\u00fchrungen nicht blockiert. Das bedeutet, dass wir mithilfe von Callbacks eine asynchrone Ausf\u00fchrung unseres JavaScript-Codes erreichen. Der einzelne JavaScript-Thread wird also f\u00fcr den Aufruf der Callbacks verwendet und irgendwann sind diese Callback-Aufrufe beendet. Ein gegenseitiges Blockieren findet nicht statt, sondern es bleibt sogar noch Platz f\u00fcr weitere Aufrufe (hellgr\u00fcne Bereiche im folgenden Bild):</p> <p></p> <p>Das problem mit diesen Callback ist, dass sie sehr schnell sehr un\u00fcbersichtlich werden. Man spricht von der Callback-H\u00f6lle, in der man sehr schnell ist, sobald gen\u00fcgend viele Callbacks asynchron (nebenl\u00e4ufig) ausgef\u00fchrt werden, diese sogar ineinander verschachtelt sind (Callbacks in Callbacks) und man gar nicht wei\u00df, wann welche Callbacks beendet sind. Sobald man aber erst die Ausf\u00fchrung eines Callbacks abwarten muss, weil man die Resultate dieses Callbacks weiterverarbeiten m\u00f6chte, entstehen wieder synchrone Aufrufe und der Vorteil der asynchronen Abarbeitung ist dahin. Um dieses Problem zu l\u00f6sen, wurden Promises entwickelt. </p>"},{"location":"promises/#promises","title":"Promises","text":"<p>Ein Promise ist zun\u00e4chst einmal ein JavaScript-Objekt. Es enth\u00e4lt einerseits den Code zum Erzeugen eines Promise-Objektes (producing code) und anderseits auch den Code zum Verarbeiten eines solchen Promise-Objektes (consuming code). Dabei k\u00f6nnen zwei Sachen verarbeitet werden:</p> <ul> <li>entweder das <code>Promise</code>-Objekt wurde erfolgreich abgearbeitet (<code>resolve</code>) oder</li> <li>das <code>Promise</code>-Objekt wurde nicht erfolgreich abgearbeitet (<code>reject</code>). </li> </ul> <p>Die allgemeine Syntax eines solchen <code>Promise</code>-Objektes sieht so aus (siehe z.B. w3scool):</p> <pre><code>let myPromise = new Promise(function(myResolve, myReject) {\n// \"Producing Code\" (May take some time)\n\nmyResolve(); // when successful\nmyReject();  // when error\n});\n\n// \"Consuming Code\" (Must wait for a fulfilled Promise)\nmyPromise.then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);\n</code></pre> <p>Betrachten wir das obere Beispiel genauer:</p> <ul> <li>in Zeile <code>1</code> erstellen wir eine Variable <code>myPromise</code>, die wir nat\u00fcrlich nennen k\u00f6nnen, wie wir m\u00f6chten</li> <li>diese Variable zeigt auf ein <code>Promise</code>-Objekt, das ebenfalls in Zeile <code>1</code> mithilfe von <code>new</code> und dem Aufruf des Konstruktors erzeugt wird</li> <li>einem <code>Promise</code>-Objekt (dem Konstruktor) wird immer eine Funktion \u00fcbergeben, der wiederum zwei Callback-Funktionen als Parameter \u00fcbergeben werden</li> <li>die erste Callback-Funktion, die hier <code>myResolve</code> hei\u00dft (aber meistens nur <code>resolve</code>), wird aufgerufen, wenn das <code>Promise</code>-Objekt erfolgreich abgearbeitet wurde (Zeile <code>4</code>)</li> <li>die zweite Callback-Funktion, die hier <code>myReject</code> hei\u00dft (aber meistens nur <code>reject</code>), wird aufgerufen, wenn das <code>Promise</code>-Objekt nicht erfolgreich abgearbeitet wurde (Zeile <code>5</code>)</li> <li> <p>den Aufruf des <code>promise</code>-Objektes sehen wir in Zeile <code>9</code>. Ein <code>Promise</code>-Objekt durchl\u00e4uft durch den Aufruf 2 der folgenden 3 Zust\u00e4nde:</p> <ul> <li><code>pending</code>: das <code>Promise</code>-Objekt wird abgearbeitet und hat noch kein Resultat (<code>undefined</code>),</li> <li><code>fulfilled</code>: das <code>Promise</code>-Objekt wurde erfolgreich abgearbeitet und liefert den entsprechenden Resultatwert zur\u00fcck oder</li> <li><code>rejected</code>: das <code>Promise</code>-Objekt wurde nicht erfolgreich abgearbeitet und liefert ein <code>Error</code>-Objekt zur\u00fcck</li> </ul> </li> <li> <p>es gibt aber keine M\u00f6glichkeiten, auf diese Zust\u00e4nde eines <code>Promise</code>-Objektes zuzugreifen und auch nicht direkt auf den Resultatwert oder das Fehlerobjekt; stattdessen muss eine entsprechende Funktion des <code>Promise</code>-Objektes aufgerufen werden, die selbst wieder ein <code>Promise</code>-Objekt zur\u00fcckgibt, n\u00e4mlich <code>then()</code></p> </li> <li>der Aufruf von <code>then()</code> ist ebenfalls in Zeile <code>9</code> gezeigt; diese Funktion hat zwei Parameter: dem ersten Parameter wird der Resultatwert \u00fcbergeben (wenn das <code>Promise</code>-Objekt den <code>fulfilled</code>-Zustand erreicht hat) und dem zweiten Parameter wird das Fehlerobjekt \u00fcbergeben (wenn das <code>Promise</code>-Objekt den <code>rejected</code>-Zustand erreicht hat). Beide Parameter sind wiederum Callbacks.</li> </ul> <p>Wir werden sehen, dass wir den <code>rejected</code>-Zustand auch mit <code>catch()</code> abfangen k\u00f6nnen, aber dazu kommen wir sp\u00e4ter. Zun\u00e4chst noch einmal zur Vertiefung unser obiges Callback-Beispiel mit <code>setTimeout()</code> als Promise:</p> <pre><code>let promise = new Promise(function(resolve, reject) {\nsetTimeout( function() {\nresolve('resolve -- Ausgabe A');\n}, 3000);\n});\n\npromise.then(\nfunction(value) {\nconsole.log(value);\n}\n// (noch) keine Funktion f\u00fcr error\n);\n\nconsole.log('Ausgabe B');\n</code></pre> <p>Die Ausgabe in Zeile <code>14</code> hat nichts mit dem <code>Promise</code> zu tun, aber wir lassen sie mal im Code, um das gleiche Beispiel wie oben zu haben. Es erfolgt zun\u00e4chst die Ausgabe <code>Ausgabe B</code> auf der Konsole und 3 Sekunden sp\u00e4ter die Ausgabe <code>resolve -- Ausgabe A</code>. Rein funktional hat sich also nichts ge\u00e4ndert. Wie Sie den Parameter f\u00fcr den <code>resolve</code>-Fall (und dann auch f\u00fcr den <code>reject</code>-Fall) nennen, bleibt ganz Ihnen \u00fcberlassen; hier <code>value</code> (Zeile <code>8</code>).</p> <p>Dieses Mal hei\u00dft unser <code>Promise</code>-Objekt <code>promise</code> und die beiden Callback -Funktionen <code>resolve</code> und <code>reject</code> (Zeile <code>1</code>). Der producing code  enth\u00e4lt nur die Implementierung von <code>resolve</code>. In dem Beispiel gibt es also (noch) kein <code>reject</code>. In den Zeilen <code>7</code>-<code>12</code> sehen wir den consuming code der Promise, auch hier wieder nur f\u00fcr <code>resolve</code>. Es erfolgt die Ausgabe des Wertes, den <code>resolve</code> \u00fcbergeben hat. </p>"},{"location":"promises/#promises-in-arrow-notation","title":"Promises in Arrow-Notation","text":"<p>Weil wir es mitlerweile h\u00e4ufig sehen und weil wir uns auch angew\u00f6hnen wollen, diese selbst zu benutzen, hier das gleiche Beispiel nochmal in Arrow-Notation:</p> <pre><code>let promise = new Promise((resolve, reject) =&gt; {\nsetTimeout( () =&gt; {\nresolve('resolve -- Ausgabe A');\n}, 3000);\n});\n\npromise.then(\nvalue =&gt; {\nconsole.log(value);\n}\n// (noch) keine Funktion f\u00fcr error\n);\n\nconsole.log('Ausgabe B');\n</code></pre> <p>Es ist auch noch zu erw\u00e4hnen, dass Sie nur selten selbst Promises erstellen, sondern diese viel h\u00e4ufiger nutzen werden. Das hei\u00dft, Sie werden nicht so h\u00e4ufig producing code, sondern viel h\u00e4ufiger consuming code schreiben. Beispielsweise gibt die Registrierung eines service workers ein Promise zur\u00fcck:</p> <pre><code>// scope defaults to the path the script sits in\n// \"/\" in this example\nnavigator.serviceWorker.register(\"/serviceworker.js\").then(registration =&gt; {\nconsole.log(\"success!\");\nif (registration.installing) {\nregistration.installing.postMessage(\"Howdy from your installing page.\");\n}\n}, err =&gt; {\nconsole.error(\"Installing the worker failed!\", err);\n});\n</code></pre> <p>Ein gro\u00dfer Vorteil von Promises ist, dass Sie die Verarbeitung verketten k\u00f6nnen. Die <code>then()</code>-Funktion liefert selbst wieder ein <code>Promise</code> zur\u00fcck, so dass Sie erneut dieses <code>Promise</code> mit <code>then()</code> behandeln k\u00f6nnen. Wir kommen darauf in den Anwendungen nochmal zur\u00fcck. </p>"},{"location":"promises/#der-reject-fall","title":"Der <code>reject</code>-Fall","text":"<p>Wir schauen uns jetzt an, wie wir den Fall am besten behandeln, wenn das <code>Promise</code> nicht in den <code>fulfilled</code>, sondern in den <code>rejected</code>-Zustand \u00fcbergeht, wenn also nicht <code>resolve</code>, sondern <code>reject</code> ausgef\u00fchrt wird. Wir \u00e4ndern unser Beispiel einmal entsprechend:</p> <pre><code>let promise = new Promise((resolve, reject) =&gt; {\nsetTimeout( () =&gt; {\n// resolve('resolve -- Ausgabe A');\nreject({code: 500, message: 'An error occurred'});\n}, 3000);\n});\n\npromise.then(\nvalue =&gt; {\nconsole.log(value);\n}\n// (noch) keine Funktion f\u00fcr error\n);\n\nconsole.log('Ausgabe B');\n</code></pre> <p>Wir haben also Zeile <code>3</code> auskommentiert (<code>resolve</code>) und stattdessen <code>reject</code> eingef\u00fcgt (Zeile <code>4</code>). Im Gegensatz zu <code>resolve</code> geben wir jetzt mal keinen einfachen <code>string</code>, sondern ein JavaScript-Objekt zur\u00fcck (erkennbar an <code>{ }</code>). Wir sind darin v\u00f6llig frei, was zur\u00fcckgegeben wird, aber es bietet sich an, ein Error-Objekt zu erzeugen. Die <code>then()</code>-Behandlung des <code>Promise</code>-Objekt lassen wir zun\u00e4chst unver\u00e4ndert (Zeilen <code>8-13</code>). </p> <p>Wenn wir diesen Code ausf\u00fchren, dann wird erneut <code>Ausgabe B</code> ausgegeben (Zeile <code>15</code> - hat nichts mit dem <code>Promise</code> zu tun), aber nach 3 Sekunden erfolgt keine Ausgabe auf der Konsole, sondern stattdessen erscheint auf der Konsole: </p>"},{"location":"promises/#error-behandlung-in-der-then-funktion","title":"Error-Behandlung in der <code>then()</code>-Funktion","text":"<p>Wir behandeln den geworfenen Fehler nicht, da wir in unserer <code>then()</code>-Behandlung bis jetzt nur den <code>resolve</code>-Fall behandeln (Zeilen <code>9-11</code>). Das \u00e4ndern wir nun:</p> <pre><code>let promise = new Promise((resolve, reject) =&gt; {\nsetTimeout( () =&gt; {\n// resolve('resolve -- Ausgabe A');\nreject({code: 500, message: 'An error occurred'});\n}, 3000);\n});\n\npromise.then(\nvalue =&gt; {\nconsole.log(value);\n},\nerr =&gt; {\nconsole.log(err.code, err.message);\n}\n);\n\nconsole.log('Ausgabe B');\n</code></pre> <p>In den Zeilen <code>12-14</code> wurde die Behandlung des Fehlerfalls hinzugef\u00fcgt (beachten Sie auch das zus\u00e4tzliche Komma in Zeile <code>11</code>). Wie Sie die Variable <code>err</code> nennen, bleibt Ihnen \u00fcberlassen. Sie bekommt den Wert, den das <code>Promise</code> f\u00fcr den <code>reject</code>-Fall \u00fcbergibt, in unserem Beispiel also ein JavaScript-Objekt:</p> <pre><code>{\ncode: 500, message: 'An error occurred'\n}\n</code></pre> <p>weil wir das in Zeile <code>4</code> so definiert haben. Wir greifen also auf die Werte der Schl\u00fcssel <code>code</code> und <code>message</code> zu und lassen diese auf die Konsole ausgeben (Zeile <code>13</code>). Auf der Konsole erscheint 3 Sekunden nach der Ausgabe <code>Ausgabe B</code> die Ausgabe <code>500 An error occurred</code>. </p>"},{"location":"promises/#error-behandlung-im-catch-block","title":"Error-Behandlung im <code>catch()</code>-Block","text":"<p>Es ist ungew\u00f6hnlich, den Fehlerfall in der <code>then()</code>-Funktion zu behandeln, obwohl es, wie wir gesehen haben, m\u00f6glich ist. Stattdessen verwendet man f\u00fcr den Fehlerfall besser <code>catch()</code>:</p> <pre><code>let promise = new Promise((resolve, reject) =&gt; {\nsetTimeout( () =&gt; {\n// resolve('resolve -- Ausgabe A');\nreject({code: 500, message: 'An error occurred'});\n}, 3000);\n});\n\npromise\n.then(\nvalue =&gt; {\nconsole.log(value);\n}\n)\n.catch(\nerr =&gt; {\nconsole.log(err.code, err.message);\n}\n);\nconsole.log('Ausgabe B');\n</code></pre>"},{"location":"promises/#asyncawait","title":"async/await","text":"<p>Die Verkettung von <code>.then()</code>-Pfaden kann zu un\u00fcbersichtlichem Code f\u00fchren. Deshalb wurden die Schl\u00fcsselw\u00f6rter <code>async</code> und <code>await</code> eingef\u00fchrt (siehe z.B. hier, hier, hier oder hier).</p> <p>Wir betrachten ein Beispiel, das wir zun\u00e4chst mit <code>.then()</code>-Verkettung anwenden und danach mit <code>async/await</code>. gegeben sind die beiden folgenden JavaScript-Funktionen:</p> <pre><code>function makeRequest(file) {\nreturn new Promise( (resolve, reject) =&gt; {\nconsole.log('making request for ' + file);\nif(file == 'index.html') {\nresolve('index.html exists')\n} else {\nreject(file + ' does not exist')\n}\n});\n}\n\nfunction processRequest(response) {\nreturn new Promise( (resolve, request) =&gt; {\nconsole.log('processing response');\nresolve('processing done for ' + response)\n})\n}\n</code></pre> <p>Die Anwendung dieser Funktionen k\u00f6nnte wie folgt aussehen: </p> <pre><code>makeRequest('index.html')               // resolve-Fall\n.then( response =&gt; {\nconsole.log('response received');\nconsole.log(response)\nreturn processRequest(response)\n})\n.then( processedResponse =&gt; {\nconsole.log(processedResponse)\n})\n.catch( error =&gt; console.log(error))\n</code></pre> <p>erzeugt folgende Ausgabe:</p> <pre><code>making request for index.html\nresponse received\nindex.html exists\nprocessing response\nprocessing done for index.html exists\n</code></pre> <p>bzw., wenn der \u00fcbergebene Dateiname nicht <code>index.html</code> entspricht:</p> <pre><code>makeRequest('index1.html')               // jectect-Fall\n.then( response =&gt; {\nconsole.log('response received');\nconsole.log(response)\nreturn processRequest(response)\n})\n.then( processedResponse =&gt; {\nconsole.log(processedResponse)\n})\n.catch( error =&gt; console.log(error))\n</code></pre> <p>erzeugt folgende Ausgabe:</p> <pre><code>making request for index1.html\nindex1.html does not exist\n</code></pre> <p>Dem Aufruf von <code>makeRequest()</code> (und auch dem von <code>processRequest()</code>) k\u00f6nnten wir jedoch auch das Schl\u00fcsselwort <code>await</code> voranstellen. Dabei ist jedoch zu beachten, dass Aufrufe von <code>await</code> nur in als <code>async</code> deklarierten Funktionen erfolgen kann. Wir bauen deshalb obige Aufrufe in einer JavaScript-Funktion nach:</p> <pre><code>async function testPromises() {\ntry {\nlet response = await makeRequest('index1.html');        // reject-Fall\nconsole.log('response received');\nlet processedResponse = await processRequest(response);\nconsole.log(processedResponse);\n} catch(error) {\nconsole.log(error)\n}\n}\n</code></pre> <p>bzw. </p> <pre><code>async function testPromises() {\ntry {\nlet response = await makeRequest('index.html');        // resolve-Fall\nconsole.log('response received');\nlet processedResponse = await processRequest(response);\nconsole.log(processedResponse);\n} catch(error) {\nconsole.log(error)\n}\n}\n</code></pre> <p>Dies erzeugt jeweils die gleichen Ausgaben wie oben gezeigt. </p>"},{"location":"routing/","title":"Routing und Services","text":""},{"location":"routing/#single-vs-multi-page-applikationen","title":"Single- vs. Multi-Page-Applikationen","text":"<p>Wenn wir durch z.B. dieses Skript hangeln oder Wikipedia, dann stellen wir fest, dass sich nach jedem Klick auf einen Link eine neue HTML-Seite \u00f6ffnet. Das wird insbesondere deutlich wenn die Entwicklungstools ge\u00f6ffnet sind. Jeder Klick auf einen Hyperlink erwirkt eine neue Anfrage an einen Webserver mit dem Request, eine neue HTML-Seite von diesem Webserver zu laden und im Browser zu \u00f6ffnen. Es handelt sich dabei also um eine Webanwendung mit vielen (Unter-)Seiten, eine sogenannte Multi-Page-Applikation (MPA). </p> <p>Wenn wir stattdessen z.B. die Angular-Seite <code>https://angular.io</code> \u00f6ffnen und uns die Developertools anschauen, dann stellen wir fest, dass kaum HTML-Code im <code>&lt;body&gt;</code>-Element enthalten ist. Stattdessen wird der gesamte HTML-Code per JavaScript im Browser eingebunden. Damit werden Inhalte in die Seite immer genau dann eingebunden, wenn sie angezeigt werden sollen. Um zwischen einzelnen Ansichten der Webanwendung zu wechseln, wird keine neue Webseite vom Webserver geholt. Stattdessen bleiben wir stets in derselben HTML-Seite (Single-Page-Applikation (SPA)), was sehr gut sichtbar wird, wenn wir die Developertools eingeschaltet lassen und innerhalb der Webanwendung umhernavigieren. Stattdessen werden nur Inhalte (\u00fcber eine REST-API) vom Server geladen. </p> <p>Das Hyperlink-Konzept bei Single-Page-Applikationen ist also ein anderes, als bei Multi-Page-Applikationen. W\u00e4hrend in MPAs Hyperlinks verwendet werden, sprechen wir bei SPAs von Routen. Das dazugeh\u00f6rige Konzept hei\u00dft Routing. </p>"},{"location":"routing/#aktivieren-von-routing","title":"Aktivieren von Routing","text":"<p>Die einfachste Methode, das Routing f\u00fcr ein Angular-Projekt zu aktivieren, besteht darin, das Projekt mithilfe von </p> <pre><code>ng new projektName\n</code></pre> <p>zu erzeugen und auf die Frage:</p> <pre><code>? Would you like to add Angular routing? (y/N)\n</code></pre> <p>durch die Eingabe eines <code>y</code> zu antworten. Sie m\u00fcssen explizit <code>y</code> eingeben, da die Standardantwort <code>N</code>, also <code>no</code> ist. Wenn Sie die Frage mit <code>yes</code> beantwortet haben, dann wird das neue Projekt mit der Datei <code>app-routing.module.ts</code> im Ordner <code>src/app</code> erzeugt. Sollte Ihnen diese Datei fehlen, dann k\u00f6nnen Sie nachtr\u00e4glich das Routing zu einem existierenden Projekt hinzuf\u00fcgen. </p> <p>Sie k\u00f6nnen gleich bei Erstellung des Projektes angeben, dass Routing erw\u00fcnscht ist, indem Sie </p> <pre><code>ng new projektName --routing\n</code></pre> <p>eingeben. Dann werden Sie gar nicht mehr nach Routing gefragt, sondern dieses wird sofort mitinstalliert. </p> <p>Sollten Sie keine Datei <code>app-routing.module.ts</code> im <code>src/app</code>-Ordner haben, dann k\u00f6nnen Sie das Routing auch noch nachtr\u00e4g\u00f6ich aktivieren, indem Sie in Ihrem Projektordner</p> <pre><code>ng generate module app-routing --flat --module=app\n</code></pre> <p>ausf\u00fchren. Dann entsteht eine solche Datei und das <code>AppRoutingModule</code> wird in der <code>app.module.ts</code> importiert: </p> app.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n@NgModule({\ndeclarations: [\nAppComponent\n],\nimports: [\nBrowserModule,\nAppRoutingModule\n],\nproviders: [],\nbootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>Die Datei <code>app-routing.module.ts</code> sieht zun\u00e4chst so aus (wenn Routing \u00fcber die CLI mit dem Befehl <code>ng generate module app-routing --flat --module=app</code> aktiviert wurde):</p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\ndeclarations: [],\nimports: [\nCommonModule\n]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Wir passen diese Datei zun\u00e4chst wie folgt an:</p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nconst routes: Routes = [];\n@NgModule({\ndeclarations: [],\nimports: [\nRouterModule.forRoot(routes)\n],\nexports: [RouterModule],\nproviders: []\n})\nexport class AppRoutingModule { }\n</code></pre> <p>In das <code>routes</code>-Array werden wir im Folgenden unsere Routen eintragen. </p>"},{"location":"routing/#erste-einfache-routen","title":"Erste einfache Routen","text":"<p>Um das Routing auszuprobieren, ben\u00f6tigen wir zun\u00e4chst ein paar Komponenten, zwischen denen wir wechseln k\u00f6nnen. Deshalb erstellen wir uns folgende Komponenten:</p> <pre><code>ng g c nav\nng g c home\nng g c login\nng g c about\nng g c footer\n</code></pre> <p>Au\u00dferdem f\u00fcgen wir unserem Projekt noch Bootstrap hinzu, damit wir ein besseres Design erzielen (hat aber nichts mit Routing zu tun):</p> <pre><code>ng add @ng-bootstrap/ng-bootstrap\n</code></pre> <p>Sollten Sie beim Hinzuf\u00fcgen von Bootstrap einen <code>not compatible</code>-Fehler bekommen, dann versuchen Sie <code>npm install @ng-bootstrap/ng-bootstrap@bootstrap5</code>. Nach dem Hinzuf\u00fcgen von Bootstrap sollten Sie nochmals <code>npm install</code> ausf\u00fchren, um das Bootstrap-Modul auch tats\u00e4chlich zu installieren. </p> <p>Die Komponenten k\u00f6nnen Sie wie folgt implementieren: </p> nav.component.htmlfooter.component.htmlhome.component.htmlhome.component.cssabout.component.htmlabout.component.csslogin.component.htmllogin.component.css <pre><code>&lt;nav class=\"sticky-top navbar navbar-expand-lg navbar-light bg-light\"&gt;\n    &lt;div class=\"container-fluid\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"#\"&gt;Webtech&lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n    &lt;/button&gt;\n        &lt;div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"&gt;\n            &lt;div class=\"navbar-nav\"&gt;\n                &lt;a class=\"nav-link\" href=\"#\"&gt;Home&lt;/a&gt;\n                &lt;a class=\"nav-link\" href=\"#\"&gt;Login&lt;/a&gt;\n                &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre> <pre><code>&lt;div class=\"fixed-bottom text-white-50 bg-dark p-3 text-center\"&gt;\n    Routing\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;main class=\"d-flex align-items-center min-vh-100\"&gt;\n    &lt;div class=\"container text-center\"&gt;\n        Welcome home!\n    &lt;/div&gt;\n&lt;/main&gt;\n</code></pre> <pre><code>main {\nbackground-color: grey;\n}\n</code></pre> <pre><code>&lt;main class=\"d-flex align-items-center min-vh-100\"&gt;\n    &lt;div class=\"container text-center\"&gt;\n        Everything about me...\n    &lt;/div&gt;\n&lt;/main&gt;\n</code></pre> <pre><code>main {\nbackground-color: rgb(95, 4, 4);\ncolor: lightgrey;\n}\n</code></pre> <pre><code>&lt;main class=\"d-flex align-items-center min-vh-100\"&gt;\n    &lt;fieldset class=\"container col-4 col-offset-4\"&gt;\n        &lt;legend&gt;Login&lt;/legend&gt;\n        &lt;form&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" id=\"login1\" placeholder=\"username\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;input type=\"password\" class=\"form-control\" id=\"login2\" placeholder=\"password\"&gt;\n            &lt;/div&gt;\n            &lt;button type=\"submit\" class=\"btn btn-secondary\"&gt;Login&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/fieldset&gt;\n&lt;/main&gt;\n</code></pre> <pre><code>main {\nbackground-color: rgb(164, 201, 243);\n}\n</code></pre> <p>Die <code>app.component.html</code> sieht nun wie folgt aus:</p> app.component.html <pre><code>&lt;app-nav&gt;&lt;/app-nav&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;app-footer&gt;&lt;/app-footer&gt;\n</code></pre> <p>Diese ist so gestaltet, dass oben die <code>nav</code>-Komponente und unten die <code>footer</code>-Komponente  eingebunden wird. Dazwischen steht jedoch der Komponentenselektor <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. An dessen Stelle wird nun jeweils die Komponente eingesetzt, die wir durch das Routing ausgew\u00e4hlt haben. Dies erledigen wir in den folgenden beiden Schritten.</p>"},{"location":"routing/#routen-definieren","title":"Routen definieren","text":"<p>Zun\u00e4chst definieren wir die Routen und zu jeder Route, welche Komponente daf\u00fcr eingebunden wird. Die Routendefinitionen erfolgen in der <code>app-routing.module.ts</code> und dort im <code>routes</code>-Array. Dazu wird das <code>routes</code>-Array mit Objekten bef\u00fcllt, die jeweils einen <code>path</code>-Eintrag und einen <code>component</code>-Eintrag erhalten. Ein solches Objekt legt fest, f\u00fcr welchen Pfad welche Komponente aufgerufen wird. </p> app-routing.module.ts <pre><code>import { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { AboutComponent } from './about/about.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n{\npath: \"about\",\ncomponent: AboutComponent\n},\n{\npath: \"login\",\ncomponent: LoginComponent\n},\n{\npath: \"home\",\ncomponent: HomeComponent\n}\n];\n\n@NgModule({\ndeclarations: [],\nimports: [\nRouterModule.forRoot(routes)\n],\nexports: [RouterModule],\nproviders: []\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Testen Sie nun die URLs</p> <pre><code>http://localhost:4200/about\nhttp://localhost:4200/home\nhttp://localhost:4200/login\n</code></pre> <p>und Sie sehen jeweils, dass die f\u00fcr die jeweilige Route angegebene Komponente eingebunden wird. Der <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>-Selektor wird also dynamisch bef\u00fcllt, je nachdem welche Route aufgerufen wird. </p> <p>Eine Sache ist jetzt jedoch ncoh nicht optimal. Erstens ist ganz am Anfang, also f\u00fcr <code>http://localhost:4200</code> gar keine Komponente eingebunden und zweitens soll unsere <code>home</code>-Komponente gar nicht unter einer extra Route (<code>http://localhost:4200/home</code>), sondern tats\u00e4chlich bereits unter <code>http://localhost:4200</code>  aufgerufen werden. Wir passen deshalb das <code>routes</code>-Array entsprechend an:</p> app-routing.module.ts <pre><code>import { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { AboutComponent } from './about/about.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n{\npath: \"\",\ncomponent: HomeComponent,\npathMatch: 'full'\n},\n{\npath: \"about\",\ncomponent: AboutComponent\n},\n{\npath: \"login\",\ncomponent: LoginComponent\n}\n];\n\n@NgModule({\ndeclarations: [],\nimports: [\nRouterModule.forRoot(routes)\n],\nexports: [RouterModule],\nproviders: []\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Die neuhinzugef\u00fcgte Eigenschaft <code>pathMatch: 'full'</code> gibt an, dass diese Route nur aufgerufen wird, wenn danach nichts weiter in der URL folgt. Die Auswahl der Routen erfolgt nach dem first-match-Prinzip. Das hei\u00dft, dass f\u00fcr die angegebene URL die erste Route ausgew\u00e4hlt wird, die \"passt\". Mit <code>pathMatch: 'full'</code> geben wir an, dass die Route zwar passen muss, aber nicht nur ein Pr\u00e4fix einer l\u00e4ngeren Route sein darf. Nun funktionieren die Routen wie gew\u00fcnscht:</p> <pre><code>http://localhost:4200\nhttp://localhost:4200/about\nhttp://localhost:4200/login\n</code></pre> <p>F\u00fcr die erste URL wird die <code>home</code>-Komponente eingebunden, bei der zweiten die <code>about</code>-Komponente und bei der dritten die <code>login</code>-Komponente. Nun m\u00fcssen wir noch organisieren, wie die Routen innerhalb unserer Anwendung aufgerufen werden k\u00f6nnen (und nicht nur durch Eingabe der jeweiligen URL).</p>"},{"location":"routing/#routen-aufrufen","title":"Routen aufrufen","text":"<p>Wir wollen die Routen durch Mausklick aufrufen. Daf\u00fcr bietet sich unser Navigationsmen\u00fc an. Routen werden nicht per <code>href</code>-Attribut aufgerufen, sondern per <code>routerLink</code>. Wir passen dazu unsere <code>nav</code>-Komponente an:</p> nav.component.html <pre><code>&lt;nav class=\"sticky-top navbar navbar-expand-lg navbar-light bg-light\"&gt;\n    &lt;div class=\"container-fluid\"&gt;\n&lt;a class=\"navbar-brand\" routerLink=\"\"&gt;Webtech&lt;/a&gt;\n&lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n    &lt;/button&gt;\n        &lt;div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"&gt;\n            &lt;div class=\"navbar-nav\"&gt;\n&lt;a class=\"nav-link\" routerLink=\"\"&gt;Home&lt;/a&gt;\n&lt;a class=\"nav-link\" routerLink=\"login\"&gt;Login&lt;/a&gt;\n&lt;a class=\"nav-link\" routerLink=\"about\"&gt;About&lt;/a&gt;\n&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre> <p>Wir k\u00f6nnen das <code>routerLink</code>-Attribut auch unter Verwendung von Property Binding festlegen (dann kann Routing sp\u00e4ter sogar \u00fcber Variablen erfolgen). Wenn Sie beim Property Binding den Wert als <code>String</code> festlegeen, dann muss dieser <code>String</code> in eigenen Hochkomma in den Wert des Property Binding geschrieben werden, also z.B. so:</p> <pre><code>[routerLink]=\"'login'\"\n[routerLink]=\"'about'\"\n[routerLink]=\"''\"\n</code></pre> <p>Angenommen, Sie definieren sich noch eine eigene CSS-Klasse, in der sie festlegen, dass die Men\u00fceintr\u00e4ge anders aussehen, wenn sie der aktuellen Route entsprechen, wenn also z.B. <code>Login</code> im Men\u00fc fett erscheint, sobald <code>http://localhost:4200/login</code> ausgew\u00e4hlt wurde. Die CSS-Definition k\u00f6nnte dann so aussehen:</p> <pre><code>.myactive {\nfont-weight: bold;\n}\n</code></pre> <p>Das hei\u00dft, Sie haben eine CSS-Klasse <code>myactive</code> definiert. Diese Klasse kann aktiviert werden, wenn die Route aktiv ist. Dazu verwenden Sie das Attribut <code>routerLinkActive</code> und weisen diesem Attribut den Wert <code>\"myactive\"</code> zu. Das Men\u00fc s\u00e4he dann so aus:</p> <pre><code>&lt;div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"&gt;\n    &lt;div class=\"navbar-nav\"&gt;\n        &lt;a class=\"nav-link\" [routerLink]=\"''\" routerLinkActive=\"myactive\"&gt;Home&lt;/a&gt;\n        &lt;a class=\"nav-link\" [routerLink]=\"'login'\" routerLinkActive=\"myactive\"&gt;Login&lt;/a&gt;\n        &lt;a class=\"nav-link\" [routerLink]=\"'about'\" routerLinkActive=\"myactive\"&gt;About&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Wenn Sie Bootstrap verwenden, dann ist <code>routerLinkActive</code> nur f\u00fcr eigene CSS-Klassen notwendig (so wie im Beispiel <code>myactive</code>). Die Bootstrap-Klasse <code>active</code> wird automatisch aktiviert, wenn die Route aktiv ist. </p>"},{"location":"routing/#routenparameter","title":"Routenparameter","text":"<p>H\u00e4ufig sollen aus einer Liste von Objekten ein einzelnes Objekt ausgew\u00e4hlt und dargestellt werden. Angenommen, wir wollen erneut die <code>staedte.json</code> aus JSON und Direktiven verwenden. Wir einfachen es diesmal ein wenig und verwenden direkt das Array und beschreiben die JavaScript-Objekte nicht in JSON, sondern direkt als Objekte (der Unterschied besteht darin, dass die Schl\u00fcssel nicht in Anf\u00fchrungsstrichen stehen).</p> staedte als Array <pre><code>[\n{\nid: 1,\njahr: 1237,\nstadt: \"Berlin\",\nlink: \"http://de.wikipedia.org/wiki/Berlin\",\nbild: \"assets/images/berlin.png\"\n},\n{\nid: 2,\njahr: 1624,\nstadt: \"New York\",\nlink: \"http://de.wikipedia.org/wiki/New_York_City\",\nbild: \"assets/images/newyork.png\"\n},\n{\nid: 3,\njahr: 1252,\nstadt: \"Stockholm\",\nlink: \"http://de.wikipedia.org/wiki/Stockholm\",\nbild: \"assets/images/stockholm.png\"\n},\n{\nid: 4,\njahr: 1827,\nstadt: \"Bremerhaven\",\nlink: \"http://de.wikipedia.org/wiki/Bremerhaven\",\nbild: \"assets/images/bremerhaven.png\"\n},\n{\nid: 5,\njahr: 150,\nstadt: \"Bremen\",\nlink: \"http://de.wikipedia.org/wiki/Bremen\",\nbild: \"assets/images/bremen.png\"\n},\n{\nid: 6,\njahr: 1202,\nstadt: \"Bernau\",\nlink: \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\",\nbild: \"assets/images/bernau.png\"\n},\n{\nid: 7,\njahr: 929,\nstadt: \"Brandenburg\",\nlink: \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\",\nbild: \"assets/images/brandenburg.png\"\n},\n{\nid: 8,\njahr: 805,\nstadt: \"Magdeburg\",\nlink: \"http://de.wikipedia.org/wiki/Magdeburg\",\nbild: \"assets/images/magdeburg.png\"\n},\n{\nid: 9,\njahr: 1222,\nstadt: \"Marburg\",\nlink: \"http://de.wikipedia.org/wiki/Marburg\",\nbild: \"assets/images/marburg.png\"\n},\n{\nid: 10,\njahr: 766,\nstadt: \"Mannheim\",\nlink: \"http://de.wikipedia.org/wiki/Mannheim\",\nbild: \"assets/images/mannheim.png\"\n},\n{\nid: 11,\njahr: 782,\nstadt: \"Mainz\",\nlink: \"http://de.wikipedia.org/wiki/Mainz\",\nbild: \"assets/images/mainz.png\"\n}\n]\n</code></pre> <p>sowie den Ordner images und greifen \u00fcber die Route auf ein einzelnes Objekt zu. Wenn wir also z.B. <code>http://localhost:4200/cities/0</code> eingeben, soll das <code>Berlin</code>-Objekt ausgew\u00e4hlt werden, bei <code>http://localhost:4200/cities/1</code> das <code>New York</code>-Objekt usw. </p> <p>Dazu erstellen wir uns zun\u00e4chst eine neue Componente <code>cities</code> mit <code>ng g c cities</code> und folgendem Code:</p> cities.component.htmlcities.component.tscities.component.cssapp-routing.module.ts <pre><code>&lt;div class=\"container\"&gt;\n    &lt;h1&gt;St\u00e4dte&lt;/h1&gt;\n\n\n    &lt;table class=\"table table-striped\"&gt;\n        &lt;caption&gt;Ausgew\u00e4hlte St\u00e4dte&lt;/caption&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th scope=\"col\"&gt;Nr&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Jahr&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Stadt&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Bild&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr *ngFor=\" let stadt of staedte; let i=index \"&gt;\n                &lt;td&gt;{{ i+1 }} &lt;/td&gt;\n                &lt;td&gt;{{ stadt.jahr }}&lt;/td&gt;\n                &lt;td&gt;{{ stadt.stadt }}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a [href]=\"stadt.link\"&gt;\n                        &lt;img [src]=\" stadt.bild \" [alt]=\"stadt.stadt \" /&gt;\n                    &lt;/a&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>import { Component, OnInit } from '@angular/core';\n\n@Component({\nselector: 'app-cities',\ntemplateUrl: './cities.component.html',\nstyleUrls: ['./cities.component.css']\n})\nexport class CitiesComponent implements OnInit {\nstaedte = [\n{\njahr: 1237,\nstadt: \"Berlin\",\nlink: \"http://de.wikipedia.org/wiki/Berlin\",\nbild: \"assets/images/berlin.png\"\n},\n{\njahr: 1624,\nstadt: \"New York\",\nlink: \"http://de.wikipedia.org/wiki/New_York_City\",\nbild: \"assets/images/newyork.png\"\n},\n{\njahr: 1252,\nstadt: \"Stockholm\",\nlink: \"http://de.wikipedia.org/wiki/Stockholm\",\nbild: \"assets/images/stockholm.png\"\n},\n{\njahr: 1827,\nstadt: \"Bremerhaven\",\nlink: \"http://de.wikipedia.org/wiki/Bremerhaven\",\nbild: \"assets/images/bremerhaven.png\"\n},\n{\njahr: 150,\nstadt: \"Bremen\",\nlink: \"http://de.wikipedia.org/wiki/Bremen\",\nbild: \"assets/images/bremen.png\"\n},\n{\njahr: 1202,\nstadt: \"Bernau\",\nlink: \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\",\nbild: \"assets/images/bernau.png\"\n},\n{\njahr: 929,\nstadt: \"Brandenburg\",\nlink: \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\",\nbild: \"assets/images/brandenburg.png\"\n},\n{\njahr: 805,\nstadt: \"Magdeburg\",\nlink: \"http://de.wikipedia.org/wiki/Magdeburg\",\nbild: \"assets/images/magdeburg.png\"\n},\n{\njahr: 1222,\nstadt: \"Marburg\",\nlink: \"http://de.wikipedia.org/wiki/Marburg\",\nbild: \"assets/images/marburg.png\"\n},\n{\njahr: 766,\nstadt: \"Mannheim\",\nlink: \"http://de.wikipedia.org/wiki/Mannheim\",\nbild: \"assets/images/mannheim.png\"\n},\n{\njahr: 782,\nstadt: \"Mainz\",\nlink: \"http://de.wikipedia.org/wiki/Mainz\",\nbild: \"assets/images/mainz.png\"\n}\n];\n\nconstructor() { }\n\nngOnInit(): void {\n}\n\n}\n</code></pre> <pre><code>td img {\nwidth: 10%;\n}\n</code></pre> <pre><code>import { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { AboutComponent } from './about/about.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CitiesComponent } from './cities/cities.component';\n\nconst routes: Routes = [\n{\npath: \"\",\ncomponent: HomeComponent,\npathMatch: 'full'\n},\n{\npath: \"about\",\ncomponent: AboutComponent\n},\n{\npath: \"login\",\ncomponent: LoginComponent\n},\n{\npath: \"cities\",\ncomponent: CitiesComponent\n}\n];\n\n@NgModule({\ndeclarations: [],\nimports: [\nRouterModule.forRoot(routes)\n],\nexports: [RouterModule],\nproviders: []\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Zun\u00e4chst lagern wir die Daten in einen Service aus.</p>"},{"location":"routing/#services","title":"Services","text":"<p>Ein Service ist eine Klasse f\u00fcr einen konkreten Zweck. Services unterscheiden sich von Komponenten dahingehend, dass</p> <ul> <li>eine Komponente f\u00fcr die Nutzerinteraktion zust\u00e4ndig ist, </li> <li>eine Komponente Eigenschaften (Daten) pr\u00e4sentiert, </li> <li>eine Komponente Methoden zur Datenbindung (data binding) zur Verf\u00fcgung stellt, um</li> <li>zwischen View und Anwendungslogik zu vermitteln.</li> </ul> <p>Ein Service</p> <ul> <li>erf\u00fcllt eine konkrete Aufgabe, typischerweise mit Daten, </li> <li>ohne sich um die Darstellung der Daten zu k\u00fcmmern.</li> <li>Typische Aufgaben eines Services sind: Daten vom Server holen oder auf den Server laden, Nutzereingaben zu validieren. </li> <li>Ein Service steht typischerweise allen Komponenten zur Verf\u00fcgung (aber nicht jede Komponente muss einen Service nutzen).</li> </ul> <p>Ein Service ist eine Klasse mit dem Decorator <code>@Injectable()</code>. Services enthalten Anwendungslogik, die aus Komponenten ausgelagert werden kann. Ein Service kann mittels CLI so erzeugt werden:</p> <pre><code>ng generate service nameDesServices\n</code></pre> <p>In dem Decorator <code>@Injectable()</code> wird mittels <code>providedIn: root</code> angegeben, dass der Service von allen Komponenten innerhalb des Root-Moduls genutzt werden kann. Ist der Service von anderen Services oder Komponenten abh\u00e4ngig, k\u00f6nnen diese Services oder Komponenten mittels dependency injection als Parameter des Service-Konstruktor eingebunden werden. Hier ein allgemeines Beispiel eines Services <code>MyService</code>:</p> my.service.ts <pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class MyService {\n\nconstructor(private myDependency: MyDependency) {\n}\n}\n</code></pre> <p>Der Service kann dann mittels dependency injection von einer Komponente verwendet werden. Beispiel:</p> example.component.ts <pre><code>import {Component, OnInit} from '@angular/core';\n\nimport {MyService} from './shared/my.service';\n\n@Component({\nselector: 'app-example',\ntemplateUrl: './example.component.html',\nstyleUrls: ['./example.component.css']\n})\nexport class ExampleComponent implements OnInit {\n\nconstructor(private myService: MyService) { }\n\nngOnInit(): void {\nthis.example.methodOfMyService();\n}\n\n}\n</code></pre> <p>F\u00fcr weiterf\u00fchrende Informationen siehe https://angular.io/guide/architecture-services.</p>"},{"location":"routing/#service-fur-das-routing-beispiel","title":"Service f\u00fcr das Routing-Beispiel","text":"<p>F\u00fcr unser Routing-Beispiel wollen wir Daten \u00fcber einen Service allen Komponenten zur Verf\u00fcgung stellen. Wir erstellen dazu einen Service <code>data</code> und dazu auch noch ein Interface <code>data</code>, das das Datenmodell f\u00fcr eine <code>Stadt</code> beschreibt. Beides erstellenb wir in einem <code>shared</code>-Ordner.</p> <p>Mit </p> <pre><code>ng g service shared/data\n</code></pre> <p>lassen wir die CLI den Service erstellen. Im Ordner <code>shared</code> entstehen zwei Dateien:</p> <ul> <li><code>data.service.ts</code> und </li> <li><code>data.service.spec.ts</code>.</li> </ul> <p>Letztere ist f\u00fcr Testzwecke und interessiert uns (derzeit noch) nicht. In diesen Service binden wir gleich unsere Daten ein und stellen eine Funktion zur Verf\u00fcgung, die uns alle Daten nach au\u00dfen zur Verf\u00fcgung stellt. Zun\u00e4chst erstellen wir noch, zur Gew\u00e4hrleistung der Typsicherheit, ein Interface f\u00fcr das Datenmodell:</p> <pre><code>ng g interface shared/data\n</code></pre> <p>Es entsteht eine Datei <code>data.ts</code> mit folgendem Inhalt:</p> shared/data.ts <pre><code>export interface Data {\n}\n</code></pre> <p>In dieses Interface tragen wir unser Datenmodell ein (wir erweitern unsere Daten um eine <code>id</code>, um diese nicht \"berechnen\" zu m\u00fcssen):</p> shared/data.ts <pre><code>export interface Data {\nid: number;\njahr: number;\nstadt: string;\nlink: string;\nbild: string;\n}\n</code></pre> <p>Dem <code>data</code>-Service f\u00fcgen wir nun das <code>staedte</code>-Array zu und importieren das Interface <code>Data</code>:</p> shared/data.service.ts <pre><code>import { Injectable } from '@angular/core';\nimport { Data } from './data';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class DataService {\ndata: Data[];\n\nconstructor() {\nthis.data = [\n{\nid: 1,\njahr: 1237,\nstadt: \"Berlin\",\nlink: \"http://de.wikipedia.org/wiki/Berlin\",\nbild: \"assets/images/berlin.png\"\n},\n{\nid: 2,\njahr: 1624,\nstadt: \"New York\",\nlink: \"http://de.wikipedia.org/wiki/New_York_City\",\nbild: \"assets/images/newyork.png\"\n},\n{\nid: 3,\njahr: 1252,\nstadt: \"Stockholm\",\nlink: \"http://de.wikipedia.org/wiki/Stockholm\",\nbild: \"assets/images/stockholm.png\"\n},\n{\nid: 4,\njahr: 1827,\nstadt: \"Bremerhaven\",\nlink: \"http://de.wikipedia.org/wiki/Bremerhaven\",\nbild: \"assets/images/bremerhaven.png\"\n},\n{\nid: 5,\njahr: 150,\nstadt: \"Bremen\",\nlink: \"http://de.wikipedia.org/wiki/Bremen\",\nbild: \"assets/images/bremen.png\"\n},\n{\nid: 6,\njahr: 1202,\nstadt: \"Bernau\",\nlink: \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\",\nbild: \"assets/images/bernau.png\"\n},\n{\nid: 7,\njahr: 929,\nstadt: \"Brandenburg\",\nlink: \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\",\nbild: \"assets/images/brandenburg.png\"\n},\n{\nid: 8,\njahr: 805,\nstadt: \"Magdeburg\",\nlink: \"http://de.wikipedia.org/wiki/Magdeburg\",\nbild: \"assets/images/magdeburg.png\"\n},\n{\nid: 9,\njahr: 1222,\nstadt: \"Marburg\",\nlink: \"http://de.wikipedia.org/wiki/Marburg\",\nbild: \"assets/images/marburg.png\"\n},\n{\nid: 10,\njahr: 766,\nstadt: \"Mannheim\",\nlink: \"http://de.wikipedia.org/wiki/Mannheim\",\nbild: \"assets/images/mannheim.png\"\n},\n{\nid: 11,\njahr: 782,\nstadt: \"Mainz\",\nlink: \"http://de.wikipedia.org/wiki/Mainz\",\nbild: \"assets/images/mainz.png\"\n}\n];\n}\n\ngetAll(): Data[] {\nreturn this.data;\n}\n}\n</code></pre> <p>Angenommen, die Datei <code>staedte.json</code> liegt im <code>assets</code>-Ordner, dann k\u00f6nnen Sie die Datei auch wie folgt einlesen (anstatt die Daten in den Service zu kopieren):</p> <pre><code>async getAll(): Promise&lt;Data[]&gt; {\nlet response = await fetch('./assets/staedte.json');\nlet staedteObj = await response.json();\n\nreturn staedteObj.staedte;\n}\n</code></pre> <p>Beachten Sie, dass Sie dann eine <code>Promise</code> zur\u00fcckgeben, d.h. den Aufruf von <code>getAll()</code> k\u00f6nnen Sie dann wieder <code>then()</code>-verketten (oder <code>await/async</code> verwenden). </p>"},{"location":"routing/#verwendung-des-services","title":"Verwendung des Services","text":"<p>Wir zeigen die Verwendung des Services zun\u00e4chst am Beispiel der <code>cities</code>-Komponente. Dort hatten wir bisher die Daten direkt gespeichert. Nun sollen sie dort \u00fcber den Service eingebunden werden. Dazu \u00e4ndern wir die <code>cities.component.ts</code> wie folgt:</p> cities.component.ts <pre><code>import { DataService } from './../shared/data.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Data } from '../shared/data';\n@Component({\nselector: 'app-cities',\ntemplateUrl: './cities.component.html',\nstyleUrls: ['./cities.component.css']\n})\nexport class CitiesComponent implements OnInit {\nstaedte: Data[];\nconstructor(private ds: DataService) {\nthis.staedte = this.ds.getAll();\n}\nngOnInit(): void {\n}\n\n}\n</code></pre> <p>Der Service wird per Dependency Injection eingebunden (Zeile <code>13</code>). Damit ist <code>ds</code> (die Referenz auf den Service) eine weitere Objekteigenschaft der <code>cities</code>-Komponent. Wir rufen die <code>getAll()</code>-Funktion des Services auf, die alle Daten des <code>staedte</code>-Arrays zur\u00fcckgibt und speichern diese in der <code>staedte</code>-Variablen (Zeile <code>14</code>). Diese ist vonm Typ <code>Data[]</code> (Zeile <code>11</code>). Um diesen Typ zu kennen, muss das Interface <code>Data</code> in die Komponente importiert werden (Zeile <code>3</code>). Unsere Anwendung funktioniert nun wieder exakt wie zuvor. </p>"},{"location":"routing/#weiter-mit-parametrisierten-routen","title":"Weiter mit parametrisierten Routen","text":"<p>Denselben Service wollen wir nun auch in der <code>city</code>-Komponente verwenden, in der wir eine einzelne Stadt nach ihrer <code>id</code> ausw\u00e4hlen und darstellen wollen. Dazu erweitern wir zun\u00e4chst den <code>data</code>-Service um eine Funktion, die uns ein einzelnes Stadt-Objekt f\u00fcr eine gegebene <code>id</code> zur\u00fcckgibt:</p> shared/data.service.ts <pre><code>import { Injectable } from '@angular/core';\nimport { Data } from './data';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class DataService {\ndata: Data[];\n\nconstructor() {\nthis.data = [ /* rausgekuerzt, muss aber bleiben! */  ];\n}\n\ngetAll(): Data[] {\nreturn this.data;\n}\n\ngetOne(id: number): Data {\nreturn this.data[id-1];\n}\n}\n</code></pre> <p>Diese Funktion ist sehr einfach gehalten. Angenommen, die <code>id=1</code> wird \u00fcbergeben, dann wird das erste Element (<code>index=0</code>) zur\u00fcckgegeben, also das <code>Berlin</code>-Objekt. Problem dieser Funktion ist, dass gar nicht \u00fcberpr\u00fcft wird, ob es sich bei <code>id-1</code> um einen korrekten Index aus dem Array handelt. Eine M\u00f6glichkeit, dieses Problem zu umgehen, w\u00e4re z.B. die Verwendung der Modulo-Funktion f\u00fcr die <code>id</code> \u00fcber die L\u00e4nge des Arrays, z.B. so:</p> <pre><code>  getOne(id: number): Data {\nlet index = id-1;\nindex = index % this.data.length;\nreturn this.data[index];\n}\n</code></pre> <p>Wir lassen die Funktion aber bewusst so, um zu zeigen, wie wir mit <code>undefined</code> Ergebnissen umgehen k\u00f6nnten. </p> <p>Die Tabelle, die wir in <code>cities.somponent.html</code> erzeugen, erweitern wir um eine Spalte, in der wir die Links auf die Detailseiten der jeweiligen Stadt hinterlegen:</p> cities.component.html <pre><code>&lt;div class=\"container\"&gt;\n    &lt;h1&gt;St\u00e4dte&lt;/h1&gt;\n\n    &lt;table class=\"table table-striped\"&gt;\n        &lt;caption&gt;Ausgew\u00e4hlte St\u00e4dte&lt;/caption&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th scope=\"col\"&gt;Nr&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Jahr&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Stadt&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Bild&lt;/th&gt;\n&lt;th scope=\"col\"&gt;&lt;/th&gt;\n&lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr *ngFor=\" let stadt of staedte; let i=index \"&gt;\n                &lt;td&gt;{{ i+1 }} &lt;/td&gt;\n                &lt;td&gt;{{ stadt.jahr }}&lt;/td&gt;\n                &lt;td&gt;{{ stadt.stadt }}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a [href]=\"stadt.link\"&gt;\n                        &lt;img [src]=\" stadt.bild \" [alt]=\"stadt.stadt \" /&gt;\n                    &lt;/a&gt;\n                &lt;/td&gt;\n&lt;td&gt;\n&lt;a [routerLink]=\"['/cities', (i+1)]\"&gt;Detail&lt;/a&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <p>Wir sehen darin, dass der Wert f\u00fcr <code>routerLink</code> auch ein Array sein kann, dessen erster Eintrag die Route und dessen zweiter Eintrag eine anschlie\u00dfende <code>/id</code> sein kann. Der so beschriebene Wert ergibt dann die Routen <code>/cites/1</code>, <code>/cities/2</code> usw. Es h\u00e4tte auch funktioniert, wenn wir <code>&lt;a [routerLink]=\"'/cities/'+(i+1)\"&gt;Detail&lt;/a&gt;</code> geschrieben h\u00e4tten. </p> <p>Wenn wir nun in der Tabelle auf <code>Detail</code> klicken (z.B. in der <code>Berlin</code>-Zeile), dann ist die Route <code>/cities/1</code>. In der <code>city</code>-Komponente wollen wir diese Zahl auslesen. Dazu erweiteren wir unser <code>routes</code>-Array in der <code>app-routing.module.ts</code>:</p> app-routing.module.ts <pre><code>import { CityComponent } from './cities/city/city.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { AboutComponent } from './about/about.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CitiesComponent } from './cities/cities.component';\n\nconst routes: Routes = [\n{\npath: \"\",\ncomponent: HomeComponent,\npathMatch: 'full'\n},\n{\npath: \"about\",\ncomponent: AboutComponent\n},\n{\npath: \"login\",\ncomponent: LoginComponent\n},\n{\npath: \"cities\",\ncomponent: CitiesComponent\n},\n{\npath: \"cities/:id\",\ncomponent: CityComponent\n}\n];\n\n@NgModule({\ndeclarations: [],\nimports: [\nRouterModule.forRoot(routes)\n],\nexports: [RouterModule],\nproviders: []\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Wir definieren darin, dass wir den Zahlenwert an der Route als <code>id</code> auslesen werden. Der Doppelpunkt <code>:</code> steht f\u00fcr eine parametrisierte Route. Der Name f\u00fcr <code>id</code> ist frei w\u00e4hlbar. Wir werden aber gleich sehen, wie dieser Name verwendet wird. Diesen Wert wollen wir nun in der <code>city</code>-Komponente auslesen, um zu erkennen, welche Stadt ausgew\u00e4hlt wurde. Dazu erweiteren wir die <code>city.component.ts</code>.</p> city.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Data } from 'src/app/shared/data';\nimport { DataService } from 'src/app/shared/data.service';\n@Component({\nselector: 'app-city',\ntemplateUrl: './city.component.html',\nstyleUrls: ['./city.component.css']\n})\nexport class CityComponent implements OnInit {\nid: number = 0;\nstadt!: Data;\nconstructor(private route: ActivatedRoute, private ds: DataService) { }\nngOnInit(): void {\nthis.id = Number(this.route.snapshot.paramMap.get('id'));\nthis.stadt = this.ds.getOne(this.id);\n}\n\n}\n</code></pre> <p>Erl\u00e4uterungen zum Code:</p> <ul> <li>In den Zeilen <code>2-4</code> werden das Modul <code>ActivatedRoute</code>, das Interface <code>Data</code> und der Service <code>DataService</code> importiert. <code>ActivatedRoute</code> ben\u00f6tigen wir zum Auslesen der aktiven Route, also insbesondere zum Auslesen der <code>id</code>, die an die Route geh\u00e4ngt ist. </li> <li>In Zeile <code>12</code> deklarieren wir uns eine Variable <code>id</code>, in der wir genau diese <code>id</code> der Route speichern wollen. </li> <li>In Zeile <code>13</code> deklarieren wir uns eine Variable <code>stadt</code>. Diese ist vom Typ <code>Data</code> (unserem Interface). Beachten Sie das <code>!</code> hinter dem Variablennamen. Hierbei handelt es sich um eine Assertion, also Zusicherung. Es handelt sich um den Non-null assertion operator. Damit wird dem TypeScript-Compiler mitgeteilt, dass er sich nicht darum k\u00fcmmern muss, ob der Wert dieser Variable <code>null</code> ist oder nicht. Tats\u00e4chlich werden wir sogar den Fall ber\u00fccksichtigen, dass der Wert <code>null</code> sein kann.</li> <li>In Zeile <code>14</code> wird sowohl der <code>DataService</code> als auch <code>ActivatedRoute</code> per dependency injection  eingebunden. Den <code>DataService</code> ben\u00f6tigen wir, um das entsprechende <code>stadt</code>-Objekt zu erhalten und <code>ActivatedRoute</code> wird ben\u00f6tigt, um die Zahl (<code>id</code>) zu ermitteln, die bei der aktuellen Route angegeben ist. </li> <li>In Zeile <code>18</code> wird genau diese Route ausgelesen. Insbesondere wird hier jetzt der Name verwendet, der in <code>app-routing.module.ts</code> f\u00fcr den Routen-Parameter vergeben wurde (also hier <code>id</code>). Dieser Wert wird als <code>string</code> zur\u00fcckgegeben. Er wird mit <code>Number</code> zu <code>number</code> konvertiert. Wichtig ist, dass <code>snapshot</code> genau einmal die Route ausliest (beim Initialisieren der Komponente), aber nicht st\u00e4ndig auf \u00c4nderungen der Route h\u00f6rt. </li> <li>In Zeile <code>19</code> wird die <code>id</code> verwendet, um der <code>getOne()</code>-Funktion des <code>DataService</code> \u00fcbergeben zu werden. Diese Funktion liefert die entsprechende <code>stadt</code> aus dem <code>staedte</code>-Array zur\u00fcck. </li> </ul>"},{"location":"routing/#verwenden-der-daten","title":"Verwenden der Daten","text":"<p>Wie die Werte der Daten nun in der <code>city.component.html</code> verwendet werden, bleibt nat\u00fcrlich Ihnen \u00fcberlassen. Wir zeigen hier die einfache Verwendung mithilfe einer Bootstrap-<code>card</code>:</p> city.component.html <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div *ngIf=\"stadt\" class=\"mt-5\"&gt;\n\n        &lt;div class=\"card m-4\" style=\"width: 30%\"&gt;\n            &lt;img class=\"card-img-top\" [src]=\"stadt.bild\" [alt]=\"stadt.stadt\"&gt;\n            &lt;div class=\"card-body\"&gt;\n                &lt;h4&gt;Willkommen in {{ stadt.stadt }} &lt;/h4&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;a class=\"btn btn-secondary m-4 px-4\" [routerLink]=\"'/cities'\"&gt;Zur\u00fcck zur Liste&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;div *ngIf=\"!stadt\"&gt;\n        &lt;h1&gt;Leider wurde keine Stadt gefunden&lt;/h1&gt;\n        &lt;a class=\"btn btn-secondary m-4 px-4\" [routerLink]=\"'/cities'\"&gt;Zur\u00fcck zur Liste&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Zwei Dinge sind zu beachten: </p> <ol> <li>Es wird unterschieden, ob die Variable <code>stadt</code> einen Wert hat (also auf ein Stadt-Objekt zeigt) oder nicht (also noch <code>undefined</code> ist). Letzteres kann dadurch entstehen, dass die <code>getOne()</code>-Funktion des <code>DataService</code> kein Objekt zur\u00fcckgeliefert hat, n\u00e4mlich dann, wenn die \u00fcbergebene <code>id</code> keinem <code>index</code> im Array entsprach (siehe obige Diskussion dieser Funktion). Sollte <code>stadt</code> noch <code>undefined</code> sein, dann wird <code>Leider wurde keine Stadt gefunden</code> angezeigt. </li> <li>Es wurde ein Anchorelement (<code>&lt;a&gt;</code>) eingef\u00fcgt, um wieder zur\u00fcck zur Liste zu gelangen. Hierbei ist zu erw\u00e4hnen, dass es wichtig ist, dass die Route <code>'/cities'</code> lautet und nicht nur <code>'cities'</code>. Im letzteren Fall w\u00fcrde <code>cities</code> einfach an die aktuelle Route angeh\u00e4ngt werden, also dann z.B. <code>/cities/1/cities</code> lauten. </li> </ol>"},{"location":"routing/#neuladen-bei-neuer-route","title":"Neuladen bei neuer Route","text":"<p>Angenommen, wir erweitern die <code>city.component.html</code> um zwei weitere Navigationsbuttons, um zwischen den einzelnen St\u00e4dten \"zu bl\u00e4ttern\":</p> city.component.html <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div *ngIf=\"stadt\" class=\"mt-5\"&gt;\n\n        &lt;div class=\"card m-4\" style=\"width: 30%\"&gt;\n            &lt;img class=\"card-img-top\" [src]=\"stadt.bild\" [alt]=\"stadt.stadt\"&gt;\n            &lt;div class=\"card-body\"&gt;\n                &lt;h4&gt;Willkommen in {{ stadt.stadt }} &lt;/h4&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;a class=\"btn btn-secondary m-4 px-4\" [routerLink]=\"['/cities', stadt.id-1]\"&gt; &amp;lt; &lt;/a&gt;\n&lt;a class=\"btn btn-secondary m-4 px-4\" [routerLink]=\"'/cities'\"&gt;Zur\u00fcck zur Liste&lt;/a&gt;\n&lt;a class=\"btn btn-secondary m-4 px-4\" [routerLink]=\"['/cities', stadt.id+1]\"&gt; &amp;gt; &lt;/a&gt;\n&lt;/div&gt;\n    &lt;div *ngIf=\"!stadt\"&gt;\n        &lt;h1&gt;Leider wurde keine Stadt gefunden&lt;/h1&gt;\n        &lt;a class=\"btn btn-secondary m-4 px-4\" [routerLink]=\"'/cities'\"&gt;Zur\u00fcck zur Liste&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Wenn wir nun auf einen solchen Navigationsbutton klicken, dann sehen wir, dass sich im URL-Fenster die Route \u00e4ndert. Jedoch erscheint keine neue Stadt. Das liegt daran, dass die Route nicht automatisch neu geladen wird, wenn sich die Route \u00e4ndert. Das liegt an der <code>RouteReuseStrategy</code> (siehe hier). Darin wird festgelegt, ob die aktivierte Route wiederverwendet werden soll (<code>true</code>) oder nicht (<code>false</code>). Im letzteren Fall wird die Komponente automatisch neu geladen, wenn die aktivierte Route sich \u00e4ndert. Wir \u00e4ndern entsprechend die <code>city.component.ts</code>:</p> city.component.ts <pre><code>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Data } from 'src/app/shared/data';\nimport { DataService } from 'src/app/shared/data.service';\n\n@Component({\nselector: 'app-city',\ntemplateUrl: './city.component.html',\nstyleUrls: ['./city.component.css']\n})\nexport class CityComponent implements OnInit {\nid: number = 0;\nstadt!: Data;\n\nconstructor(\nprivate route: ActivatedRoute,\nprivate ds: DataService,\nprivate router: Router\n) { }\n\nngOnInit(): void {\nthis.router.routeReuseStrategy.shouldReuseRoute = () =&gt; false;\nthis.id = Number(this.route.snapshot.paramMap.get('id'));\nthis.stadt = this.ds.getOne(this.id);\n}\n\n}\n</code></pre> <p>Die Notation <code>() =&gt; false</code> ist sicherlich ungew\u00f6hnlich. Dabei handelt es sich um eine Funktion in Arrow-Notation. </p>"},{"location":"routing/#arrow-funktionen","title":"Arrow-Funktionen","text":"<p>Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von <code>function()</code> schreibt man nur noch einen Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar <code>return</code> weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent:</p> <pre><code>function(foo) = {return foo+1;}\n(foo) =&gt; {return foo+1;}\nfoo =&gt; {return foo+1;}\nfoo =&gt; foo+1;\n</code></pre>"},{"location":"routing/#routen-absichern-mit-guards","title":"Routen absichern mit Guards","text":"<p>Guards sind Funktionen, die entscheiden, ob ein Navigationsschritt ausgef\u00fchrt werden darf oder nicht. Diese Entscheidung wird durch den R\u00fcckgabewert der Funktion ausgedr\u00fcckt. Es gibt drei verschiedene Varainten f\u00fcr den R\u00fcckgabewert: </p> <ul> <li><code>true</code>: der Navigationsschritt wird ausgef\u00fchrt, </li> <li><code>false</code>: der Navigationsschritt wird nicht ausgef\u00fchrt, </li> <li>R\u00fcckgabe vom Typ <code>URLTree</code>: die Navigation wird abgebrochen und eine Navigation zu einer anderen Route gestartet. </li> </ul> <p>Guards werden immer als Eigenschaft einer Route definiert, also bereits bei der Definition der Route im <code>routes</code>-Array in <code>app-routing.module.ts</code>. Es gibt vier verschiedene Guard-Typen:</p> <ul> <li><code>CanAvtivate</code>: entscheidet, ob eine Route aktiviert werden darf,</li> <li><code>CanAvtivateChild</code>: entscheidet, ob die Kind-Routen einer Route aktiviert werden d\u00fcrfen (Kind-Routen haben wir uns bis jetzt noch nicht angeschaut),</li> <li><code>CanDeaktivate</code>: entscheidet, ob eine Route deaktiviert werden darf,</li> <li><code>CanLoad</code>: entscheidet, ob ein Module (asynchron) geladen werden darf. </li> </ul> <p>Uns gen\u00fcgt es, <code>CanActivate</code> zu betrachten. Damit wollen wir regulieren, dass nur eine bestimmte Rolle von Nutzern eine bestimmte Komponente verwenden darf. Wir erstellen uns einen solchen Guard mithilfe des Angular CLI und nennen den Guard <code>authguard</code>:</p> <pre><code>ng g guard authguard --implements CanActivate\n</code></pre> <p>Dadurch entsteht eine Datei <code>authguard.guard.ts</code> mit folgendem Inhalt:</p> authguard.guard.ts <pre><code>import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AuthguardGuard implements CanActivate {\n\ncanActivate(\nroute: ActivatedRouteSnapshot,\nstate: RouterStateSnapshot): Observable&lt;boolean | UrlTree&gt; | Promise&lt;boolean | UrlTree&gt; | boolean | UrlTree {\nreturn true;\n}\n\n}\n</code></pre> <p>Um dieses Beispiel etwas realistischer zu gestalten, erstellen wir noch einen <code>auth</code>-Service, der sp\u00e4ter unserer Nutzer- und Rollenverwaltung dient. Wir nennen ihn <code>auth</code> und erstellen ihn ebenfalls im <code>shared</code>-Ordner:</p> <pre><code>ng g service shared/auth\n</code></pre> <p>In diesen Service f\u00fcgen wir nur eine dummy-Funktion <code>isAuthenticated()</code> ein, die ein <code>true</code> oder <code>false</code> zur\u00fcckliefert:</p> shared/auth.service.ts <pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AuthService {\n\nconstructor() { }\n\nisAuthenticated(): boolean {\nreturn false;\n}\n}\n</code></pre> <p>Diesen Service und davon insbesondere die <code>isAuthenticated</code>-Funktion verwenden wir in unserem <code>auth</code>-Guard:</p> authguard.guard.ts <pre><code>import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { AuthService } from './shared/auth.service';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AuthguardGuard implements CanActivate {\n\nconstructor(\nprivate as: AuthService,\nprivate router: Router\n) {}\n\ncanActivate(\nroute: ActivatedRouteSnapshot,\nstate: RouterStateSnapshot): boolean | UrlTree {\nreturn this.as.isAuthenticated()\n? true\n: this.router.parseUrl('/login');\n}\n\n}\n</code></pre> <p>Erl\u00e4uterungen der Anpassungen:</p> <ul> <li>Zun\u00e4chst haben wir die R\u00fcckgabetypen der <code>canActivate()</code>-Funktion auf <code>boolean</code> und <code>UrlTree</code> reduziert. Die anderen m\u00f6glichen R\u00fcckgabetypen <code>Observable&lt;boolean | UrlTree&gt; | Promise&lt;boolean | UrlTree&gt;</code> haben wir gel\u00f6scht (und somit auch <code>import { Observable } from 'rxjs';</code>) - siehe Zeile <code>17</code>.</li> <li>Dann haben wir den <code>AuthService</code> und auch das <code>Router</code>-Modul per dependency injection in den Konstruktor der <code>AuthGuard</code>-Klasse eingef\u00fcgt, um Beides verwenden zu k\u00f6nnen (Zeilen <code>10-13</code>). </li> <li>Dann haben wir die Berechnung des R\u00fcckgabewertes der <code>canActivate</code>-Funktion erg\u00e4nzt. Der R\u00fcckgabewert ist abh\u00e4ngig vom R\u00fcckgaewert der <code>isAuthenticated()</code>-Funktion des <code>AuthServices</code>. Liefert diese Funktion ein <code>true</code> zur\u00fcck, dann gibt auch die <code>canActivate()</code>-Funktion ein <code>true</code> zur\u00fcck (Zeile <code>19</code>). Ist der R\u00fcckgabewert jedoch <code>false</code>, dann liefert die <code>canActivate()</code>-Funktion ein <code>UrlTree</code> in der Form zur\u00fcck, dass die Navigation auf die Route <code>/login</code> umgeleitet wird. </li> </ul> <p>Jetzt k\u00f6nnen wir diesen Guard verwenden und passen daf\u00fcr die <code>app-routing.module.ts</code> an. Wir wollen hier exemplarisch demonstrieren, dass die <code>/cities</code>- und <code>/cities/:id</code>-Routen nur dann aktiviert werden k\u00f6nnen, wenn die <code>canActivate()</code>-Funktion des <code>AuthGuard</code>s ein <code>true</code> zur\u00fcckliefert. Dazu sind folgende \u00c4nderungen in der <code>app-routing.module.ts</code> notwendig: </p> app-routing.module.ts <pre><code>import { AuthguardGuard } from './authguard.guard';\nimport { CityComponent } from './cities/city/city.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { AboutComponent } from './about/about.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CitiesComponent } from './cities/cities.component';\n\nconst routes: Routes = [\n{\npath: \"\",\ncomponent: HomeComponent,\npathMatch: 'full'\n},\n{\npath: \"about\",\ncomponent: AboutComponent\n},\n{\npath: \"login\",\ncomponent: LoginComponent\n},\n{\npath: \"cities\",\ncomponent: CitiesComponent,\ncanActivate: [AuthguardGuard]\n},\n{\npath: \"cities/:id\",\ncomponent: CityComponent,\ncanActivate: [AuthguardGuard]\n}\n];\n\n@NgModule({\ndeclarations: [],\nimports: [\nRouterModule.forRoot(routes)\n],\nexports: [RouterModule],\nproviders: []\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Wenn wir nun auf <code>/cities</code> navigieren wollen, dann werden wir direkt auf die <code>/login</code>-Route umgeleitet. Die <code>CitiesComponent</code> und auch die <code>CityComponent</code> bleiben gesperrt solange <code>isAuthenticated()</code> ein <code>false</code> zur\u00fcckliefert. </p> <p>Success</p> <p>Wir haben die wesentlichsten Konzepte des Routing kennengelernt. Dar\u00fcber hinaus gibt es noch Themen f\u00fcr Fortgeschrittene, wie z.B. lazy-loading von Modulen (Module erst dann laden, wenn man sie wirklich erst aufruft), Routen f\u00fcr Kindkomponenten, mehrere outlets usw. Aber uns gen\u00fcgen die hier erl\u00e4uterten wesentlichen Konzepte. </p>"},{"location":"rwd/","title":"Responsive Web Design","text":"<p>Responsive bedeutet reagierend und wenn wir von Resonsive Web Design (RWD) sprechen, dann meinen wir damit, dass wir das Layout der Webseite so gestalten, dass es auf die Gr\u00f6\u00dfe des Ausgabeger\u00e4tes \"reagiert\". Das hei\u00dft, dass wir f\u00fcr kleine (schmale) Ausgabeger\u00e4te (z.B. Mobiltelefone) ein anderes Layout (Design) w\u00e4hlen, als f\u00fcr breitere Ausgabeger\u00e4te (z.B. Tablets) und ein noch anderes Layout f\u00fcr sehr breite Ausgabeger\u00e4te (z.B. Monitore).</p> <p>Responsive Web Design realisieren wir haupts\u00e4chlich mit CSS. Insofern h\u00e4tte es auch gut in den Skript-Teil f\u00fcr CSS gepasst. Da dies jedoch schon so lang war, haben wir eine eigene Unterseite f\u00fcr RWD erstellt. </p> <p>Damit \u00fcberhaupt auf unterschiedliche Ausgabeger\u00e4te reagiert werden kann, wurde sogenannte Media Queries in CSS eingef\u00fchrt. Diese schauen wir uns deshalb zun\u00e4chst genauer an. Zuvor noch ein wichtiger Tipp! Um unsere Webseite im responsiven Design zu gestalten, m\u00fcssen wir dem Browser mitteilen, dass er die Gr\u00f6\u00dfe des Viewports (also des Ausgabefensters) ber\u00fccksichtigen soll und die Darstellung an die Gr\u00f6\u00dfe des Ger\u00e4tes anpassen muss. Dazu f\u00fcgen wir im <code>&lt;head&gt;</code> unserer Webseite von nun an immer das viewport meta tag ein und geben damit an, dass einerseits die Ausgabe an die Ger\u00e4tegr\u00f6\u00dfe angepasst werden soll und wir mit einem Zoom-Faktor von 1 starten:</p> <pre><code>&lt;!-- ab jetzt immer im &lt;head&gt; angeben! --&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n</code></pre>"},{"location":"rwd/#media-queries","title":"Media Queries","text":"<p>Grob gesagt, definieren wir mithilfe von Media Queries, welche CSS-Eigenschaften f\u00fcr welche Bildschirmgr\u00f6\u00dfe gelten sollen. Das hei\u00dft, wir definieren unterschiedliche CSS-Eigenschaften f\u00fcr unterschiedliche Bildschirmgr\u00f6\u00dfen. So k\u00f6nnen wir z.B. definieren, dass f\u00fcr Bildschirmbreiten unter <code>480px</code> ein einspaltiges Layout gew\u00e4hlt wird, f\u00fcr Bildschirmbreiten gr\u00f6\u00dfer als <code>480px</code>, aber kleiner gleich <code>720px</code> ein 2-spaltiges Layout und f\u00fcr gr\u00f6\u00dfer als <code>720px</code> ein 3-spaltiges Layout. </p> <p>Wir betrachten Media Queries zun\u00e4chst von der syntaktischen Seite. Das ist f\u00fcr Sie vielleicht zun\u00e4chst unspannend, aber wir \u00fcberlegen dabei, was alles geht, um dann zu sagen, dass wir uns doch nur um Screens (also Minitore) und doch nur um deren Breiten k\u00fcmmern - aber es ginge noch viel mehr ;-).</p>"},{"location":"rwd/#syntax-von-media-queries","title":"Syntax von Media Queries","text":"<p>Media Queries k\u00f6nnen zun\u00e4chst einmal <code>true</code> oder <code>false</code> sein. Um diesen Wert zu ermitteln, wird f\u00fcr einen Medientyp (media type) ein Ausdruck (expression) ausgewertet. Die allgemeine Syntax f\u00fcr eine Media Query ist wie folgt:</p> <pre><code>@media [not|only] mediatype and (expressions) {\n  CSS-Code;\n}\n</code></pre> <p>Eine Media Query beginnt immer mit <code>@media</code>. Dann kann ein <code>not</code> oder ein <code>only</code> kommen, muss aber nicht und wir werden es auch nicht verwenden. Danach kommt der Medientyp (sollte kein Medientyp angegeben werden, ist <code>screen</code>, also Monitor gemeint). Medientypen k\u00f6nnen z.B. Drucker (<code>print</code>), Monitore (<code>screen</code>), Screenreader (<code>speech</code>) oder <code>all</code> sein. Wir werden uns (fast) ausschlie\u00dflich mit Monitoren bzw Monitorgr\u00f6\u00dfen und damit als Medientyp <code>screen</code> besch\u00e4ftigen. Ein angegebener Medientyp wird mithilfe von <code>and</code> mit einem Ausdruck verkn\u00fcpft. </p> <p>Ein Ausdruck besteht aus einem media feature und einem Wert. Ein media feature ist z.B. <code>width</code>, <code>min-width</code>, <code>max-width</code>, <code>height</code>, <code>min-height</code>, <code>max-height</code>, <code>device-width</code>, <code>min-device-width</code>, <code>max-device-width</code>, <code>device-height</code>, <code>min-device-height</code>, <code>max-device-height</code>, <code>orientation</code>, usw. Ausdr\u00fccke (expressions) ergeben sich dann aus media feature und Wert, z.B. <code>orientation: landscape</code>, <code>orientation: portrait</code>, <code>min-width: 480px</code>, <code>max-width: 480px</code>, <code>resolution: 150dpi</code>. </p>"},{"location":"rwd/#beispiele-von-media-queries","title":"Beispiele von Media Queries","text":"<p>Wir betrachten zun\u00e4chst einige Beispiele von Media Queries: </p> <pre><code>@media screen and (max-width: 800px) {\n/* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) h\u00f6chstens 800px breit ist */\n}\n</code></pre> <pre><code>@media only screen and (min-width: 320px) and (max-width: 480px)\nand (min-resolution: 150dpi) {\n/*  hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und \n        h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */\n}\n</code></pre> <p>Seit Media Queries Level 4 kann man auch direkt schreiben:</p> <pre><code>@media (320px &lt;= width &lt;= 480px) and (min-resolution: 150dpi){\n/*  hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und \n        h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt  */\n}\n</code></pre> <pre><code>@media (orientation: portrait) { /* hier die CSS-Eigenschaften f\u00fcr hochformatige Ausgabemedien */ }\n@media (orientation: landscape) { /* hier die CSS-Eigenschaften f\u00fcr querformatige Ausgabemedien */ }\n</code></pre>"},{"location":"rwd/#erstes-beispiel","title":"Erstes Beispiel","text":"<p>Wir versuchen, zun\u00e4chst immer mobile first zu designen, d.h. wir geben zun\u00e4chst die CSS-Eigenschaften an, die f\u00fcr mobile Ger\u00e4te (schmaler Viewport) gelten und f\u00fcgen dann Media Queries hinzu, die f\u00fcr gr\u00f6\u00dfere Ausgabebreiten Anwendung finden soll. Hier ein erstes Beispiel:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Media Queries&lt;/title&gt;\n    &lt;style&gt;\ndiv {\nmargin: auto;\nwidth: 100%;\nheight: 100%;\ntext-align: center;\nbackground-color: red;\npadding-top: 20%;\npadding-bottom: 20%;\nfont-size: medium;\n}\n\n@media screen and (min-width: 800px) {\ndiv {\nbackground-color: green;\ncolor: yellow;\nfont-size: large;;\n}\n}\n\n@media screen and (min-width: 1200px) {\ndiv {\nbackground-color: blue;\ncolor: white;\nfont-size: xx-large;\n}\n}\n\n@media screen and (orientation: portrait) {\ndiv {\nwriting-mode: vertical-rl;\ntext-orientation: mixed;\nbackground-color: yellow;\ncolor: brown;\n}\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\u00c4ndern Sie die Breite des Browsers, um den Effekt zu sehen.&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Der HTML-Code ist kurz: wir erstellen ein <code>&lt;div&gt;</code>, welches einen Text enth\u00e4lt. Im <code>&lt;style&gt;</code>-Element definieren wir f\u00fcr dieses <code>&lt;div&gt;</code>, dass der Text zentriert sein soll (vertikal, also von links nach rechts betrachtet) und dass nach oben und unten ein Abstand zum Rand von jeweils 20% der Viewport-H\u00f6he eingehalten werden soll. Dadurch wird das <code>&lt;div&gt;</code> einigerma\u00dfen hoch (weil <code>&lt;div&gt;</code> ein Block-Element ist, geht es sowieso \u00fcber die gesamte Breite). Au\u00dferdem legen wir fest, dass der Hintergrund rot und die Schriftgr\u00f6\u00dfe <code>medium</code> sein soll. </p> <p>Unsere erste Media Query definiert f\u00fcr eine Mindestbreite des Viewports von <code>800px</code>, dass der Hintergrund nun gr\u00fcn, die Schriftfarbe gelb und die Schriftgr\u00f6\u00dfe <code>large</code> sein soll.</p> <p>Die zweite Media Query definiert f\u00fcr eine Mindestbreite des Viewports von <code>1200px</code>, dass der Hintergrund blau, die Schriftfarbe wei\u00df und die Schriftgr\u00f6\u00dfe <code>xx-large</code> sein soll.</p> <p>Wenn wir die Seite im Browser aufrufen, wird nun abh\u00e4ngig von der Gr\u00f6\u00dfe des Viewports eine der drei folgenden Ansichten gezeigt: </p> <p></p> <p>\u00c4ndern Sie die Gr\u00f6\u00dfe der Browserbreite, um alle drei Ansichten zu sehen. Die dritte Media Query definiert eine eigene Ansicht f\u00fcr den Fall, dass die H\u00f6he des Viewports gr\u00f6\u00dfer ist als die Breite (<code>orientation: portrait</code>). Sie k\u00f6nnen diese Ansicht erreichen, indem Sie den Browser m\u00f6glichst schmal machen oder Sie nutzen die Developer Tools Ihres Browsers und \"drehen\" Ihr Ger\u00e4t. </p>"},{"location":"rwd/#zweites-beispiel","title":"Zweites Beispiel","text":"<p>Wir wollen uns noch ein zweites Beispiel anschauen. Dieses Beispiel zeigt bereits das Prinzip, auf dem das sogenannte Grid-Konzept beruht, welches in CSS-Frameworks verwendet wird. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Responsive Webdesign&lt;/title&gt;\n    &lt;style&gt;\n.small {\nfloat: left;\nwidth: 98%;\npadding: 1%;\n}\n\n@media screen and (min-width: 800px) {\n.medium {\nfloat: left;\nwidth: 48%;\npadding: 1%;\n}\n}\n\n@media screen and (min-width: 1200px) {\n.large {\nfloat: left;\nwidth: 23%;\npadding: 1%;\n}\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"small medium large\"&gt;\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod\n    tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At\n    vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,\n    no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit\n    amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut\n    labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam\n    et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata\n    sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n    sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo\n    dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est\n    Lorem ipsum dolor sit amet.\n\n    Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie\n    consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan\n    et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis\n    dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet,\n&lt;/p&gt;\n&lt;p class=\"small medium large\"&gt;\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod\n    tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At\n    vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,\n    no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit\n    amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut\n    labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam\n    et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata\n    sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n    sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo\n    dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est\n    Lorem ipsum dolor sit amet.\n\n    Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie\n    consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan\n    et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis\n    dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet,\n&lt;/p&gt;\n&lt;p class=\"small medium large\"&gt;\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod\n    tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At\n    vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,\n    no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit\n    amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut\n    labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam\n    et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata\n    sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n    sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo\n    dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est\n    Lorem ipsum dolor sit amet.\n\n    Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie\n    consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan\n    et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis\n    dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet,\n&lt;/p&gt;\n&lt;p class=\"small medium large\"&gt;\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod\n    tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At\n    vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,\n    no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit\n    amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut\n    labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam\n    et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata\n    sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n    sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo\n    dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est\n    Lorem ipsum dolor sit amet.\n\n    Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie\n    consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan\n    et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis\n    dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet,\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Der HTML-Code ist wieder einfach gehalten. Wir haben vier <code>&lt;p&gt;</code>-Elemente, die einen Text enthalten und denen jeweils drei Klassen zugeordnet sind: <code>small</code>, <code>medium</code> und <code>large</code>. In den CSS-Definitionen (siehe <code>&lt;style&gt;</code>-Element) definieren wir zun\u00e4chst Eigenschaften f\u00fcr die Klasse <code>small</code>. Wir geben dort zwar <code>float:left</code> an, das ist aber eigentlich unsinnig, da die Breite jedes einzelnen Absatzes <code>100%</code> der Breite des Viewports ist (<code>widt: 98% + 2x padding: 1%</code>). Es w\u00fcrde dort auch gen\u00fcgen, wenn wir einfach nur <code>padding: 1%</code> definieren w\u00fcrden. </p> <p>Wichtiger sind die Definitionen in den beiden Media Queries. F\u00fcr eine Viewport-Breite zwischen <code>800px</code>und <code>1199px</code> definieren wir die Klasse <code>medium</code> so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <code>&lt;p&gt;</code>-Elemente) umflossen werden kann (<code>float: left</code>) und eine Breite von <code>50%</code> des Viewports einnimmt. Das f\u00fchrt dazu, dass dann zwei Abs\u00e4tze nebeneinander passen. </p> <p>F\u00fcr eine Viewport-Breite gr\u00f6\u00dfer als <code>1199px</code> definieren wir die Klasse <code>large</code> so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <code>&lt;p&gt;</code>-Elemente) umflossen werden kann (<code>float: left</code>) und eine Breite von <code>25%</code> des Viewports einnimmt. Das f\u00fchrt dazu, dass dann vier Abs\u00e4tze nebeneinander passen. </p> <p>F\u00fchren Sie das Beispiel aus und \u00e4ndern Sie Ihre Browserbreite, dann werden Sie den Effekt sehen:</p> <p> </p> <p>Eine Anmerkung noch: Sie stellen sich vielleicht die Frage, warum z.B. bei einer Viewportbreite von mehr als <code>1200px</code> die Definition der Klasse <code>large</code> wirkt, nicht jedoch die Definitionen der Klassen <code>small</code> und <code>medium</code>. Wenn wir uns an die Gewichtung der Selektoren erinnern, dann sollten alle drei Definitionen gleichgewichtet sein, denn es ist jeweils eine Klasse betroffen. Es steht als jeweils in Kategorie A eine 0 (<code>style</code>-Attribut), in Kategorie B eine 0 (keine <code>id</code>), in Kategorei C eine 1 (eine Klasse) und in Kategorie D eine 0 (kein Element). Tats\u00e4chlich sind auch alle drei Definitionen gleichgewichtet. Hier entscheidet jetzt tats\u00e4chlich die Reihenfolge der Definitionen und da zuerst <code>small</code> definiert wird, dann <code>medium</code> und dann <code>large</code>, wirkt <code>large</code> am st\u00e4rksten, wenn alle drei Klassen definiert sind. Das hei\u00dft auch, Sie d\u00fcrfen nicht zuerst mit der Media Query f\u00fcr gro\u00dfe Viewports beginnen, dann die Media Query f\u00fcr mittlere Viewports und erst dann die <code>small</code>-Definition, denn dann w\u00fcrde es nicht funktionieren. </p>"},{"location":"rwd/#css-frameworks","title":"CSS-Frameworks","text":"<p>F\u00fcr gr\u00f6\u00dfere Webanwendungen m\u00fcssen wir keine eigenen CSS-Definitionen schreiben, sondern k\u00f6nnen auf CSS-Frameworks zur\u00fcckgreifen, die ein einheitliches und mordernes Aussehen f\u00fcr Webanwendungen zur Verf\u00fcgung stellen. In diesen Frameworks wurden viele Klassen definiert und wir k\u00f6nnen unter Verwendung eines solchen Frameworks unseren HTML-Elementen gezielt Klassen zuweisen, die dann das Aussehen dieses Elementes beeinflussen. Einige solcher Frameworks haben bereits eine hohe Verbreitung:</p> <ul> <li>Bootstrap</li> <li>SemanticUI</li> <li>Materialize CSS</li> <li>Foundation</li> </ul> <p>Einen \u00dcberblick \u00fcber bekannte CSS-Frameworks finden Sie z.B. hier und hier.</p> <p>Wir erl\u00e4utern hier die Verwendung eines solchen Frameworks anhand von Bootstrap. </p>"},{"location":"rwd/#bootstrap","title":"Bootstrap","text":"<p>Um Bootstrap zu verwenden, haben Sie zun\u00e4chst die Wahl zwischen </p> <ul> <li>der Verwendung eines Content Delivery Networks (CDN) oder</li> <li>dem Download der externen Bootstrap-CSS-Datei. </li> </ul> <p>Wenn Sie ein CDN verwenden, dann werden die Quellen in dem Moment geladen, in dem Sie die Webseite aufrufen. Der <code>&lt;head&gt;</code> Ihrer HTML-Datei sieht dann so aus:</p> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre> <p>Den entsprechenden Link zum CDN finden Sie auf der Bootstrap-Webseite. </p> <p>Sie k\u00f6nnen die CSS-Dateien aber auch herunterladen. Auf der Download Bootstrap-Webseite klicken Sie unter \"Compiled CSS and JS\" auf den \"Download\"-Button. Sie erhalten eine Datei <code>bootstrap-5.1.3-dist.zip</code>. Entpacken Sie diese Datei. Der entstehende Ordner enth\u00e4lt 2 Unterordner <code>css</code> und <code>js</code>. Letzterer enth\u00e4lt JavaScript-Dateien des Frameworks. Diese ben\u00f6tigen wir f\u00fcr unsere Zwecke hier (noch) nicht. Verschieben Sie den css-Ordner in Ihren Projekt-Ordner (z.B. <code>Webtech20</code>). Dann k\u00f6nnen Sie diese externen Dateien mit dem <code>&lt;link&gt;</code>-Tag wie bekannt einbinden. Der <code>&lt;head&gt;</code> sieht dann so aus:</p> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\" &gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre> <p>Das <code>min</code> im Dateinamen <code>bootstrap.min.css</code> steht \u00fcbrigens daf\u00fcr, dass aus dieser CSS-Datei alle unn\u00f6tigen Whitespaces (Leerzeichen und Tabs) entfernt wurden, um die Datei m\u00f6glichst klein zu halten (sie ist immer noch 160 KB) gro\u00df - das muss bei jedem Abruf vom Webserver mitgeladen werden (wenn es nicht bereits im Cache ist). Mit den Whitespaces (<code>bootstrap.css</code>) ist die Datei sogar 198 KB gro\u00df. </p> <p>Wir erstellen mal eine erste Seite:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\" &gt;\n    &lt;title&gt;Bootstrap&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"p-5 mb-4 bg-light rounded-3\"&gt;\n        &lt;div class=\"container-fluid py-5\"&gt;\n            &lt;h1 class=\"display-5 fw-bold\"&gt;Jetzt mit Bootstrap!&lt;/h1&gt;\n            &lt;p class=\"col-md-8 fs-4\"&gt;Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. &lt;/p&gt;\n            &lt;p&gt;&lt;a class=\"btn btn-primary btn-lg\" href=\"https://getbootstrap.com/docs/5.1/examples/\" role=\"button\"&gt;Bootstrap Beispiele &amp;raquo;&lt;/a&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Wenn Sie Bootstrap richtig eingebunden haben, dann sieht die Seite so aus: </p> <p></p> <p>In dem obigen Beispiel habe ich einen Link auf Beispiele hinterlegt, in denen Bootstrap verwendet wird. Es lohnt sich, diese Beispiel genauer unter die Lupe zu nehmen, um ein Gef\u00fchl daf\u00fcr zu bekommen, wie die Klassen wirken und was alles so mit Bootstrap geht. Man muss keine dieser Klassen kennen, sondern sucht immer in bereits existierenden Beispielen, wie man ein Problem mithilfe von Bootstrap l\u00f6sen kann. Neben der Bootstrap-Webseite selbst bietet auch w3schools eine gute \u00dcbersicht. </p> <p>Daraus auch noch eine weitere Erg\u00e4nzung, n\u00e4mlich ein Formular, bei dem \u00fcberpr\u00fcft wird, ob eine Eingabe \u00fcberhaupt erfolgte. Der hinzugef\u00fcgte Code ist gelb unterlegt.  </p> Erweiterung des Beispiels um ein Formular <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\" &gt;\n    &lt;title&gt;Bootstrap&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;main role=\"main\"&gt;\n    &lt;div class=\"p-5 mb-4 bg-light rounded-3\"&gt;\n        &lt;div class=\"container-fluid py-5\"&gt;\n            &lt;h1 class=\"display-5 fw-bold\"&gt;Jetzt mit Bootstrap!&lt;/h1&gt;\n            &lt;p class=\"col-md-8 fs-4\"&gt;Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. &lt;/p&gt;\n            &lt;p&gt;&lt;a class=\"btn btn-primary btn-lg\" href=\"https://getbootstrap.com/docs/5.1/examples/\" role=\"button\"&gt;Bootstrap Beispiele &amp;raquo;&lt;/a&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;div class=\"container\"&gt;\n&lt;h2&gt;Formular mit Validierung, ob Eingabe erfolgte (nur mit CSS - kein JavaScript!)&lt;/h2&gt;\n&lt;p&gt;Hier wird z.B. die Klasse &lt;code&gt;.was-validated&lt;/code&gt; verwendet, um zu \u00fcberpr\u00fcfen, ob in den Textfeldern und der Checkbox eine Eingabe erfolgt ist.&lt;/p&gt;\n&lt;form class=\"was-validated\"&gt;\n&lt;div class=\"form-group\"&gt;\n&lt;label for=\"uname\"&gt;Username:&lt;/label&gt;\n&lt;input type=\"text\" class=\"form-control\" id=\"uname\" placeholder=\"Enter username\" name=\"uname\" required&gt;\n&lt;div class=\"valid-feedback\"&gt;Korrekt&lt;/div&gt;\n&lt;div class=\"invalid-feedback\"&gt;Feld bitte ausf\u00fcllen!&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"form-group\"&gt;\n&lt;label for=\"pwd\"&gt;Password:&lt;/label&gt;\n&lt;input type=\"password\" class=\"form-control\" id=\"pwd\" placeholder=\"Enter password\" name=\"pswd\" required&gt;\n&lt;div class=\"valid-feedback\"&gt;Korrekt&lt;/div&gt;\n&lt;div class=\"invalid-feedback\"&gt;Feld bitte ausf\u00fcllen!&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"form-group form-check\"&gt;\n&lt;label class=\"form-check-label\"&gt;\n&lt;input class=\"form-check-input\" type=\"checkbox\" name=\"remember\" required&gt; Ich habe die Datenschutzerkl\u00e4rung gelesen und stimme ihr zu.\n                &lt;div class=\"valid-feedback\"&gt;Korrekt&lt;/div&gt;\n&lt;div class=\"invalid-feedback\"&gt;Hier bitte best\u00e4tigen!&lt;/div&gt;\n&lt;/label&gt;\n&lt;/div&gt;\n&lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Die Seite sieht dann so aus: </p> <p>Wir wollen gar keine weiteren Beispiele hier auff\u00fchren. Wie gesagt, wenn Sie etwas ben\u00f6tigen, dann gucken Sie unter Bootstrap oder w3schools nach, ob es dort passende Beispiele gibt, die Sie kopieren und anpassen k\u00f6nnen. Uns geht es haupts\u00e4chlich um das Grid-Konzept, das im folgenden vorgestellt wird.</p>"},{"location":"rwd/#grid-konzept","title":"Grid-Konzept","text":"<p>Alle CSS-Frameworks beruhen zur Gestaltung eines responiven Webdesigns auf einem sogenannten Grid-Konzept. Bei diesem Konzept wird der Viewport in Spalten (columns) aufgeteilt. Bei den meisten CSS-Frameworks, auch bei Bootstrap, in 12 Spalten. Sie k\u00f6nnen einem Blockelement nun \u00fcber die Zuweisung zu einer bestimmten Klasse mitteilen, wieviele solcher Spalten f\u00fcr dieses Element zur Verf\u00fcgung stehen. </p>"},{"location":"rwd/#erstes-beispiel_1","title":"Erstes Beispiel","text":"<p>Wir betrachten zun\u00e4chst wieder ein einfaches Beispiel:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\" &gt;\n    &lt;title&gt;Grid&lt;/title&gt;\n    &lt;style&gt;\ndiv div {\npadding: 10px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;main class=\"container pt-5 \"&gt;\n    &lt;h2&gt;Wichtig ist, dass die Spaltenanzahl in einer Zeile 12 ergibt&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-3\" style=\"background-color: lightgrey;\"&gt;\n            &lt;h3&gt;col-3&lt;/h3&gt;\n            &lt;p&gt;Diesem &amp;lt;div&amp;gt; wurde die Klasse &lt;code&gt;col-3&lt;/code&gt; zugewiesen&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-4\" style=\"background-color: darkgrey;\"&gt;\n            &lt;h3&gt;col-4&lt;/h3&gt;\n            &lt;p&gt;Diesem &amp;lt;div&amp;gt; wurde die Klasse &lt;code&gt;col-4&lt;/code&gt; zugewiesen&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-5\" style=\"background-color: grey;\"&gt;\n            &lt;h3&gt;col-5&lt;/h3&gt;\n            &lt;p&gt;Diesem &amp;lt;div&amp;gt; wurde die Klasse &lt;code&gt;col-5&lt;/code&gt; zugewiesen&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Wir haben drei <code>&lt;div&gt;</code>-Elemente in einem <code>&lt;div&gt;</code>, dem die Klasse <code>row</code> zugewiesen ist. Die drei <code>&lt;div&gt;</code>-Elemente innerhalb von <code>row</code> nehmen jeweils eine gewisse Anzahl von Spalten ein. das erste <code>&lt;div&gt;</code> ist 3 Spalten breit (<code>col-3</code>), das zweite <code>&lt;div&gt;</code> 4 Spalten  (<code>col-4</code>) und das dritte <code>&lt;div&gt;</code> ist 5 Spalten breit (<code>col-5</code>). Dadurch, dass die drei Container in einem Container mit der Klasse <code>row</code> und den drei Containern jeweils mit <code>col-*</code> eine Anzahl von Spalten zugewiesen wurden, erscheinen die drei Container nebeneinander und haben die Breite entsprechend der ihnen zugewiesenen Spaltenanzahl. Das erste <code>&lt;div&gt;</code> nimmt also 3/12 der Viewportbreite ein, das zweite <code>&lt;div&gt;</code> 4/12 und das dritte 5/12. Wichtig ist, dass die Summe der Spalten 12 ergibt (3+4+5), damit die drei Elemente auch nebeneinander passen (es darf zumindest nicht mehr sein). </p> <p>Folgende Abbildung zeigt die M\u00f6glichkeiten, wenn die jeweiligen Blockelemente jeweils gleichverteilt \u00fcber die gesamten 12 Spalten w\u00fcrden. </p> <p></p> <p>Aber wie Sie gesehen haben, k\u00f6nnen die Spaltenbreiten auch beliebig gemischt werden (z.B. <code>col-2</code>, <code>col-3</code>, <code>col-1</code>, <code>col-6</code>) - in Summe soll immer 12 herauskommen. </p> <p>Falls Sie mehrere Spalten gleichverteilen wollen (also gleiche Spaltenbreiten), k\u00f6nnen Sie auch einfach die Klasse <code>col</code> verwenden:</p> <pre><code>&lt;div class=\"row\"&gt;\n  &lt;div class=\"col\"&gt;&lt;/div&gt;\n  &lt;div class=\"col\"&gt;&lt;/div&gt;\n  &lt;div class=\"col\"&gt;&lt;/div&gt;\n  &lt;div class=\"col\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Hier nehmen die inneren <code>&lt;div&gt;</code> nun jeweils <code>25%</code> des Viewports ein und sind nebeneinander. </p>"},{"location":"rwd/#responsive","title":"Responsive","text":"<p>Blockelemente nebeneinander anzuordnen, geht nun also schonmal recht leicht. Die eigentlich gute Idee des Grid-Konzeptes ist jedoch, dass man genau so einfach die Anordnung der Elemente responsiv gestalten kann. Neben der Klasse <code>col</code> (automatisch gleichverteilen) gibt es, wie wir bereits gesehen haben, die Klassen <code>col-1</code>, <code>col-2</code>, ... , <code>col-12</code>. Damit k\u00f6nnen wir, wie im ersten Beispiel gezeigt, Blockelementen jeweils eine bestimmte Spaltenanzahl zuordnen. </p> <p>Jetzt kommt noch eine weitere Bedeutung dieser Klassen hinzu: man verwendet sie f\u00fcr extra schmale Ausgabeger\u00e4te (kleiner als <code>576px</code>). Daneben gibt es noch weitere Klassen (wir listen <code>col-</code> trotzdem nochmal mit auf):</p> <ul> <li><code>col-</code> (xs-Ger\u00e4te; Bildschirmbreite kleiner als 576px)</li> <li><code>col-sm-</code> (sm-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 576px)</li> <li><code>col-md-</code> (md-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 768px)</li> <li><code>col-lg-</code> (lg-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 992px)</li> <li><code>col-xl-</code> (xl-Ger\u00e4te - Bildschirmbreite als 1200px)</li> </ul> <p>Hinter dem Strich steht bei allen Klassen eine Zahl <code>1</code> bis <code>12</code>. Die Klassen skalieren auch nach oben, d.h. wenn man nur die Klassen f\u00fcr xs-Ger\u00e4te angibt und keine weiter (so wie in unserem ersten Beispiel oben), dann gilt diese Angabe f\u00fcr alle weiteren Bildschirmbreiten. M\u00f6chte man z.B., dass die Darstellung in md-Ger\u00e4ten und lg-Ger\u00e4ten genau so sein soll, wie in sm-Ger\u00e4ten, dann l\u00e4sst man die Angabe f\u00fcr die md-Ger\u00e4te und lg-Ger\u00e4te einfach weg. </p> <p>Wir schauen uns das mal an:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\" &gt;\n    &lt;title&gt;Grid&lt;/title&gt;\n    &lt;style&gt;\ndiv div {\npadding: 10px;\nmargin-top: 5px;\nmargin-bottom: 5px;\n}\n.row div:nth-child(odd) {\nbackground-color: lightgrey;\ncolor: black;\n}\n.row div:nth-child(even) {\nbackground-color: grey;\ncolor: white;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;main class=\"container pt-5 \"&gt;\n    &lt;h2&gt;Jetzt resonsiv - \u00e4ndern Sie die Monitorbreite&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;xs: &lt;code&gt;col-12&lt;/code&gt; 1/1&lt;/li&gt;\n                &lt;li&gt;sm: &lt;code&gt;col-sm-6&lt;/code&gt; 1/2&lt;/li&gt;\n                &lt;li&gt;md: &lt;code&gt;col-md-4&lt;/code&gt; 1/3&lt;/li&gt;\n                &lt;li&gt;lg: &lt;code&gt;col-lg-3&lt;/code&gt; 1/4&lt;/li&gt;\n                &lt;li&gt;xl: &lt;code&gt;col-xl-2&lt;/code&gt; 1/6&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;xs: &lt;code&gt;col-12&lt;/code&gt; 1/1&lt;/li&gt;\n                &lt;li&gt;sm: &lt;code&gt;col-sm-6&lt;/code&gt; 2/2&lt;/li&gt;\n                &lt;li&gt;md: &lt;code&gt;col-md-4&lt;/code&gt; 2/3&lt;/li&gt;\n                &lt;li&gt;lg: &lt;code&gt;col-lg-3&lt;/code&gt; 2/4&lt;/li&gt;\n                &lt;li&gt;xl: &lt;code&gt;col-xl-2&lt;/code&gt; 2/6&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;xs: &lt;code&gt;col-12&lt;/code&gt; 1/1&lt;/li&gt;\n                &lt;li&gt;sm: &lt;code&gt;col-sm-6&lt;/code&gt; 1/2&lt;/li&gt;\n                &lt;li&gt;md: &lt;code&gt;col-md-4&lt;/code&gt; 3/3&lt;/li&gt;\n                &lt;li&gt;lg: &lt;code&gt;col-lg-3&lt;/code&gt; 3/4&lt;/li&gt;\n                &lt;li&gt;xl: &lt;code&gt;col-xl-2&lt;/code&gt; 3/6&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;xs: &lt;code&gt;col-12&lt;/code&gt; 1/1&lt;/li&gt;\n                &lt;li&gt;sm: &lt;code&gt;col-sm-6&lt;/code&gt; 2/2&lt;/li&gt;\n                &lt;li&gt;md: &lt;code&gt;col-md-4&lt;/code&gt; 1/3&lt;/li&gt;\n                &lt;li&gt;lg: &lt;code&gt;col-lg-3&lt;/code&gt; 4/4&lt;/li&gt;\n                &lt;li&gt;xl: &lt;code&gt;col-xl-2&lt;/code&gt; 4/6&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;xs: &lt;code&gt;col-12&lt;/code&gt; 1/1&lt;/li&gt;\n                &lt;li&gt;sm: &lt;code&gt;col-sm-6&lt;/code&gt; 1/2&lt;/li&gt;\n                &lt;li&gt;md: &lt;code&gt;col-md-4&lt;/code&gt; 2/3&lt;/li&gt;\n                &lt;li&gt;lg: &lt;code&gt;col-lg-6&lt;/code&gt; 1/2&lt;/li&gt;\n                &lt;li&gt;xl: &lt;code&gt;col-xl-2&lt;/code&gt; 5/6&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;xs: &lt;code&gt;col-12&lt;/code&gt; 1/1&lt;/li&gt;\n                &lt;li&gt;sm: &lt;code&gt;col-sm-6&lt;/code&gt; 2/2&lt;/li&gt;\n                &lt;li&gt;md: &lt;code&gt;col-md-4&lt;/code&gt; 3/3&lt;/li&gt;\n                &lt;li&gt;lg: &lt;code&gt;col-lg-6&lt;/code&gt; 2/2&lt;/li&gt;\n                &lt;li&gt;xl: &lt;code&gt;col-xl-2&lt;/code&gt; 6/6&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Die <code>&lt;div&gt;</code>-Elemente innerhalb der <code>row</code> sind alle gleich. Ihnen wurden jeweils folgende Klassen zugeordnet:</p> <ul> <li><code>col-12</code> : bei Bildschirmbreiten unter 576px geht ein <code>div</code> \u00fcber alle 12 Spalten, d.h. alle <code>&lt;div&gt;</code> sind untereinander (6 Zeilen)</li> <li><code>col-sm-6</code> : bei Bildschirmbreiten gr\u00f6\u00dfer als 576px und kleiner als 768px geht ein <code>div</code> \u00fcber 6 Spalten, d.h. 2 <code>&lt;div&gt;</code> passen jeweils nebeneinander (3 Zeilen)</li> <li> <ul> <li><code>col-md-4</code> : bei Bildschirmbreiten gr\u00f6\u00dfer als 768px und kleiner als 992px geht ein <code>div</code> \u00fcber 4 Spalten, d.h. 3 <code>&lt;div&gt;</code> passen jeweils nebeneinander (2 Zeilen)</li> </ul> </li> <li><code>col-xl-2</code> : bei Bildschirmbreiten \u00fcber 1200px geht ein <code>div</code> \u00fcber 2 Spalten, d.h. alle 6 <code>&lt;div&gt;</code> passen nebeneinander (1 Zeile)</li> </ul> <p>Eine Abweichung gibt es f\u00fcr <code>col-lg-</code>. Den ersten 4 <code>&lt;div&gt;</code>-Elementen ist jeweils die Klasse <code>col-lg-3</code> zugeordnet. Damit passen diese 4 <code>&lt;div&gt;</code>-Elemente nebeneinander. Dann bleiben noch 2 <code>&lt;div&gt;</code>-Elemente \u00fcbrig. Denen wurde die Klasse <code>col-lg-6</code> zugeordnet, so dass beide Elemente jeweils 6 Spalten breit sind und den Viewport zusammen vollst\u00e4ndig ausf\u00fcllen. Die folgenden Screenshots zeigen die jeweiligen Ansichten:</p> <p></p> <p>Zusammenfassend l\u00e4sst sich also sagen, dass Sie ein responsives Layout erhalten, wenn Sie </p> <ul> <li>einem Container die Klasse <code>row</code> zurodnen und </li> <li>den darin enthaltenen Containern die f\u00fcr Ihr Layout entsprechenden Klassen <code>col-*</code>, <code>col-sm-*</code>, <code>col-md-*</code>, <code>col-lg-*</code> und/oder  <code>col-xl-*</code>. </li> </ul> <p>Achten Sie darauf, dass die Spaltenbreite in einer Zeile insgesamt (h\u00f6chstens) <code>12</code> ergibt und dass die Definitionen nach oben (zum breiteren) skalieren. Das bedeutet, dass wenn Sie beispielsweise keine Definitionen f\u00fcr <code>col-md-*</code> angeben, dann wirken die Definitionen f\u00fcr <code>col-sm-*</code>. Sollten auch diese nicht angegeben sein, dann <code>col-*</code>. </p> <p>Vielleicht noch 2 weitere Beispiele zur Festigung des Verst\u00e4ndnisses. Erstens bestimmt die H\u00f6he des \"h\u00f6chsten\" inneren Containes die H\u00f6he aller Container in einer Reihe: </p> <pre><code>    &lt;h2&gt;Alle Container in einer Reihe gleich hoch&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\" style=\"background-color: blue; color: white;\"&gt;Lorem ipsum dolor sit amet, cibo sensibus interesset no sit. Et dolor possim volutpat qui. No malis tollit iriure eam, et vel tale zril blandit, rebum vidisse nostrum qui eu. No nostrud dolorem legendos mea, ea eum mucius oporteat platonem.Eam an case scribentur, ei clita causae cum, alia debet eu vel.&lt;/div&gt;\n        &lt;div class=\"col\" style=\"background-color: lightblue; color: black;\"&gt;.col&lt;/div&gt;\n        &lt;div class=\"col\" style=\"background-color: dodgerblue; color: black;\"&gt;.col&lt;/div&gt;\n    &lt;/div&gt;\n</code></pre> <p>Das <code>style</code>-Attribut k\u00f6nnen Sie jeweils ignorieren, ist nur zur besseren Sichtbarkeit. Allen inneren Containern wurde die Klasse <code>col</code> zugeordnet, sie werden also innerhalb der Reihe gleichverteilt. Die H\u00f6he des h\u00f6chsten Containers (der erste mit dem l\u00e4ngeren Text) bestimmt auch die H\u00f6he der anderen Container in der Reihe. Es entsteht folgende Ansicht: </p> <p></p> <p>Zweitens k\u00f6nnen Sie die Spalten auch verschachteln. Innerhalb eines Elternelementes soll die Spaltensumme wieder 12 sein. </p> <pre><code>&lt;h2&gt;Verschachtelte Spalten&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-8\" style=\"background-color: yellowgreen; color: black;\"&gt;\n            .col-8\n            &lt;div class=\"row\"&gt;\n                &lt;div class=\"col-6\" style=\"background-color: grey; color: white;\"&gt;.col-6&lt;/div&gt;\n                &lt;div class=\"col-6\" style=\"background-color: dimgrey; color: white;\"&gt;.col-6&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-4\" style=\"background-color: green; color: black;\"&gt;.col-4&lt;/div&gt;\n    &lt;/div&gt;\n</code></pre> <p>Auch hier k\u00f6nnen Sie die <code>style</code>-Attribute wieder ignorieren. Es gibt eine \"\u00e4u\u00dfere\" Reihe mit 2 inneren <code>&lt;div&gt;</code>-Elementen. Das erste <code>&lt;div&gt;</code>-Element geht \u00fcber 8 Spalten und das zweite <code>&lt;div&gt;</code>-Element \u00fcber 4 Spalten. Das erste <code>&lt;div&gt;</code>-Element ist selbst ein Elternelement f\u00fcr eine weitere Reihe. Diese enth\u00e4lt wiederum zwei <code>&lt;div&gt;</code>-Elemente, beide gehen \u00fcber 12 Spalten. Der Bezug ist hier aber das Elternelement. Es entsteht folgende Ansicht: </p> <p></p>"},{"location":"tools/","title":"Werkzeuge","text":""},{"location":"tools/#integrated-development-environment-ide","title":"Integrated Development Environment (IDE)","text":"<p>F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge:</p> <ul> <li>IntelliJ IDEA</li> <li>PhpStorm</li> <li>WebStorm</li> <li>Sublime Text</li> <li>Atom</li> <li>Visual Studio Code</li> </ul> <p>F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten.  </p> <p>Ich werde in den Vorlesungen und \u00dcbungen Visual Studio Code verwenden. Visual Studio Code ist auch auf den Laborrechnern verf\u00fcgbar.</p>"},{"location":"tools/#git","title":"Git","text":"<p>Git ist ein Werkzeug zur Versionskontrolle und zum gemeinsamen Entwickeln in Teams. Nach jeder \u00dcbung committen Sie Ihre L\u00f6sung und pushen Sie auf einen zentralen, netzbasierten Dienst, wie z.B.</p> <ul> <li>GitHub</li> <li>GitLab</li> <li>Bibucket </li> </ul> <p>Gew\u00e4hren Sie mir Zugriff auf Ihr zentrales Repository. Auf GitHub finden Sie mich unter jfreiheit bzw. meiner E-Mail-Adresse joern.freiheit@htw-berlin.de.</p>"},{"location":"tools/#repository-initial-anlegen","title":"Repository initial anlegen","text":"<p>Wir zeigen das Erstellen eines Repositories exemplarisch f\u00fcr <code>GitHub</code>. Die Beispiele hier sind f\u00fcr das Jahr 2020, funktionieren aber noch genau so. Ersetzen Sie einfach  <code>20</code> durch <code>23</code>.</p>"},{"location":"tools/#option-a-repository-zunachst-in-github-anlegen-dann-clonen","title":"Option A: Repository zun\u00e4chst in Github anlegen, dann clonen","text":"<p>Als erstes loggen Sie sich in Github ein. Dort gibt es in der linken oberen Ecke einen Button <code>New</code>, siehe Bild:</p> <p></p> <p>Klicken Sie darauf und geben Sie die notwendigen Informationen ein (Beschreibung ist optional):</p> <p></p> <p>Sie k\u00f6nnen w\u00e4hlen, ob das Repository <code>Public</code> (f\u00fcr alle lesbar) oder <code>Private</code> (nur f\u00fcr Eingeladene lesbar) sein soll. Klicken Sie auf den Button <code>Create repository</code>. Kopieren Sie sich nun den Remote-Pfad in Ihre Zwischenablage, hier <code>https://github.com/jfreiheit/Webtech20.git</code>. </p> <p>Wechseln Sie nun lokal in Ihr <code>Terminal</code> und wechseln in Ihren Workspace Ihrer IDE. Ich w\u00e4hle hier den Pfad <code>/Users/jornfreiheit/Sites</code>, da dieser Pfad gleichzeitig mein <code>DocumentRoot</code>ist, d.h., wenn ich <code>localhost</code> im Browser aufrufe, dann wird in diesem Pfad nach den Webseiten \"gesucht\". </p> <pre><code>jornfreiheit@Jorns-MacBook-Pro Sites % pwd\n/Users/jornfreiheit/Sites\n</code></pre> <p>Geben Sie dort nun ein: </p> <pre><code>jornfreiheit@Jorns-MacBook-Pro Sites % git clone https://github.com/jfreiheit/Webtech20.git\nCloning into 'Webtech20'...\nwarning: You appear to have cloned an empty repository.\n</code></pre> <p>also <code>git clone</code> gefolgt von dem Remote-Pfad aus Ihrer Zwischenablage. Wenn Sie in Github weder <code>README.md</code> noch <code>.gitignore</code> ausgew\u00e4hlt hatten, dann erhalten Sie eine Warnung, dass Sie ein leeres Repository clonen. Das ist aber kein Problem. Sie k\u00f6nnen aber auch beide Datein in Ihr Repository integrieren, die <code>.gitignore</code>verwenden wir auf jeden Fall. In dem Ordner, in den Sie geclont haben, wird nun ein Ordner <code>Webtech20</code> angelegt. Diesen Ordner k\u00f6nnen Sie nun als Workspace Ihrer IDE verwenden. Also z.B. mit <code>IntelliJ IDEA</code>:</p> <p></p> <p>\u00f6ffnen Sie das Projekt (<code>Open or import</code>) <code>Webtech20</code>. Es erscheint:</p> <p></p> <p>Hier k\u00f6nnen Sie w\u00e4hlen, dass neue Dateien immer automatisch zum Git-Repoitory hinzugef\u00fcgt werden - das k\u00f6nnen Sie aber auch immer manuell machen (<code>git add .</code>). Angenommen, wir erstellen uns jetzt eine Datei <code>index.html</code> (<code>File --&gt; New --&gt; HTML File</code>) mit:</p> index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Erster Test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Willkommen&lt;/h1&gt;\n&lt;p&gt;Das ist die Datei index.html. Sie liegt bei mir\n    unter /Users/jornfreiheit/Sites/Webtech20.\n    Der Ordner /Users/jornfreiheit/Sites ist mein\n    DocumentRoot, deshalb kann ich diese Datei im Browser\n    unter localhost/Webtech20/index.html aufrufen.\n    Der Ordner Webtech20 wird von Git verwaltet. &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Da der Ordner <code>Sites</code> bei mir DocumentRoot ist und sich der <code>Webtech20</code>-Ordner (in dem die neue <code>index.html</code> ist) direkt darunter befindet, kann ich mir die Datei im Browser unter <code>localhost/Webtech20/index.html</code> anzeigen lassen. Das nat nichts mit Git zu tun, sondern mit dem DocumentRoot des lokalen Webservers.</p> <p>Wir f\u00fcgen im Terminal im <code>Webtech20</code>-Ordner diese Datei dem Git-Repoitory hinzu (falls noch nicht automatisch durch unsere IDE passiert):</p> <pre><code>jornfreiheit@Jorns-MacBook-Pro Webtech20 % git add index.html\njornfreiheit@Jorns-MacBook-Pro Webtech20 % git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\nnew file:   .idea/.gitignore\n  new file:   .idea/Webtech20.iml\n  new file:   .idea/misc.xml\n  new file:   .idea/modules.xml\n  new file:   .idea/vcs.xml\n  new file:   index.html\n\njornfreiheit@Jorns-MacBook-Pro Webtech20 % </code></pre> <p>Au\u00dferdem sollten wir den <code>.idea</code>-Ordner von der Git-Verwaltung ausschlie\u00dfen. Dazu erstellen wir im <code>Webtech20</code>-Ordner eine Datei <code>.gitignore</code>, falls diese noch nicht existiert und tragen dort <code>.idea</code> ein. F\u00fcgen Sie die Datei <code>.gitignore</code> Ihrem repository hinzu, f\u00fchren Sie Ihr erstes Commit aus und pushen Ihr Repository nach Github:</p> <pre><code>git add .ignore\ngit commit -m \"erstes commit\"\ngit push\n</code></pre> <p>In Github erkenn Sie, dass commit und push geklappt haben:</p> <p></p> <p>In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit <code>git add .</code> hinzu, erstellen neue Commits mit <code>git commit -m \"Commit-Nachricht\"</code> und pushen dann nach Github mit <code>git push</code>. </p>"},{"location":"tools/#option-b-repository-in-github-anlegen-und-lokal-anlegen-dann-verbinden","title":"Option B: Repository in Github anlegen und lokal anlegen, dann verbinden","text":"<ol> <li>Legen Sie sich wie oben beschrieben ein Repository unter GitHub an. Kopieren Sie die Remote-URL (z.B. <code>https://github.com/jfreiheit/Webtech20.git</code>). </li> <li>Erstellen Sie sich lokal einen Ordner (am besten in Ihrem DocumentRoot), z.B. <code>Webtech20</code> (<code>mkdir Webtech20</code>). Wechseln Sie in diesen Ordner (<code>cd Webtech20</code>) und f\u00fchren Sie dort <code>git init</code> aus. Es entsteht ein <code>.git</code>-Ordner. </li> <li>F\u00fcgen Sie diesem lokalen Repository alle Ihre bisher in <code>Webtech20</code> erstellten Dateien mit <code>git add .</code> hinzu. </li> <li>Erstellen Sie ein Commit, z.B. <code>git commit -m \"initial commit\"</code>.</li> <li>Verbinden Sie Ihr lokales Repository mit dem remote-Repository auf Github durch <code>git remote add origin https://github.com/jfreiheit/Webtech20.git</code> (f\u00fcr <code>https://...</code> setzen Sie Ihre Remote-URL ein).</li> <li>Pushen Sie die Dateien auf Ihr remote-Repository: <code>git push --set-upstream origin master</code>. </li> </ol> <p>In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit <code>git add .</code> hinzu, erstellen neue Commits mit <code>git commit -m \"Commit-Nachricht\"</code> und pushen dann nach Github mit <code>git push</code>. </p>"},{"location":"tools/#developer-tools","title":"Developer Tools","text":"<p>Alle Browser sind mit Werkzeugen ausgestattet, die es Web-Entwicklerinnen erm\u00f6glichen, im Browser Informationen \u00fcber die Webanwendung zu erhalten. F\u00fcr einige Browser ist hier angegeben, wie Sie diese Entwicklerwerkzeuge einschalten.</p>"},{"location":"tools/#chrome","title":"Chrome","text":"<p>In Chrome sind die Entwicklerwerkzeuge unter dem Men\u00fc neben der URL-Eingabezeile unter <code>Weitere Tools --&gt; Entwicklertools</code> verf\u00fcgbar (siehe folgendes Bild).</p> <p></p> <p>Die eingeschalteten Entwicklertools offenbaren Ihnen umfassende Informationen \u00fcber die angezeigte Webseite. Besonders interessant ist der Reiter <code>Console</code>:</p> <p></p> <p>oder auch der Reiter <code>Elements</code>, der Ihnen sowohl den HTML- als auch den jeweiligen CSS-Code anzeigt:</p> <p></p> <p>Weiterf\u00fchrende Informationen erhalten Sie unter https://developers.google.com/web/tools/chrome-devtools.</p>"},{"location":"tools/#firefox","title":"Firefox","text":"<p>Zu den Entwicklertools von Firefox finden Sie Informationen auf </p> <ul> <li>https://developer.mozilla.org/de/docs/Tools</li> <li>Firefox Browser Developer </li> </ul> <p>Die Entwicklertools lassen sich in Firefox \u00f6ffnen unter <code>Web-Entwickler --&gt; Inspektor</code>:</p> <p></p> <p>Sie haben die gleichen M\u00f6glichkeiten der Ananlyse wie bei Chrome, bei Safari und anderen Browsern:</p> <p></p>"},{"location":"tools/#safari","title":"Safari","text":"<p>In Safari m\u00fcssen Sie zun\u00e4chst den Men\u00fceintrag <code>Entwickler</code> aktivieren. Eine Anleitung dazu finden Sie z.B. hier auf heise . Weitere Informationen zu den Entwicklertools erhalten Sie z.B. auf</p> <ul> <li>Werkzeuge im Men\u00fc \u201eEntwickler\u201c</li> <li>Safari Developer Help</li> <li>Web Development Tools</li> </ul> <p></p>"},{"location":"tools/#curl","title":"Curl","text":"<p>Curl ist ein Open-Source-Kommandozeilenprogramm, um Daten mittels URL zu transferieren. Curl kann auf der Kommandozeile genutzt werden, um SMTP, HTTP, FTP usw. zu verwenden. Wir werden Curl insbesondere f\u00fcr die HTTP-Anfragemethoden GET und POST verwenden. </p> <p>Eine ausf\u00fchrliche Beschreibung von Curl ist im Buch Everything curl - the book frei verf\u00fcgbar. Die Installation von Curl erfolgt \u00fcber die Curl Download Seite.</p> <p>Zum Testen, ob Curl korrekt funktioniert, k\u00f6nnen Sie im Terminal z.B.</p> <pre><code>curl freiheit.f4.htw-berlin.de/curl.html\n</code></pre> <p>eingeben. Es sollte folgende Ausgabe erscheinen:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Curl-Test&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hallo FIW!&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Mit dem <code>-o</code>-Flag k\u00f6nnen Sie die Datei speichern (Sie k\u00f6nnen einen Dateinamen angeben - hier <code>curl.html</code>):</p> <pre><code>curl -o curl.html freiheit.f4.htw-berlin.de/curl.html\n</code></pre> <p>Da oben die lokale Datei genau so hei\u00dft wie die remote-Datei, h\u00e4tte man auch </p> <pre><code>curl -O freiheit.f4.htw-berlin.de/curl.html\n</code></pre> <p>angeben k\u00f6nnen, also gro\u00dfes <code>-O</code>. Mit dem <code>-d</code>-Flag k\u00f6nnen Parameter \u00fcbergeben und die entsprechende Seite mit einer POST-Anfrage aufgerufen werden. Mit dem zus\u00e4tzlichen <code>-G</code>-Flag erfolgt die Anfrage nicht als POST sondern als GET. Mit dem <code>-I</code>-Flag fragen Sie den Header der Anfrage ab, z.B.:</p> <pre><code>curl -I freiheit.f4.htw-berlin.de/curl.html\n</code></pre> <p>gibt etwas aus in der Art:</p> <pre><code>HTTP/1.1 200 OK\nDate: Thu, 04 Jun 2020 13:59:43 GMT\nServer: Apache/2.4.38 (Debian)\nLast-Modified: Thu, 04 Jun 2020 13:01:59 GMT\nETag: \"78-5a741c004bdb9\"\nAccept-Ranges: bytes\nContent-Length: 120\nVary: Accept-Encoding\nContent-Type: text/html\n</code></pre> <p>F\u00fcr eine vollst\u00e4ndige \u00dcbersicht aller Flags von Curl siehe Curl manpage.</p>"},{"location":"tools/#postman","title":"Postman","text":"<p>Postman ist eine Anwendung, um Schnittstellen (Application Programming Interface - API), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com. Wir beschr\u00e4nken uns zun\u00e4chst auf den Postman API Client. Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld <code>https://postman-echo.com/get</code> ein. Lassen Sie die Auswahl links daneben auf <code>GET</code> und klicken auf den <code>Send</code>-Button. Es erscheint folgendes Bild:</p> <p></p> <p>Neben der <code>GET</code>-Anfrage sind folgende weitere Anfragen (siehe auch HTML \u2192 HTTP) m\u00f6glich:</p> <ul> <li><code>POST</code> - sendet Daten zur Verarbeitung an den Webserver</li> <li><code>PUT</code> - l\u00e4dt existierende Daten (eine Datei) auf den Server</li> <li><code>PATCH</code> - \u00e4ndert Daten (eine Datei), ohne - wie bei <code>PUT</code> - diese vollst\u00e4ndig zu ersetzen</li> <li><code>DELETE</code> - l\u00f6scht die angegebenen Daten auf dem Server</li> </ul>"},{"location":"tools/#nodejs","title":"Node.js","text":"<p>Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns. Callbacks sind Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden (siehe JavaScript \u2192 Callback-Funktionen). </p>"},{"location":"tools/#angular","title":"Angular","text":"<p>Um Angular verwenden zu k\u00f6nnen (siehe auch Angular\u2192Getting started), ben\u00f6tigen Sie das Angular Command Line Interface (CLI). Zur Installation des Angular CLI geben Sie  <pre><code>npm install -g @angular/cli\n</code></pre> ein. Den Paketmanager <code>npm</code> k\u00f6nnen Sie sich mit <code>node.js</code> installieren. Mithilfe des Angular CLI haben Sie dann die M\u00f6glichkeit, ein neues Projekt anzulegen (<code>ng new projektName</code>), eine neue Componente (<code>ng generate component componentenName</code>) usw. und das Projekt auszuf\u00fchren (<code>ng serve</code>). </p> <p>Sollten Sie bei der Installation der Angular-CLI <code>EACCES errors</code> erhalten (<code>permission denied</code>), dann arbeiten Sie an einem Mac ;-). Geben Sie dann im Terminal ein: </p> <pre><code>sudo chown -R `whoami` ~/.npm\nsudo chown -R `whoami` /usr/local/lib/node_modules\n</code></pre> <p>Sollten Sie bei der Installation der Angular-CLI <code>Execution Policy</code>-Errors erhalten (oder danach bei <code>ng version</code>), dann arbeiten Sie an einem Windows-Rechner ;-). Geben Sie dann im Terminal ein: </p> <pre><code>Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned\n</code></pre> <p>Danach sollte <code>npm install -g @angular/cli</code> funktionieren. </p>"},{"location":"tools/#installationen","title":"Installationen","text":"<p>Um den Paketmanager <code>npm</code> zu installieren, laden sie sich <code>node.js</code> hier herunter und installieren Sie es. Nach erfolgreicher Installation sollte sowohl </p> <pre><code>node -v\n</code></pre> <p>funktionieren und eine Versionsnummer ausgeben (z.B. <code>v14.15.0</code>) als auch </p> <pre><code>npm -v\n</code></pre> <p>(z.B. <code>6.14.8</code>). </p> <p>Au\u00dferdem ben\u00f6tigen Sie das Angular-Command-Line-Interface (CLI), das Sie mithilfe des Befehls </p> <pre><code>npm install -g @angular/cli </code></pre> <p>installieren. Danach sollte </p> <pre><code>ng version </code></pre> <p>funktionieren und Ihnen etwas in dieser Art ausgeben:</p> <pre><code>     _                      _                 ____ _     ___\n    / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n/ \u25b3 \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\n/ ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n/_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\n|___/\n\n\nAngular CLI: 15.0.0\nNode: 14.20.0\nPackage Manager: npm 9.1.2\nOS: darwin x64\n\nAngular: \n... \n\nPackage                      Version\n------------------------------------------------------\n@angular-devkit/architect    0.1500.0 (cli-only)\n@angular-devkit/core         15.0.0 (cli-only)\n@angular-devkit/schematics   15.0.0 (cli-only)\n@schematics/angular          15.0.0 (cli-only)\n</code></pre> <p>Jetzt k\u00f6nnen wir unser erstes Angular-Projekt erstellen. </p>"},{"location":"tools/#update-angularcli","title":"Update @angular/cli","text":"<p>Manchmal gibt es vielleicht Warnungen beim Erstellen eines Projektes - etwas in der Art, wie: <pre><code>npm WARN @angular-devkit/build-angular@0.1100.0 requires a peer of @angular/compiler-cli@^11.0.0 || ^11.0.0-next but none is installed. You must install peer dependencies yourself.\nnpm WARN @angular-devkit/build-angular@0.1100.0 requires a peer of typescript@~4.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN @ngtools/webpack@11.0.0 requires a peer of @angular/compiler-cli@^11.0.0 || ^11.0.0-next but none is installed. You must install peer dependencies yourself.\nnpm WARN @ngtools/webpack@11.0.0 requires a peer of typescript@~4.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN icss-utils@5.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN postcss-modules-extract-imports@3.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN postcss-modules-local-by-default@4.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN postcss-modules-scope@3.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN postcss-modules-values@4.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself.\n</code></pre></p> <p>Das liegt meistens daran, dass das Angular-CLI updated werden m\u00fcsste. F\u00fcr das Update von Angular gibt es eine eigene Seite. Gehen Sie wie dort beschrieben vor. </p>"},{"location":"tools/#mysql","title":"MySQL","text":"<p>MySQL ist eine relationale Datenbank und geh\u00f6rt zu den am meisten verwendeten relationalen Datenbanken bei Webanwendungen. Wir h\u00e4tten uns auch f\u00fcr PostgreSQL entscheiden k\u00f6nnen. F\u00fcr einen kurzen Vergleich von MySQL und PostgreSQL siehe hier. Informationen zur Installation von MySQL finden Sie hier. Nach der Installation finden Sie z.B. auf dem Mac unter Systemeinstellungen \u2192 MySQL:</p> <p></p> <p>Achten Sie bei der Installation von MySQL darauf, dass Sie als Authentifizierungsmethode \"Legacy Password ...\" w\u00e4hlen! Sie m\u00fcssen aber MySQL auch nicht lokal installieren, sondern k\u00f6nnen auch den Studi-Server <code>studi.f4.htw-berlin.de</code> verwenden.</p>"},{"location":"tools/#phpmyadmin","title":"phpMyadmin","text":"<p><code>phpMyadmin</code> ist eine graphische Oberfl\u00e4che zur Verwaltung Ihrer <code>MySQL</code>-Datenbanken. Nach erfolgreicher Installation rufen Sie im Browser <code>localhost/phpmyadmin</code> auf und haben Zugriff auf Ihre Datenbanken bzw. k\u00f6nnen diese erstellen, \u00e4ndern und bef\u00fcllen. </p> <p></p>"},{"location":"tools/#mongodb","title":"MongoDB","text":"<p>[MongoDB] ist eine NoSQL (not only SQL) Datenbank. In einer MongoDB werden nicht Relationen, sondern (JavaScript-)Objekte gespeichert. Die CRUD-Operationen auf einer MongoDB sind z.B. hier erkl\u00e4rt. Die MongoDB kann lokal als MongoDB (Community Edition) installiert werden. Zur Installationsseite geht es hier. Nach der Installation muss MongoDB gestartet werden. Unter Mac (f\u00fcr MongoDB-Version 4.4) geht es z.B. so:</p> <pre><code>brew services start mongodb-community@4.4\n</code></pre> <p>Um MongoDB zu stoppen, muss beim Mac <code>brew services stop mongodb-community@4.4</code> eingegeben werden. Wenn Sie dann <code>mongo</code> ins Terminal eingeben, sollte etwas in dieser Art erscheinen:</p> <pre><code>MongoDB shell version v4.4.5\nconnecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb\nImplicit session: session { \"id\" : UUID(\"0b972fa5-fad9-48bb-8a7f-c81cc0778620\") }\nMongoDB server version: 4.4.5\nWelcome to the MongoDB shell.\nFor interactive help, type \"help\".\nFor more comprehensive documentation, see\n    https://docs.mongodb.com/\nQuestions? Try the MongoDB Developer Community Forums\n    https://community.mongodb.com\n---\nThe server generated these startup warnings when booting: 2021-07-01T11:40:21.328+02:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\n---\n---\n        Enable MongoDB's free cloud-based monitoring service, which will then receive and display\n        metrics about your deployment (disk utilization, CPU, operation statistics, etc).\n\n        The monitoring data will be available on a MongoDB website with a unique URL accessible to you\n        and anyone you share the URL with. MongoDB may use this information to make product\n        improvements and to suggest MongoDB products and deployment options to you.\n\n        To enable free monitoring, run the following command: db.enableFreeMonitoring()\nTo permanently disable this reminder, run the following command: db.disableFreeMonitoring()\n---\n&gt;\n</code></pre>"},{"location":"tools/#mongodb-atlas","title":"MongoDB Atlas","text":"<p>Sie m\u00fcssen sich MongoDB nicht on-premise installieren, sondern Sie k\u00f6nnen auch die Cloud-Version MongoDB Atlas verwenden. Dazu ben\u00f6tigen Sie einen Account f\u00fcr MongoDB Atlas. Folgen Sie einfach den Installationsschritten, wenn Sie unter https://www.mongodb.com/atlas/database auf <code>Try Free</code> klicken. </p> <p>Um sich mit Atlas zu verbinden, ben\u00f6tigen Sie einen \u00f6ffentlichen und einen privaten API-Key. Diese m\u00fcssen Sie erzeugen. Folgen Sie dazu den Anweisungen unter https://www.mongodb.com/docs/atlas/configure-api-access/.</p> <p>Wenn Sie sich ein Cluster erstellt haben, dann sehen Sie in der Atlas-Webseite einen <code>Connect</code>-Button, mit dessen Hilfe Sie die Verbindung zur Datenbank erstellen k\u00f6nnen (siehe Abbildung):</p> <p></p> <p>Der Verbindungsstring mit Atlas hat ungef\u00e4hr die folgende Form:</p> <pre><code>mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.g3nbd.mongodb.net/test\n</code></pre>"},{"location":"tools/#mongodb-compass","title":"MongoDB Compass","text":"<p>Ein n\u00fctzliches Werkzeug zur Verwaltung Ihrer Datenbanken ist MongoDB Compass. Es ist eine graphische Nutzeroberfl\u00e4che, um die in der MongoDB gespeicherten Daten anzuschauen und zu verwalten. Sie k\u00f6nnten auch alles \u00fcber die MongoDB Shell erledigen, aber mit Compass ist es komfortabler. W\u00e4hlen Sie unter https://www.mongodb.com/products/compass den Button <code>Download Now</code> und folgen Sie den Installationsanweisungen. </p>"},{"location":"tools/#mongosh-mongodb-in-der-shell","title":"Mongosh - MongoDB in der Shell","text":"<p>Die Verwaltung einer MongoDB kann entweder mithilfe von Compass oder mit der MongoDB Shell mongosh erfolgen. Installationsanleitungen zu mongosh finden Sie hier. Nach der Installation von mongosh geben wir im Terminal </p> <pre><code>mongosh </code></pre> <p>ein. Es erscheint etwas in der Form:</p> <pre><code>Current Mongosh Log ID: 61ae3471fef87d1bebfa13a1\nConnecting to:      mongodb://127.0.0.1:27017/?directConnection=true&amp;serverSelectionTimeoutMS=2000\nUsing MongoDB:      5.0.3\nUsing Mongosh:      1.1.6\n\nFor mongosh info see: https://docs.mongodb.com/mongodb-shell/\n\n\nTo help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy).\nYou can opt-out by running the disableTelemetry() command.\n\n------\n   The server generated these startup warnings when booting:\n   2021-12-03T08:35:22.188+01:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\n------\n\nWarning: Found ~/.mongorc.js, but not ~/.mongoshrc.js. ~/.mongorc.js will not be loaded.\n  You may want to copy or rename ~/.mongorc.js to ~/.mongoshrc.js.\ntest&gt; </code></pre> <p>Die Warnung kann ignoriert werden. Die Datei <code>mongorc.js</code> wurde erstellt, als einmal in die Shell <code>mongo</code> eingegeben wurde. Das ist aber <code>deprecated</code> und es soll stattdessen die <code>mongosh</code> verwendet werden, was wir ja auch machen. Die Eingabe von <code>mongosh</code> ist \u00e4quivalent zu <code>mongosh \"mongodb://localhost:27017\"</code>. Das bedeutet, dass die MongoDB auf dem Port <code>27017</code> l\u00e4uft. Der Port kann auch ge\u00e4ndert werden, siehe dazu hier.</p>"},{"location":"tools/#weitere-hilfen","title":"Weitere Hilfen","text":""},{"location":"tools/#prozesse-und-ports","title":"Prozesse und Ports","text":"<p>Wenn Sie herausbekommen wollen, welche Ports bereits belegt sind und durch welchen Prozess, dann geben Sie im Terminal ein:</p> <pre><code>lsof -i -P | grep -i LISTEN\n</code></pre> <p>Eventuell m\u00fcssen Sie ein <code>sudo</code> voranstellen. Sie erhalten eine Ausgabe in der Form (variiert nat\u00fcrlich stark):</p> <pre><code>rapportd   372 jornfreiheit    4u  IPv4 0x5cee55fd054bd73      0t0  TCP *:57124 (LISTEN)\nrapportd   372 jornfreiheit    5u  IPv6 0x5cee55fab8990c3      0t0  TCP *:57124 (LISTEN)\nphpstorm   456 jornfreiheit   55u  IPv4 0x5cee55faabf19b3      0t0  TCP localhost:6942 (LISTEN)\nphpstorm   456 jornfreiheit  355u  IPv4 0x5cee55fb7f034f3      0t0  TCP localhost:63342 (LISTEN)\nDropbox   2638 jornfreiheit  129u  IPv6 0x5cee55fb262a223      0t0  TCP *:17500 (LISTEN)\nDropbox   2638 jornfreiheit  130u  IPv4 0x5cee55fb25ea393      0t0  TCP *:17500 (LISTEN)\nDropbox   2638 jornfreiheit  185u  IPv4 0x5cee55fb7f00393      0t0  TCP localhost:17600 (LISTEN)\nDropbox   2638 jornfreiheit  194u  IPv4 0x5cee55fb9e31753      0t0  TCP localhost:17603 (LISTEN)\nnode      9070 jornfreiheit   21u  IPv6 0x5cee55fb5913843      0t0  TCP *:8080 (LISTEN)\nPython    9138 jornfreiheit    5u  IPv4 0x5cee55fcfdf7753      0t0  TCP localhost:8000 (LISTEN)\n</code></pre> <p>Wenn Sie nun z.B. einen bestimmten Prozess killen wollen, z.B. den Python-Prozess, der in <code>localhost</code> auf Port <code>8000</code> l\u00e4uft, dann geben Sie </p> <pre><code>kill -9 9138\n</code></pre> <p>im Terminal ein. <code>9138</code> ist die <code>PID</code> des entsprechenden Prozesses.</p>"},{"location":"uebungen/","title":"\u00dcbungen","text":""},{"location":"uebungen/#ubung-0","title":"\u00dcbung 0","text":"Infrastruktur einrichten <ul> <li>w\u00e4hlen Sie eine IDE aus und installieren Sie diese </li> <li>richten Sie sich ein Git-Repository ein (z.B. <code>WebTech23</code>)</li> <li>erstellen Sie im Ordner <code>WebTech23</code> eine <code>index.html</code> und versuchen Sie darin bereits einige Inhalte einzupflegen, z.B. eine kleine pers\u00f6nliche Webseite oder eine Startseite von der aus alle \u00dcbungen erreichbar sind o.\u00e4.</li> <li>commiten und pushen Sie Ihr Repository auf einen zentralen Dienst (siehe)</li> <li>laden Sie mich zu Ihrem Git-Dienst ein (siehe)</li> </ul>"},{"location":"uebungen/#ubung-1","title":"\u00dcbung 1","text":"\u00dcbungsaufgabe 1 (HTML) <ul> <li>Erstellen Sie in einem <code>Uebung1</code>-Ordner eine Datei <code>uebung1.html</code>. Das <code>body</code>-Element soll ein <code>header</code>-Element, ein <code>nav</code>-Element, ein <code>section</code>-Element und ein <code>footer</code>-Element enthalten. </li> <li> <p>Unter dieser \u00dcbungsaufgabe (siehe <code>mockupdata</code>) ist der HTML-Code einer Tabelle mit allen Teilnehmerinnen einer Veranstaltung. Kopieren Sie den Inhalt der Datei so in Ihren HTML-Code, dass folgende Seite erscheint: </p> </li> <li> <p>Es sollen 4 Unterseiten erstellt werden. Bei Klick auf diese Seiten soll die Tabelle jeweils nur die Teilnehmerinnen enthalten, deren Nachname mit dem entsprechenden Anfangsbuchstaben beginnt (also in <code>ag.html</code> nur alle Nachnamen, die mit A bis G beginnen). Die Seiten <code>ag.html</code>, <code>hl.html</code>, <code>mr.html</code> und <code>sz.html</code> sollen im Ordner <code>NN</code> abgelegt werden, der Unterordner von <code>Uebung1</code> ist.</p> </li> <li>Achten Sie darauf, dass man von jeder Unterseite auf jede andere Unterseite und auch auf die Hauptseite (<code>uebung1.html</code>) wechseln k\u00f6nnen muss.</li> <li>Das einzubindende Logo des Studiengangs liegt hier. Es soll in einen <code>images</code>-Ordner gespeichert werden, der in der Ordner-Hierarchie neben dem <code>Uebung1</code>-Ordner liegt. Um die Gr\u00f6\u00dfe des Bildes festzulegen, k\u00f6nnen Sie mit Hilfe des <code>style</code>-Attributes die H\u00f6he und die Breite bestimmen: <code>style=\"width:53px; height:48px;\"</code> </li> <li>N\u00e4chste Woche wird Uebung1 um CSS erweitert. </li> </ul> mockupdata <pre><code>&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Vorname&lt;/th&gt;\n            &lt;th&gt;Nachname&lt;/th&gt;\n            &lt;th&gt;E-Mail-Adresse&lt;/th&gt;\n            &lt;th&gt;IP-Adresse&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Adam&lt;/td&gt;\n            &lt;td&gt;Anderson&lt;/td&gt;\n            &lt;td&gt;aanderson8@google.fr&lt;/td&gt;\n            &lt;td&gt;118.93.83.157&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Susan&lt;/td&gt;\n            &lt;td&gt;Andrews&lt;/td&gt;\n            &lt;td&gt;sandrewsn@google.co.jp&lt;/td&gt;\n            &lt;td&gt;228.214.9.251&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Catherine&lt;/td&gt;\n            &lt;td&gt;Andrews&lt;/td&gt;\n            &lt;td&gt;candrewsp@noaa.gov&lt;/td&gt;\n            &lt;td&gt;112.111.87.178&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Alan&lt;/td&gt;\n            &lt;td&gt;Bradley&lt;/td&gt;\n            &lt;td&gt;abradley1c@globo.com&lt;/td&gt;\n            &lt;td&gt;229.152.117.127&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Anne&lt;/td&gt;\n            &lt;td&gt;Brooks&lt;/td&gt;\n            &lt;td&gt;abrooks16@bravesites.com&lt;/td&gt;\n            &lt;td&gt;243.159.39.234&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Russell&lt;/td&gt;\n            &lt;td&gt;Brown&lt;/td&gt;\n            &lt;td&gt;rbrownq@nifty.com&lt;/td&gt;\n            &lt;td&gt;215.38.120.242&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Ryan&lt;/td&gt;\n            &lt;td&gt;Burton&lt;/td&gt;\n            &lt;td&gt;rburton18@foxnews.com&lt;/td&gt;\n            &lt;td&gt;159.60.107.14&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Roy&lt;/td&gt;\n            &lt;td&gt;Campbell&lt;/td&gt;\n            &lt;td&gt;rcampbell1@geocities.com&lt;/td&gt;\n            &lt;td&gt;237.232.34.20&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Russell&lt;/td&gt;\n            &lt;td&gt;Campbell&lt;/td&gt;\n            &lt;td&gt;rcampbell17@eventbrite.com&lt;/td&gt;\n            &lt;td&gt;251.2.92.63&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Bonnie&lt;/td&gt;\n            &lt;td&gt;Coleman&lt;/td&gt;\n            &lt;td&gt;bcoleman11@fc2.com&lt;/td&gt;\n            &lt;td&gt;109.150.122.102&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Ernest&lt;/td&gt;\n            &lt;td&gt;Coleman&lt;/td&gt;\n            &lt;td&gt;ecoleman15@businessweek.com&lt;/td&gt;\n            &lt;td&gt;213.173.4.7&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Richard&lt;/td&gt;\n            &lt;td&gt;Cruz&lt;/td&gt;\n            &lt;td&gt;rcruz7@unc.edu&lt;/td&gt;\n            &lt;td&gt;235.124.23.221&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Sean&lt;/td&gt;\n            &lt;td&gt;Cruz&lt;/td&gt;\n            &lt;td&gt;scruz10@answers.com&lt;/td&gt;\n            &lt;td&gt;92.255.49.227&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Rebecca&lt;/td&gt;\n            &lt;td&gt;Cunningham&lt;/td&gt;\n            &lt;td&gt;rcunninghamd@mac.com&lt;/td&gt;\n            &lt;td&gt;65.79.191.52&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Margaret&lt;/td&gt;\n            &lt;td&gt;Evans&lt;/td&gt;\n            &lt;td&gt;mevansh@pcworld.com&lt;/td&gt;\n            &lt;td&gt;162.10.86.196&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Jeffrey&lt;/td&gt;\n            &lt;td&gt;Ford&lt;/td&gt;\n            &lt;td&gt;jford14@cnet.com&lt;/td&gt;\n            &lt;td&gt;210.216.54.14&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Andrea&lt;/td&gt;\n            &lt;td&gt;Gardner&lt;/td&gt;\n            &lt;td&gt;agardnerv@woothemes.com&lt;/td&gt;\n            &lt;td&gt;179.91.0.30&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Deborah&lt;/td&gt;\n            &lt;td&gt;George&lt;/td&gt;\n            &lt;td&gt;dgeorge6@furl.net&lt;/td&gt;\n            &lt;td&gt;201.76.47.162&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Sean&lt;/td&gt;\n            &lt;td&gt;Gibson&lt;/td&gt;\n            &lt;td&gt;sgibsony@alexa.com&lt;/td&gt;\n            &lt;td&gt;48.114.103.55&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Virginia&lt;/td&gt;\n            &lt;td&gt;Graham&lt;/td&gt;\n            &lt;td&gt;vgrahamk@aol.com&lt;/td&gt;\n            &lt;td&gt;165.219.171.1&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Steven&lt;/td&gt;\n            &lt;td&gt;Hamilton&lt;/td&gt;\n            &lt;td&gt;shamiltonu@state.tx.us&lt;/td&gt;\n            &lt;td&gt;38.194.91.201&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Virginia&lt;/td&gt;\n            &lt;td&gt;Hawkins&lt;/td&gt;\n            &lt;td&gt;vhawkinsf@ehow.com&lt;/td&gt;\n            &lt;td&gt;93.120.46.203&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Edward&lt;/td&gt;\n            &lt;td&gt;Hicks&lt;/td&gt;\n            &lt;td&gt;ehicksc@pcworld.com&lt;/td&gt;\n            &lt;td&gt;199.153.27.1&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Mark&lt;/td&gt;\n            &lt;td&gt;Johnson&lt;/td&gt;\n            &lt;td&gt;mjohnsonj@hostgator.com&lt;/td&gt;\n            &lt;td&gt;73.87.135.206&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Ruth&lt;/td&gt;\n            &lt;td&gt;Jordan&lt;/td&gt;\n            &lt;td&gt;rjordan1a@smugmug.com&lt;/td&gt;\n            &lt;td&gt;193.140.80.64&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Antonio&lt;/td&gt;\n            &lt;td&gt;Kim&lt;/td&gt;\n            &lt;td&gt;akim4@odnoklassniki.ru&lt;/td&gt;\n            &lt;td&gt;168.244.191.78&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Jennifer&lt;/td&gt;\n            &lt;td&gt;Marshall&lt;/td&gt;\n            &lt;td&gt;jmarshallt@gnu.org&lt;/td&gt;\n            &lt;td&gt;104.191.49.94&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Eric&lt;/td&gt;\n            &lt;td&gt;Matthews&lt;/td&gt;\n            &lt;td&gt;ematthews5@independent.co.uk&lt;/td&gt;\n            &lt;td&gt;138.194.30.1&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Raymond&lt;/td&gt;\n            &lt;td&gt;Mcdonald&lt;/td&gt;\n            &lt;td&gt;rmcdonald2@ihg.com&lt;/td&gt;\n            &lt;td&gt;161.24.42.24&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Eric&lt;/td&gt;\n            &lt;td&gt;Miller&lt;/td&gt;\n            &lt;td&gt;emillere@creativecommons.org&lt;/td&gt;\n            &lt;td&gt;122.159.17.218&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Jonathan&lt;/td&gt;\n            &lt;td&gt;Morales&lt;/td&gt;\n            &lt;td&gt;jmoralesa@ovh.net&lt;/td&gt;\n            &lt;td&gt;97.65.110.105&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Marie&lt;/td&gt;\n            &lt;td&gt;Morgan&lt;/td&gt;\n            &lt;td&gt;mmorganb@cloudflare.com&lt;/td&gt;\n            &lt;td&gt;226.79.152.112&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Amanda&lt;/td&gt;\n            &lt;td&gt;Nelson&lt;/td&gt;\n            &lt;td&gt;anelson13@indiatimes.com&lt;/td&gt;\n            &lt;td&gt;161.185.121.245&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Lisa&lt;/td&gt;\n            &lt;td&gt;Olson&lt;/td&gt;\n            &lt;td&gt;lolsonr@telegraph.co.uk&lt;/td&gt;\n            &lt;td&gt;77.245.172.100&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Alice&lt;/td&gt;\n            &lt;td&gt;Ortiz&lt;/td&gt;\n            &lt;td&gt;aortizw@histats.com&lt;/td&gt;\n            &lt;td&gt;179.52.222.21&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Peter&lt;/td&gt;\n            &lt;td&gt;Phillips&lt;/td&gt;\n            &lt;td&gt;pphillipss@1688.com&lt;/td&gt;\n            &lt;td&gt;11.158.255.76&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Matthew&lt;/td&gt;\n            &lt;td&gt;Porter&lt;/td&gt;\n            &lt;td&gt;mporter9@europa.eu&lt;/td&gt;\n            &lt;td&gt;174.81.178.88&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Tammy&lt;/td&gt;\n            &lt;td&gt;Ray&lt;/td&gt;\n            &lt;td&gt;trayx@weather.com&lt;/td&gt;\n            &lt;td&gt;192.243.38.190&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Mark&lt;/td&gt;\n            &lt;td&gt;Richardson&lt;/td&gt;\n            &lt;td&gt;mrichardson1d@ihg.com&lt;/td&gt;\n            &lt;td&gt;209.217.14.154&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Joan&lt;/td&gt;\n            &lt;td&gt;Roberts&lt;/td&gt;\n            &lt;td&gt;jroberts12@alibaba.com&lt;/td&gt;\n            &lt;td&gt;4.91.143.62&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Kathleen&lt;/td&gt;\n            &lt;td&gt;Rose&lt;/td&gt;\n            &lt;td&gt;kroseg@pinterest.com&lt;/td&gt;\n            &lt;td&gt;222.172.140.56&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Steve&lt;/td&gt;\n            &lt;td&gt;Sanders&lt;/td&gt;\n            &lt;td&gt;ssanders1b@wikispaces.com&lt;/td&gt;\n            &lt;td&gt;91.61.109.245&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Shirley&lt;/td&gt;\n            &lt;td&gt;Scott&lt;/td&gt;\n            &lt;td&gt;sscottm@macromedia.com&lt;/td&gt;\n            &lt;td&gt;219.237.108.82&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Lillian&lt;/td&gt;\n            &lt;td&gt;Stephens&lt;/td&gt;\n            &lt;td&gt;lstephens19@hugedomains.com&lt;/td&gt;\n            &lt;td&gt;89.85.137.204&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Nicole&lt;/td&gt;\n            &lt;td&gt;Thompson&lt;/td&gt;\n            &lt;td&gt;nthompson3@admin.ch&lt;/td&gt;\n            &lt;td&gt;13.183.208.155&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Marie&lt;/td&gt;\n            &lt;td&gt;Thompson&lt;/td&gt;\n            &lt;td&gt;mthompsonz@yelp.com&lt;/td&gt;\n            &lt;td&gt;162.164.5.231&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Alan&lt;/td&gt;\n            &lt;td&gt;Vasquez&lt;/td&gt;\n            &lt;td&gt;avasquezo@miibeian.gov.cn&lt;/td&gt;\n            &lt;td&gt;178.109.86.172&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Mildred&lt;/td&gt;\n            &lt;td&gt;Watkins&lt;/td&gt;\n            &lt;td&gt;mwatkins0@miibeian.gov.cn&lt;/td&gt;\n            &lt;td&gt;150.67.132.64&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Eugene&lt;/td&gt;\n            &lt;td&gt;Williams&lt;/td&gt;\n            &lt;td&gt;ewilliamsi@deliciousdays.com&lt;/td&gt;\n            &lt;td&gt;67.208.26.182&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Catherine&lt;/td&gt;\n            &lt;td&gt;Williams&lt;/td&gt;\n            &lt;td&gt;cwilliamsl@360.cn&lt;/td&gt;\n            &lt;td&gt;154.87.204.51&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"uebungen/#ubung-2","title":"\u00dcbung 2","text":"\u00dcbungsaufgabe 2 (CSS) <ul> <li>Erstellen Sie (falls noch nicht geschehen) eine <code>index.html</code>-Datei in Ihrem Repository-Ordner (also z.B. <code>DocumentRoot/Webtech22</code>) derart, dass diese direkte Links auf Ihre L\u00f6sungen der \u00dcbungen enthalten (z.B. in einer Tabelle oder einer Liste).</li> <li>Kopieren Sie den Ordner <code>Uebung1</code> in den Ordner <code>Uebung2</code> (also inkl. Ordner <code>NN</code>). \u00c4ndern Sie darin die Datei <code>uebung1.html</code> zu <code>uebung2.html</code> (umbenennen). \u00c4ndern Sie entsprechend alle Links innerhalb der Datei, damit Sie z.B. auf den Ordner <code>Uebung2/NN</code> zugreifen und nicht mehr auf <code>Uebung1/NN</code>.</li> <li>Legen Sie sich im <code>Uebung2</code>-Ordner einen Ordner <code>styles</code> an. Erstellen Sie in dem <code>styles</code>-Ordner eine Datei <code>mystyles.css</code>.</li> <li>F\u00fcgen Sie im <code>&lt;head&gt;</code>-Bereich der <code>uebung2.html</code> eine logische Verkn\u00fcpfung zur <code>mystyles.css</code>-Datei ein (<code>&lt;link href=\"./styles/mystyles.css\" rel=\"stylesheet\"&gt;</code>). </li> <li>In <code>mystyles.css</code> definieren Sie (versuchen Sie mind. 6 der genannten 8 Punkte umzusetzen):<ul> <li>Verdana als Schriftart f\u00fcr das ganze Dokument</li> <li>der <code>&lt;header&gt;</code> soll das HTW-Grau als Hintergrundfarbe, HTW-Orange als Schriftfarbe und der Text zentriert sein (siehe HTW Corporate Design).</li> <li>die Tabelle soll ungef\u00e4hr wie dargestellt aussehen:     </li> <li>d.h. mit Rahmen, mit einem Schatten, die Spalten\u00fcberschriften in wei\u00df, mit HTW-gr\u00fcnem Hintergrund.   </li> <li>Das <code>&lt;nav&gt;</code>-Feld hat einen Abstand nach oben und nach unten von jeweils <code>50px</code>.</li> <li><code>&lt;a&gt;</code>-Elemente in einem <code>&lt;nav&gt;</code>-Element haben einen grauen Rand, deren Ecken abgerundet sind. Die Hintergrundfarbe ist HTW-blau. Schriftart ist wei\u00df und bold. <code>&lt;a&gt;</code>-Elemente in einem <code>&lt;nav&gt;</code>-Element sind nicht unterstrichen!</li> <li>F\u00e4hrt man mit der Maus \u00fcber ein <code>&lt;a&gt;</code>-Element in einem <code>&lt;nav&gt;</code>-Element \u00e4ndert sich die Hintergrundfarbe in HTW-grau und die Schriftfarbe in HTW-orange.      </li> <li>Die Tabelle hat eine Breite von 80% des <code>&lt;section&gt;</code>-Elements. </li> <li>Der <code>&lt;footer&gt;</code> ist in HTW-Orange, die Schrift ist schwarz, der Text ist mittig und die Schrift ist kleiner. Die H\u00f6he des footers entsteht dadurch, dass die Schrift einen Abstand nach oben und nach unten von jeweils <code>20px</code> hat.</li> </ul> </li> <li>Am Ende soll es ungef\u00e4hr so aussehen: </li> </ul> Eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 2 uebung2.htmlmystyles.css <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Uebung 2&lt;/title&gt;\n    &lt;link href=\"./styles/mystyles.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;Teilnehmerinnen Webtech&lt;/h1&gt;\n        &lt;img src=\"../images/fiw.jpg\" alt=\"FIW Logo\" style=\"width:53px; height: 48px;\"&gt;\n    &lt;/header&gt;\n    &lt;nav&gt;\n        &lt;a href=\"#\"&gt;ALLE&lt;/a&gt;\n        &lt;a href=\"NN/ag.html\" title=\"Alle Nachnamen A-G\"&gt;A-G&lt;/a&gt;\n        &lt;a href=\"NN/hl.html\"&gt;H-L&lt;/a&gt;\n        &lt;a href=\"NN/mr.html\"&gt;M-R&lt;/a&gt;\n        &lt;a href=\"NN/sz.html\"&gt;S-Z&lt;/a&gt;\n        &lt;a href=\"../index.html\"&gt;Startseite&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;section&gt;\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Vorname&lt;/th&gt;\n                    &lt;th&gt;Nachname&lt;/th&gt;\n                    &lt;th&gt;E-Mail-Adresse&lt;/th&gt;\n                    &lt;th&gt;IP-Adresse&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Adam&lt;/td&gt;\n                    &lt;td&gt;Anderson&lt;/td&gt;\n                    &lt;td&gt;aanderson8@google.fr&lt;/td&gt;\n                    &lt;td&gt;118.93.83.157&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Susan&lt;/td&gt;\n                    &lt;td&gt;Andrews&lt;/td&gt;\n                    &lt;td&gt;sandrewsn@google.co.jp&lt;/td&gt;\n                    &lt;td&gt;228.214.9.251&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Catherine&lt;/td&gt;\n                    &lt;td&gt;Andrews&lt;/td&gt;\n                    &lt;td&gt;candrewsp@noaa.gov&lt;/td&gt;\n                    &lt;td&gt;112.111.87.178&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Alan&lt;/td&gt;\n                    &lt;td&gt;Bradley&lt;/td&gt;\n                    &lt;td&gt;abradley1c@globo.com&lt;/td&gt;\n                    &lt;td&gt;229.152.117.127&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Anne&lt;/td&gt;\n                    &lt;td&gt;Brooks&lt;/td&gt;\n                    &lt;td&gt;abrooks16@bravesites.com&lt;/td&gt;\n                    &lt;td&gt;243.159.39.234&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Russell&lt;/td&gt;\n                    &lt;td&gt;Brown&lt;/td&gt;\n                    &lt;td&gt;rbrownq@nifty.com&lt;/td&gt;\n                    &lt;td&gt;215.38.120.242&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Ryan&lt;/td&gt;\n                    &lt;td&gt;Burton&lt;/td&gt;\n                    &lt;td&gt;rburton18@foxnews.com&lt;/td&gt;\n                    &lt;td&gt;159.60.107.14&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Roy&lt;/td&gt;\n                    &lt;td&gt;Campbell&lt;/td&gt;\n                    &lt;td&gt;rcampbell1@geocities.com&lt;/td&gt;\n                    &lt;td&gt;237.232.34.20&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Russell&lt;/td&gt;\n                    &lt;td&gt;Campbell&lt;/td&gt;\n                    &lt;td&gt;rcampbell17@eventbrite.com&lt;/td&gt;\n                    &lt;td&gt;251.2.92.63&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Bonnie&lt;/td&gt;\n                    &lt;td&gt;Coleman&lt;/td&gt;\n                    &lt;td&gt;bcoleman11@fc2.com&lt;/td&gt;\n                    &lt;td&gt;109.150.122.102&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Ernest&lt;/td&gt;\n                    &lt;td&gt;Coleman&lt;/td&gt;\n                    &lt;td&gt;ecoleman15@businessweek.com&lt;/td&gt;\n                    &lt;td&gt;213.173.4.7&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Richard&lt;/td&gt;\n                    &lt;td&gt;Cruz&lt;/td&gt;\n                    &lt;td&gt;rcruz7@unc.edu&lt;/td&gt;\n                    &lt;td&gt;235.124.23.221&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Sean&lt;/td&gt;\n                    &lt;td&gt;Cruz&lt;/td&gt;\n                    &lt;td&gt;scruz10@answers.com&lt;/td&gt;\n                    &lt;td&gt;92.255.49.227&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Rebecca&lt;/td&gt;\n                    &lt;td&gt;Cunningham&lt;/td&gt;\n                    &lt;td&gt;rcunninghamd@mac.com&lt;/td&gt;\n                    &lt;td&gt;65.79.191.52&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Margaret&lt;/td&gt;\n                    &lt;td&gt;Evans&lt;/td&gt;\n                    &lt;td&gt;mevansh@pcworld.com&lt;/td&gt;\n                    &lt;td&gt;162.10.86.196&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Jeffrey&lt;/td&gt;\n                    &lt;td&gt;Ford&lt;/td&gt;\n                    &lt;td&gt;jford14@cnet.com&lt;/td&gt;\n                    &lt;td&gt;210.216.54.14&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Andrea&lt;/td&gt;\n                    &lt;td&gt;Gardner&lt;/td&gt;\n                    &lt;td&gt;agardnerv@woothemes.com&lt;/td&gt;\n                    &lt;td&gt;179.91.0.30&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Deborah&lt;/td&gt;\n                    &lt;td&gt;George&lt;/td&gt;\n                    &lt;td&gt;dgeorge6@furl.net&lt;/td&gt;\n                    &lt;td&gt;201.76.47.162&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Sean&lt;/td&gt;\n                    &lt;td&gt;Gibson&lt;/td&gt;\n                    &lt;td&gt;sgibsony@alexa.com&lt;/td&gt;\n                    &lt;td&gt;48.114.103.55&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Virginia&lt;/td&gt;\n                    &lt;td&gt;Graham&lt;/td&gt;\n                    &lt;td&gt;vgrahamk@aol.com&lt;/td&gt;\n                    &lt;td&gt;165.219.171.1&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Steven&lt;/td&gt;\n                    &lt;td&gt;Hamilton&lt;/td&gt;\n                    &lt;td&gt;shamiltonu@state.tx.us&lt;/td&gt;\n                    &lt;td&gt;38.194.91.201&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Virginia&lt;/td&gt;\n                    &lt;td&gt;Hawkins&lt;/td&gt;\n                    &lt;td&gt;vhawkinsf@ehow.com&lt;/td&gt;\n                    &lt;td&gt;93.120.46.203&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Edward&lt;/td&gt;\n                    &lt;td&gt;Hicks&lt;/td&gt;\n                    &lt;td&gt;ehicksc@pcworld.com&lt;/td&gt;\n                    &lt;td&gt;199.153.27.1&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Mark&lt;/td&gt;\n                    &lt;td&gt;Johnson&lt;/td&gt;\n                    &lt;td&gt;mjohnsonj@hostgator.com&lt;/td&gt;\n                    &lt;td&gt;73.87.135.206&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Ruth&lt;/td&gt;\n                    &lt;td&gt;Jordan&lt;/td&gt;\n                    &lt;td&gt;rjordan1a@smugmug.com&lt;/td&gt;\n                    &lt;td&gt;193.140.80.64&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Antonio&lt;/td&gt;\n                    &lt;td&gt;Kim&lt;/td&gt;\n                    &lt;td&gt;akim4@odnoklassniki.ru&lt;/td&gt;\n                    &lt;td&gt;168.244.191.78&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Jennifer&lt;/td&gt;\n                    &lt;td&gt;Marshall&lt;/td&gt;\n                    &lt;td&gt;jmarshallt@gnu.org&lt;/td&gt;\n                    &lt;td&gt;104.191.49.94&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Eric&lt;/td&gt;\n                    &lt;td&gt;Matthews&lt;/td&gt;\n                    &lt;td&gt;ematthews5@independent.co.uk&lt;/td&gt;\n                    &lt;td&gt;138.194.30.1&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Raymond&lt;/td&gt;\n                    &lt;td&gt;Mcdonald&lt;/td&gt;\n                    &lt;td&gt;rmcdonald2@ihg.com&lt;/td&gt;\n                    &lt;td&gt;161.24.42.24&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Eric&lt;/td&gt;\n                    &lt;td&gt;Miller&lt;/td&gt;\n                    &lt;td&gt;emillere@creativecommons.org&lt;/td&gt;\n                    &lt;td&gt;122.159.17.218&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Jonathan&lt;/td&gt;\n                    &lt;td&gt;Morales&lt;/td&gt;\n                    &lt;td&gt;jmoralesa@ovh.net&lt;/td&gt;\n                    &lt;td&gt;97.65.110.105&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Marie&lt;/td&gt;\n                    &lt;td&gt;Morgan&lt;/td&gt;\n                    &lt;td&gt;mmorganb@cloudflare.com&lt;/td&gt;\n                    &lt;td&gt;226.79.152.112&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Amanda&lt;/td&gt;\n                    &lt;td&gt;Nelson&lt;/td&gt;\n                    &lt;td&gt;anelson13@indiatimes.com&lt;/td&gt;\n                    &lt;td&gt;161.185.121.245&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Lisa&lt;/td&gt;\n                    &lt;td&gt;Olson&lt;/td&gt;\n                    &lt;td&gt;lolsonr@telegraph.co.uk&lt;/td&gt;\n                    &lt;td&gt;77.245.172.100&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Alice&lt;/td&gt;\n                    &lt;td&gt;Ortiz&lt;/td&gt;\n                    &lt;td&gt;aortizw@histats.com&lt;/td&gt;\n                    &lt;td&gt;179.52.222.21&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Peter&lt;/td&gt;\n                    &lt;td&gt;Phillips&lt;/td&gt;\n                    &lt;td&gt;pphillipss@1688.com&lt;/td&gt;\n                    &lt;td&gt;11.158.255.76&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Matthew&lt;/td&gt;\n                    &lt;td&gt;Porter&lt;/td&gt;\n                    &lt;td&gt;mporter9@europa.eu&lt;/td&gt;\n                    &lt;td&gt;174.81.178.88&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Tammy&lt;/td&gt;\n                    &lt;td&gt;Ray&lt;/td&gt;\n                    &lt;td&gt;trayx@weather.com&lt;/td&gt;\n                    &lt;td&gt;192.243.38.190&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Mark&lt;/td&gt;\n                    &lt;td&gt;Richardson&lt;/td&gt;\n                    &lt;td&gt;mrichardson1d@ihg.com&lt;/td&gt;\n                    &lt;td&gt;209.217.14.154&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Joan&lt;/td&gt;\n                    &lt;td&gt;Roberts&lt;/td&gt;\n                    &lt;td&gt;jroberts12@alibaba.com&lt;/td&gt;\n                    &lt;td&gt;4.91.143.62&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Kathleen&lt;/td&gt;\n                    &lt;td&gt;Rose&lt;/td&gt;\n                    &lt;td&gt;kroseg@pinterest.com&lt;/td&gt;\n                    &lt;td&gt;222.172.140.56&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Steve&lt;/td&gt;\n                    &lt;td&gt;Sanders&lt;/td&gt;\n                    &lt;td&gt;ssanders1b@wikispaces.com&lt;/td&gt;\n                    &lt;td&gt;91.61.109.245&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Shirley&lt;/td&gt;\n                    &lt;td&gt;Scott&lt;/td&gt;\n                    &lt;td&gt;sscottm@macromedia.com&lt;/td&gt;\n                    &lt;td&gt;219.237.108.82&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Lillian&lt;/td&gt;\n                    &lt;td&gt;Stephens&lt;/td&gt;\n                    &lt;td&gt;lstephens19@hugedomains.com&lt;/td&gt;\n                    &lt;td&gt;89.85.137.204&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Nicole&lt;/td&gt;\n                    &lt;td&gt;Thompson&lt;/td&gt;\n                    &lt;td&gt;nthompson3@admin.ch&lt;/td&gt;\n                    &lt;td&gt;13.183.208.155&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Marie&lt;/td&gt;\n                    &lt;td&gt;Thompson&lt;/td&gt;\n                    &lt;td&gt;mthompsonz@yelp.com&lt;/td&gt;\n                    &lt;td&gt;162.164.5.231&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Alan&lt;/td&gt;\n                    &lt;td&gt;Vasquez&lt;/td&gt;\n                    &lt;td&gt;avasquezo@miibeian.gov.cn&lt;/td&gt;\n                    &lt;td&gt;178.109.86.172&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Mildred&lt;/td&gt;\n                    &lt;td&gt;Watkins&lt;/td&gt;\n                    &lt;td&gt;mwatkins0@miibeian.gov.cn&lt;/td&gt;\n                    &lt;td&gt;150.67.132.64&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Eugene&lt;/td&gt;\n                    &lt;td&gt;Williams&lt;/td&gt;\n                    &lt;td&gt;ewilliamsi@deliciousdays.com&lt;/td&gt;\n                    &lt;td&gt;67.208.26.182&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Catherine&lt;/td&gt;\n                    &lt;td&gt;Williams&lt;/td&gt;\n                    &lt;td&gt;cwilliamsl@360.cn&lt;/td&gt;\n                    &lt;td&gt;154.87.204.51&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/section&gt;\n    &lt;footer&gt;\n        J\u00f6rn Freiheit - \u00dcbung 2\n    &lt;/footer&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <pre><code>body {\nfont-family: Verdana;\n}\n\nheader {\nbackground-color: #AFAFAF;\ncolor: #FF5F00;\ntext-align: center;\n}\n\nnav {\nmargin-top: 3%;\nmargin-bottom: 3%;\n}\n\ntable {\nborder-collapse: collapse;\nwidth: 80%;\nbox-shadow: 10px 10px 5px grey;\n}\n\ntable thead {\nbackground-color: #76B900;\ncolor: white;\n}\n\ntable td,\ntable th {\nborder: 1px solid #ddd;\npadding: 8px;\n}\n\ntable tr:nth-child(even) {\nbackground-color: #f2f2f2;\n}\n\ntable tr:hover {\nbackground-color: #ddd;\n}\n\nnav a {\ntext-decoration: none;\nborder: 1px solid #0082D1;\nbackground-color: #0082D1;\nborder-radius: 7px;\ncolor: white;\nfont-weight: bold;\ntext-align: center;\npadding: 10px;\nbox-shadow: 5px 5px 5px grey;\n}\n\nnav a:hover {\nborder: 1px solid #AFAFAF;\nbackground-color: #AFAFAF;\ncolor: #FF5F00;\n}\n\nfooter {\nbackground-color: #FF5F00;\ncolor: black;\ntext-align: center;\npadding: 20px;\n}\n</code></pre>"},{"location":"uebungen/#ubung-3","title":"\u00dcbung 3","text":"\u00dcbungsaufgabe 3 (Grid und Einheiten) <ul> <li>Erstellen Sie einen <code>Uebung3</code>-Ordner und darin eine Datei <code>uebung3.html</code>. Kopieren Sie diesen Inhalt in <code>uebung3.html</code> (Rechtsklick auf die Seite und <code>Seitenquelltext anzeigen</code> - das <code>&lt;script&gt;</code>-Element unten k\u00f6nnen Sie l\u00f6schen).</li> <li>Laden Sie sich hier die Datei images.zip herunter, entpacken Sie sie und schieben Sie den <code>images</code>-Ordner samt Inhalt in den <code>Uebung3</code>-Ordner.</li> <li>Implementieren Sie die <code>uebung3.html</code> so, dass ungef\u00e4hr folgendes Aussehen entsteht:    </li> <li>Sie k\u00f6nnen die CSS-Eigenschaften innerhalb der <code>uebung3.html</code> im <code>&lt;style&gt;</code>-Element definieren oder wieder in einer externen Datei. </li> <li>Ziele der \u00dcbung sind die Anwendung von CSS-Grid (siehe z.B. hier) sowie die Verwendung von Gr\u00f6\u00dfen und Einheiten (siehe z.B. hier). Lassen Sie Ihrer Kreativit\u00e4t freien Lauf!</li> </ul>"},{"location":"uebungen/#ubung-4","title":"\u00dcbung 4","text":"\u00dcbungsaufgabe 4 (Bootstrap und JavaScript) <ul> <li>Erstellen Sie einen <code>Uebung4</code>-Ordner und darin eine Datei <code>uebung4.html</code>. </li> <li>Implementieren Sie die <code>uebung4.html</code> mithilfe von Bootstrap so, dass ungef\u00e4hr folgendes Aussehen entsteht:   </li> <li>Sind in das Formular Daten eingegeben und wird der <code>Registrieren</code>-Button gedr\u00fcckt, dann erscheint mithilfe einer JavaScript-Funktion:      </li> <li>Wird der <code>Abbrechen</code>-Button gedr\u00fcckt, werden alle bereits eingegebenen Daten wieder aus den Textfeldern entfernt.   </li> <li>Ziele der \u00dcbung sind die Anwendung von CSS-Bootstrap und JavaScript.</li> </ul>"},{"location":"uebungen/#ubung-5","title":"\u00dcbung 5","text":"\u00dcbungsaufgabe 5 (JavaScript, DOM) <ul> <li>Laden Sie hier die Datei <code>Uebung5.zip</code> herunter, entpacken Sie sie und schieben den Ordner <code>Uebung5</code> in Ihren Projektordner.</li> <li>In der Datei <code>uebung5.html</code> sind einige Dinge vorbereitet:<ul> <li>eine Tabelle mit leerem <code>&lt;tbody&gt;</code>. Der <code>&lt;tbody&gt;</code> hat die <code>id='tbody'</code>,</li> <li>wird die Seite geladen, wird die <code>init()</code>-Funktion aufgerufen (<code>onload='init()'</code>),</li> <li>eine JavaScript-Funktion <code>getStaedte()</code>. Diese Funktion \"holt\" die Datei <code>staedte.json</code> (liegt im <code>Uebung5</code>-Ordner) und gibt sie zur\u00fcck,</li> <li>eine Variable <code>staedtearr</code>, in der das Array geladen werden soll, das die <code>staedte.json</code> enth\u00e4lt. Achtung! das Array selbst ist der Wert, der im JSON unter dem Schl\u00fcssel <code>staedte</code> steht (schauen Sie sich die Datei <code>staedte.json</code> an),</li> <li>eine JavaScript-Funktion <code>createTable()</code>, die Sie verwenden sollen, um die Tabelle mit Werten zu bef\u00fcllen. Schauen Sie sich auch die Kommentare in <code>uebung5.html</code> an.  </li> </ul> </li> <li>Bef\u00fcllen Sie die Tabelle unter Verwendung der Daten aus <code>staedte.json</code><ul> <li>f\u00fcr jede neu entstehende Tabellenzeile m\u00fcssen Sie f\u00fcnf neue <code>td</code>-Objekte kreieren und diese an ein neu kreiertes <code>tr</code>-Objekt anh\u00e4ngen. Das <code>tr</code>-Obejkt h\u00e4ngen Sie wiederum an den <code>tbody</code>.</li> <li>die Nummer in der ersten Spalte erstellen Sie einfach fortlaufend mit dem Wert von <code>nr</code>, den Sie f\u00fcr jede Zeile erh\u00f6hen.</li> <li>der <code>Info</code>-Button ist ein Hyperlink mit der Bootstrap-Klasse <code>btn</code>; also <code>&lt;a class=\"btn btn-success btn-sm\" href=\"\"&gt;Info&lt;/a&gt;</code>. Der Wert f\u00fcr <code>href</code> findet sich jeweils unter dem <code>link</code>-Eintrag f\u00fcr jede Stadt in <code>staedte.json</code>.</li> <li>f\u00fcr das Bild verwenden Sie den <code>bild</code>-Link aus <code>staedte.json</code> als <code>src</code>. Geben Sie auch dem Attribut <code>alt</code> einen Wert (die <code>stadt</code> aus <code>staedte.json</code>).</li> <li>die Tabelle sieht dann so aus:     </li> </ul> </li> <li>Bei Eingabe in das Textfeld von <code>Filter</code> wird bei jedem Zeichen, das eingegeben wird, die Funktion <code>createTable()</code> aufgerufen (siehe <code>oninput=\"createTable()\"</code>). Es sollen nun nur noch die St\u00e4dte angezeigt werden, deren Stadtnamen oder deren Gr\u00fcndungsjahr zur Eingabe passt. <ul> <li>Wird also z.B. <code>br</code> eingegeben, dann erscheinen nur die St\u00e4dte, die mit <code>Br</code> beginnen (Gro\u00df- und Kleinschreibung egal, siehe <code>toLowerCase()</code>): </li> <li>Wird also z.B. <code>12</code> eingegeben, dann erscheinen nur die St\u00e4dte, deren Gr\u00fcndungsjahr mit <code>12</code> beginnt:   </li> <li>Tipp: Sie laufen in einer Schleife durch das Array, um alle St\u00e4dte auszulesen. F\u00fcgen Sie darin eine Bedingung ein, dass Sie nur die St\u00e4dte der Tabelle hinzuf\u00fcgen, die der Filter-Eingabe entsprechen.</li> </ul> </li> </ul>"},{"location":"uebungen/#ubung-6","title":"\u00dcbung 6","text":"\u00dcbungsaufgabe 6 (Angular - Komponenten) <ul> <li>Erstellen Sie ein neues Angular-Projekt <code>Uebung6</code> (siehe  hier). </li> <li>Erstellen Sie mindestens folgende Komponenten: <code>header</code>, <code>nav</code>, <code>footer</code>, <code>table</code> und <code>form</code>. </li> <li> <p>Gestalten Sie <code>header</code>, <code>nav</code> und <code>footer</code> so, dass es ungef\u00e4hr so aussieht:</p> <p></p> <p>Diese drei Komponenten sollen mittels Komponentenselektoren in die <code>AppComponent</code> eingebunden werden.</p> </li> <li> <p>Erstellen Sie f\u00fcr die <code>TableComponent</code> die Route <code>read</code> und f\u00fcr die <code>FormComponent</code> die Route <code>create</code>, so dass f\u00fcr <code>localhost:4200/create</code> ungef\u00e4hr folgende Ansicht erscheint:</p> <p></p> <p>Diese Komponente enth\u00e4lt ein Formular. F\u00fcr <code>localhost:4200/read</code> erscheint ungef\u00e4hr folgende Ansicht:</p> <p></p> <p>Diese Komponente enth\u00e4lt eine Tabelle. Es ist nur der Tabellenkopf mit den Spalten\u00fcberschriften zu sehen. </p> </li> <li> <p>In der n\u00e4chsten \u00dcbung bef\u00fcllen wir die Tabelle mithilfe eines Services. </p> </li> </ul>"},{"location":"uebungen/#ubung-7","title":"\u00dcbung 7","text":"\u00dcbungsaufgabe 7 (JSON, Direktiven, Bindings) <ul> <li>Erstellen Sie ein neues Angular-Projekt <code>Uebung7</code> (siehe  hier) oder nutzen Sie Ihre Implementierung aus <code>Uebung6</code>. </li> <li> <p>Erstellen Sie im <code>assets</code>-Ordner eine Datei <code>members.json</code> mit folgendem Inhalt:</p> assets/members.json <pre><code>[{\n\"forename\": \"Catherine\",\n\"surname\": \"Williams\",\n\"email\": \"cwilliamsl@360.cn\"\n},\n{\n\"forename\": \"Adam\",\n\"surname\": \"Anderson\",\n\"email\": \"aanderson8@google.fr\"\n},\n{\n\"forename\": \"Susan\",\n\"surname\": \"Andrews\",\n\"email\": \"sandrewsn@google.co.jp\"\n},\n{\n\"forename\": \"Catherine\",\n\"surname\": \"Andrews\",\n\"email\": \"candrewsp@noaa.gov\"\n},\n{\n\"forename\": \"Alan\",\n\"surname\": \"Bradley\",\n\"email\": \"abradley1c@globo.com\"\n},\n{\n\"forename\": \"Anne\",\n\"surname\": \"Brooks\",\n\"email\": \"abrooks16@bravesites.com\"\n},\n{\n\"forename\": \"Russell\",\n\"surname\": \"Brown\",\n\"email\": \"rbrownq@nifty.com\"\n},\n{\n\"forename\": \"Ryan\",\n\"surname\": \"Burton\",\n\"email\": \"rburton18@foxnews.com\"\n},\n{\n\"forename\": \"Roy\",\n\"surname\": \"Campbell\",\n\"email\": \"rcampbell1@geocities.com\"\n},\n{\n\"forename\": \"Russell\",\n\"surname\": \"Campbell\",\n\"email\": \"rcampbell17@eventbrite.com\"\n},\n{\n\"forename\": \"Bonnie\",\n\"surname\": \"Coleman\",\n\"email\": \"bcoleman11@fc2.com\"\n},\n{\n\"forename\": \"Ernest\",\n\"surname\": \"Coleman\",\n\"email\": \"ecoleman15@businessweek.com\"\n},\n{\n\"forename\": \"Richard\",\n\"surname\": \"Cruz\",\n\"email\": \"rcruz7@unc.edu\"\n},\n{\n\"forename\": \"Sean\",\n\"surname\": \"Cruz\",\n\"email\": \"scruz10@answers.com\"\n},\n{\n\"forename\": \"Rebecca\",\n\"surname\": \"Cunningham\",\n\"email\": \"rcunninghamd@mac.com\"\n},\n{\n\"forename\": \"Margaret\",\n\"surname\": \"Evans\",\n\"email\": \"mevansh@pcworld.com\"\n},\n{\n\"forename\": \"Jeffrey\",\n\"surname\": \"Ford\",\n\"email\": \"jford14@cnet.com\"\n},\n{\n\"forename\": \"Andrea\",\n\"surname\": \"Gardner\",\n\"email\": \"agardnerv@woothemes.com\"\n},\n{\n\"forename\": \"Deborah\",\n\"surname\": \"George\",\n\"email\": \"dgeorge6@furl.net\"\n},\n{\n\"forename\": \"Sean\",\n\"surname\": \"Gibson\",\n\"email\": \"sgibsony@alexa.com\"\n},\n{\n\"forename\": \"Virginia\",\n\"surname\": \"Graham\",\n\"email\": \"vgrahamk@aol.com\"\n},\n{\n\"forename\": \"Steven\",\n\"surname\": \"Hamilton\",\n\"email\": \"shamiltonu@state.tx.us\"\n},\n{\n\"forename\": \"Virginia\",\n\"surname\": \"Hawkins\",\n\"email\": \"vhawkinsf@ehow.com\"\n},\n{\n\"forename\": \"Edward\",\n\"surname\": \"Hicks\",\n\"email\": \"ehicksc@pcworld.com\"\n},\n{\n\"forename\": \"Mark\",\n\"surname\": \"Johnson\",\n\"email\": \"mjohnsonj@hostgator.com\"\n},\n{\n\"forename\": \"Ruth\",\n\"surname\": \"Jordan\",\n\"email\": \"rjordan1a@smugmug.com\"\n},\n{\n\"forename\": \"Antonio\",\n\"surname\": \"Kim\",\n\"email\": \"akim4@odnoklassniki.ru\"\n},\n{\n\"forename\": \"Jennifer\",\n\"surname\": \"Marshall\",\n\"email\": \"jmarshallt@gnu.org\"\n},\n{\n\"forename\": \"Eric\",\n\"surname\": \"Matthews\",\n\"email\": \"ematthews5@independent.co.uk\"\n},\n{\n\"forename\": \"Raymond\",\n\"surname\": \"Mcdonald\",\n\"email\": \"rmcdonald2@ihg.com\"\n},\n{\n\"forename\": \"Eric\",\n\"surname\": \"Miller\",\n\"email\": \"emillere@creativecommons.org\"\n},\n{\n\"forename\": \"Jonathan\",\n\"surname\": \"Morales\",\n\"email\": \"jmoralesa@ovh.net\"\n},\n{\n\"forename\": \"Marie\",\n\"surname\": \"Morgan\",\n\"email\": \"mmorganb@cloudflare.com\"\n},\n{\n\"forename\": \"Amanda\",\n\"surname\": \"Nelson\",\n\"email\": \"anelson13@indiatimes.com\"\n},\n{\n\"forename\": \"Lisa\",\n\"surname\": \"Olson\",\n\"email\": \"lolsonr@telegraph.co.uk\"\n},\n{\n\"forename\": \"Alice\",\n\"surname\": \"Ortiz\",\n\"email\": \"aortizw@histats.com\"\n},\n{\n\"forename\": \"Peter\",\n\"surname\": \"Phillips\",\n\"email\": \"pphillipss@1688.com\"\n},\n{\n\"forename\": \"Matthew\",\n\"surname\": \"Porter\",\n\"email\": \"mporter9@europa.eu\"\n},\n{\n\"forename\": \"Tammy\",\n\"surname\": \"Ray\",\n\"email\": \"trayx@weather.com\"\n},\n{\n\"forename\": \"Mark\",\n\"surname\": \"Richardson\",\n\"email\": \"mrichardson1d@ihg.com\"\n},\n{\n\"forename\": \"Joan\",\n\"surname\": \"Roberts\",\n\"email\": \"jroberts12@alibaba.com\"\n},\n{\n\"forename\": \"Kathleen\",\n\"surname\": \"Rose\",\n\"email\": \"kroseg@pinterest.com\"\n},\n{\n\"forename\": \"Steve\",\n\"surname\": \"Sanders\",\n\"email\": \"ssanders1b@wikispaces.com\"\n},\n{\n\"forename\": \"Shirley\",\n\"surname\": \"Scott\",\n\"email\": \"sscottm@macromedia.com\"\n},\n{\n\"forename\": \"Lillian\",\n\"surname\": \"Stephens\",\n\"email\": \"lstephens19@hugedomains.com\"\n},\n{\n\"forename\": \"Nicole\",\n\"surname\": \"Thompson\",\n\"email\": \"nthompson3@admin.ch\"\n},\n{\n\"forename\": \"Marie\",\n\"surname\": \"Thompson\",\n\"email\": \"mthompsonz@yelp.com\"\n},\n{\n\"forename\": \"Alan\",\n\"surname\": \"Vasquez\",\n\"email\": \"avasquezo@miibeian.gov.cn\"\n},\n{\n\"forename\": \"Mildred\",\n\"surname\": \"Watkins\",\n\"email\": \"mwatkins0@miibeian.gov.cn\"\n},\n{\n\"forename\": \"Eugene\",\n\"surname\": \"Williams\",\n\"email\": \"ewilliamsi@deliciousdays.com\"\n}\n]\n</code></pre> </li> <li> <p>Erstellen Sie einen Service <code>members.service.ts</code>, in dem die <code>members.json</code> per <code>fetch()</code> eingelesen wird und der eine Funktion zur Verf\u00fcgung stellt, die alle <code>members</code> als Array zur\u00fcckgibt. Erstellen Sie ein passendes <code>Members</code>-Interface, um die Typsicherheit zu verbessern.</p> </li> <li> <p>Bef\u00fcllen Sie mit den Daten aus <code>members.json</code> eine Tabelle:</p> <p></p> </li> <li> <p>Implementieren Sie f\u00fcr das Suchfeld die Behandlung des <code>input</code>-Ereignisses so, dass nur die Teilnehmerinnen in der Tabelle erscheinen, deren Vor- oder Nachnamen den Suchstring enthalten:</p> <p></p> </li> <li> <p>Alle Bilder sind nur Anregungen, kann gerne ganz anders aussehen. Gerne k\u00f6nnen Sie auch Bootstrap einbinden und verwenden (siehe hier).</p> </li> </ul>"},{"location":"uebungen/#ubung-8","title":"\u00dcbung 8","text":"\u00dcbungsaufgabe 8 (REST-API) <ul> <li> <p>Erstellen Sie eine REST-API mit folgenden Endpunkten:</p> <ul> <li><code>GET /users</code>          /* gebe alle <code>user</code>-Eintr\u00e4ge zur\u00fcck */</li> <li><code>POST /users</code>         /* erstelle einen neuen <code>user</code> */</li> <li><code>GET /users/:name</code>    /* gibt den <code>user</code> mit <code>username == name</code> zur\u00fcck */</li> <li><code>DELETE /users/:id</code>   /* l\u00f6scht den <code>user</code> mit <code>_id == id</code> */</li> <li><code>PUT /users/:id</code>      /* \u00e4ndert Daten von <code>user</code> mit <code>_id == id</code> */</li> </ul> </li> <li> <p>Geben Sie am Anfang Folgendes im Terminal innerhalb Ihres Projekteordners ein (ohne die Kommentare):</p> <ul> <li><code>mkdir Uebung8</code></li> <li><code>cd Uebung8</code></li> <li><code>npm i</code>                    /* Erstellt das Node.js-Projekt  */</li> <li><code>npm i express --save</code>     /* express.js  */</li> <li><code>npm i nodemon --save-dev</code> /* nodemon */</li> <li><code>npm i mongoose --save</code>    /* mongoose */</li> <li><code>npm i dotenv --save</code>      /* dotenv  */</li> </ul> </li> <li> <p>Vewenden Sie MongoDB als Datenbankmanagementsystem. Installieren Sie sich entweder eine lokale Instanz (MongoDB Community Server) oder verwenden Sie MongoDB Atlas. F\u00fcr Letzteres ben\u00f6tigen Sie einen MongoDB-Account.</p> </li> <li> <p>Erstellen Sie folgendes Mongoose-Schema (Datenmodell):</p> <pre><code>const schema = new mongoose.Schema({\nusername: String,\npassword: String,\nemail: String,\nrole: String\n});\n</code></pre> </li> <li> <p>Beachten Sie!: Es soll kein neuer <code>User</code> angelegt werden, wenn der <code>username</code> bereits verwendet wird und/oder wenn die <code>email</code> bereits verwendet wird:</p> <ul> <li>Weder <code>username</code> noch <code>email</code> exitieren bereits:     </li> <li><code>username</code> existiert bereits:     </li> <li><code>email</code> existiert bereits:     </li> </ul> </li> <li> <p><code>GET /user/:name</code> sucht nach dem <code>username</code>:</p> <ul> <li></li> </ul> </li> </ul>"}]}